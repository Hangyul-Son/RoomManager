
RoomManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c80  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800452c  0800452c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800452c  0800452c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800452c  0800452c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800452c  0800452c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  080045a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080045a4  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000884f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001edd  00000000  00000000  000288e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0002a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002b090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019199  00000000  00000000  0002b850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0bf  00000000  00000000  000449e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d62  00000000  00000000  0004eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e080a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000259c  00000000  00000000  000e085c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003e4c 	.word	0x08003e4c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003e4c 	.word	0x08003e4c

08000224 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	e002      	b.n	8000234 <Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <Delay+0xa>
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f829 	bl	80002a4 <LCD_BackLed_Control>
	LCD_Rst();
 8000252:	f000 f80f 	bl	8000274 <LCD_Rst>
	LCD_REG_Config();
 8000256:	f000 f85f 	bl	8000318 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000264:	22f0      	movs	r2, #240	; 0xf0
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f9e6 	bl	800063a <LCD_Clear>
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <LCD_Rst+0x28>)
 800027e:	f001 fa7a 	bl	8001776 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <LCD_Rst+0x2c>)
 8000284:	f7ff ffce 	bl	8000224 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <LCD_Rst+0x28>)
 800028e:	f001 fa72 	bl	8001776 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffc6 	bl	8000224 <Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011800 	.word	0x40011800
 80002a0:	0002bffc 	.word	0x0002bffc

080002a4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002bc:	f001 fa5b 	bl	8001776 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002c0:	e005      	b.n	80002ce <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002ca:	f001 fa54 	bl	8001776 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40011400 	.word	0x40011400

080002dc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	8013      	strh	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <LCD_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	60020000 	.word	0x60020000

08000318 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800031c:	20cf      	movs	r0, #207	; 0xcf
 800031e:	f7ff ffdd 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffe8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000328:	2081      	movs	r0, #129	; 0x81
 800032a:	f7ff ffe5 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800032e:	2030      	movs	r0, #48	; 0x30
 8000330:	f7ff ffe2 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000334:	20ed      	movs	r0, #237	; 0xed
 8000336:	f7ff ffd1 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f7ff ffdc 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ffd9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ffd6 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f7ff ffd3 	bl	80002f8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000352:	20e8      	movs	r0, #232	; 0xe8
 8000354:	f7ff ffc2 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000358:	2085      	movs	r0, #133	; 0x85
 800035a:	f7ff ffcd 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ffca 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000364:	2078      	movs	r0, #120	; 0x78
 8000366:	f7ff ffc7 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800036a:	20cb      	movs	r0, #203	; 0xcb
 800036c:	f7ff ffb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000370:	2039      	movs	r0, #57	; 0x39
 8000372:	f7ff ffc1 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000376:	202c      	movs	r0, #44	; 0x2c
 8000378:	f7ff ffbe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ffbb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000382:	2034      	movs	r0, #52	; 0x34
 8000384:	f7ff ffb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000388:	2002      	movs	r0, #2
 800038a:	f7ff ffb5 	bl	80002f8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800038e:	20f7      	movs	r0, #247	; 0xf7
 8000390:	f7ff ffa4 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000394:	2020      	movs	r0, #32
 8000396:	f7ff ffaf 	bl	80002f8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800039a:	20ea      	movs	r0, #234	; 0xea
 800039c:	f7ff ff9e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffa9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffa6 	bl	80002f8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003ac:	20b1      	movs	r0, #177	; 0xb1
 80003ae:	f7ff ff95 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ffa0 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003b8:	201b      	movs	r0, #27
 80003ba:	f7ff ff9d 	bl	80002f8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003be:	20b6      	movs	r0, #182	; 0xb6
 80003c0:	f7ff ff8c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003c4:	200a      	movs	r0, #10
 80003c6:	f7ff ff97 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003ca:	20a2      	movs	r0, #162	; 0xa2
 80003cc:	f7ff ff94 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003d0:	20c0      	movs	r0, #192	; 0xc0
 80003d2:	f7ff ff83 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003d6:	2035      	movs	r0, #53	; 0x35
 80003d8:	f7ff ff8e 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003dc:	20c1      	movs	r0, #193	; 0xc1
 80003de:	f7ff ff7d 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003e2:	2011      	movs	r0, #17
 80003e4:	f7ff ff88 	bl	80002f8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003e8:	20c5      	movs	r0, #197	; 0xc5
 80003ea:	f7ff ff77 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003ee:	2045      	movs	r0, #69	; 0x45
 80003f0:	f7ff ff82 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80003f4:	2045      	movs	r0, #69	; 0x45
 80003f6:	f7ff ff7f 	bl	80002f8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80003fa:	20c7      	movs	r0, #199	; 0xc7
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000400:	20a2      	movs	r0, #162	; 0xa2
 8000402:	f7ff ff79 	bl	80002f8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000406:	20f2      	movs	r0, #242	; 0xf2
 8000408:	f7ff ff68 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff73 	bl	80002f8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000412:	2026      	movs	r0, #38	; 0x26
 8000414:	f7ff ff62 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff6d 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800041e:	20e0      	movs	r0, #224	; 0xe0
 8000420:	f7ff ff5c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000424:	200f      	movs	r0, #15
 8000426:	f7ff ff67 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800042a:	2026      	movs	r0, #38	; 0x26
 800042c:	f7ff ff64 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000430:	2024      	movs	r0, #36	; 0x24
 8000432:	f7ff ff61 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000436:	200b      	movs	r0, #11
 8000438:	f7ff ff5e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800043c:	200e      	movs	r0, #14
 800043e:	f7ff ff5b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000442:	2009      	movs	r0, #9
 8000444:	f7ff ff58 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000448:	2054      	movs	r0, #84	; 0x54
 800044a:	f7ff ff55 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800044e:	20a8      	movs	r0, #168	; 0xa8
 8000450:	f7ff ff52 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000454:	2046      	movs	r0, #70	; 0x46
 8000456:	f7ff ff4f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff4c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ff49 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff46 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800046c:	200f      	movs	r0, #15
 800046e:	f7ff ff43 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff ff40 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff3d 	bl	80002f8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800047e:	20e1      	movs	r0, #225	; 0xe1
 8000480:	f7ff ff2c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800048a:	2019      	movs	r0, #25
 800048c:	f7ff ff34 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000490:	201b      	movs	r0, #27
 8000492:	f7ff ff31 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000496:	2004      	movs	r0, #4
 8000498:	f7ff ff2e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800049c:	2010      	movs	r0, #16
 800049e:	f7ff ff2b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004a8:	202a      	movs	r0, #42	; 0x2a
 80004aa:	f7ff ff25 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004ae:	2047      	movs	r0, #71	; 0x47
 80004b0:	f7ff ff22 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004b4:	2039      	movs	r0, #57	; 0x39
 80004b6:	f7ff ff1f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff ff1c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c0:	2006      	movs	r0, #6
 80004c2:	f7ff ff19 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c6:	2006      	movs	r0, #6
 80004c8:	f7ff ff16 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004cc:	2030      	movs	r0, #48	; 0x30
 80004ce:	f7ff ff13 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004d2:	2038      	movs	r0, #56	; 0x38
 80004d4:	f7ff ff10 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0d 	bl	80002f8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f7ff fefc 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f7ff ff07 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004ea:	202a      	movs	r0, #42	; 0x2a
 80004ec:	f7ff fef6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff01 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000502:	20ef      	movs	r0, #239	; 0xef
 8000504:	f7ff fef8 	bl	80002f8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000508:	202b      	movs	r0, #43	; 0x2b
 800050a:	f7ff fee7 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feef 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff feec 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000520:	203f      	movs	r0, #63	; 0x3f
 8000522:	f7ff fee9 	bl	80002f8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f7ff fed8 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800052c:	2055      	movs	r0, #85	; 0x55
 800052e:	f7ff fee3 	bl	80002f8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff fed2 	bl	80002dc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <LCD_REG_Config+0x230>)
 800053a:	f7ff fe73 	bl	8000224 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800053e:	2029      	movs	r0, #41	; 0x29
 8000540:	f7ff fecc 	bl	80002dc <LCD_Write_Cmd>
	
	
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0002bffc 	.word	0x0002bffc

0800054c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	80fb      	strh	r3, [r7, #6]
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	4613      	mov	r3, r2
 8000568:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800056a:	202a      	movs	r0, #42	; 0x2a
 800056c:	f7ff feb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff febe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff feb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4413      	add	r3, r2
 800058e:	3b01      	subs	r3, #1
 8000590:	121b      	asrs	r3, r3, #8
 8000592:	b29b      	uxth	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feaf 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fea4 	bl	80002f8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005b0:	202b      	movs	r0, #43	; 0x2b
 80005b2:	f7ff fe93 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe9b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe95 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	121b      	asrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe8c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005e0:	88ba      	ldrh	r2, [r7, #4]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe81 	bl	80002f8 <LCD_Write_Data>
	
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800060e:	202c      	movs	r0, #44	; 0x2c
 8000610:	f7ff fe64 	bl	80002dc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe6b 	bl	80002f8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_FillColor+0x1c>
		
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	f7ff ff74 	bl	800054c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff ffc3 	bl	80005fe <LCD_FillColor>
	
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	460b      	mov	r3, r1
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	3b20      	subs	r3, #32
 8000696:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000698:	88b9      	ldrh	r1, [r7, #4]
 800069a:	88f8      	ldrh	r0, [r7, #6]
 800069c:	2310      	movs	r3, #16
 800069e:	2208      	movs	r2, #8
 80006a0:	f7ff ff54 	bl	800054c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80006a4:	202c      	movs	r0, #44	; 0x2c
 80006a6:	f7ff fe19 	bl	80002dc <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006aa:	2300      	movs	r3, #0
 80006ac:	73bb      	strb	r3, [r7, #14]
 80006ae:	e023      	b.n	80006f8 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80006b0:	7b3a      	ldrb	r2, [r7, #12]
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	4914      	ldr	r1, [pc, #80]	; (8000708 <LCD_DrawChar+0x88>)
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	440a      	add	r2, r1
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006c0:	2300      	movs	r3, #0
 80006c2:	737b      	strb	r3, [r7, #13]
 80006c4:	e012      	b.n	80006ec <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80006d0:	201f      	movs	r0, #31
 80006d2:	f7ff fe11 	bl	80002f8 <LCD_Write_Data>
 80006d6:	e003      	b.n	80006e0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80006d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006dc:	f7ff fe0c 	bl	80002f8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	085b      	lsrs	r3, r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	3301      	adds	r3, #1
 80006ea:	737b      	strb	r3, [r7, #13]
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d9e9      	bls.n	80006c6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73bb      	strb	r3, [r7, #14]
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d9d8      	bls.n	80006b0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	08003ef0 	.word	0x08003ef0

0800070c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	603a      	str	r2, [r7, #0]
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	460b      	mov	r3, r1
 800071a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800071c:	e01c      	b.n	8000758 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2be8      	cmp	r3, #232	; 0xe8
 8000722:	d904      	bls.n	800072e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000724:	2300      	movs	r3, #0
 8000726:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	3310      	adds	r3, #16
 800072c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000734:	d903      	bls.n	800073e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000736:	2300      	movs	r3, #0
 8000738:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800073a:	2300      	movs	r3, #0
 800073c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	88b9      	ldrh	r1, [r7, #4]
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <LCD_DrawChar>
		
		pStr ++;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	3308      	adds	r3, #8
 8000756:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1de      	bne.n	800071e <LCD_DrawString+0x12>
		
	}
	
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <set_time>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time(uint8_t hours, uint8_t minutes, uint8_t seconds){
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	460b      	mov	r3, r1
 8000778:	71bb      	strb	r3, [r7, #6]
 800077a:	4613      	mov	r3, r2
 800077c:	717b      	strb	r3, [r7, #5]
	/** Initialize RTC and set the Time and Date
	  */
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef DateToUpdate;
	sTime.Hours = hours;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = minutes;
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = seconds;
 8000786:	797b      	ldrb	r3, [r7, #5]
 8000788:	73bb      	strb	r3, [r7, #14]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2201      	movs	r2, #1
 8000790:	4619      	mov	r1, r3
 8000792:	4813      	ldr	r0, [pc, #76]	; (80007e0 <set_time+0x74>)
 8000794:	f001 fe62 	bl	800245c <HAL_RTC_SetTime>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <set_time+0x36>
	{
		Error_Handler();
 800079e:	f000 fb65 	bl	8000e6c <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80007a2:	2304      	movs	r3, #4
 80007a4:	723b      	strb	r3, [r7, #8]
	DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 80007a6:	2311      	movs	r3, #17
 80007a8:	727b      	strb	r3, [r7, #9]
	DateToUpdate.Date = 0x24;
 80007aa:	2324      	movs	r3, #36	; 0x24
 80007ac:	72bb      	strb	r3, [r7, #10]
	DateToUpdate.Year = 0x22;
 80007ae:	2322      	movs	r3, #34	; 0x22
 80007b0:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2201      	movs	r2, #1
 80007b8:	4619      	mov	r1, r3
 80007ba:	4809      	ldr	r0, [pc, #36]	; (80007e0 <set_time+0x74>)
 80007bc:	f001 ffbe 	bl	800273c <HAL_RTC_SetDate>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <set_time+0x5e>
	{
		Error_Handler();
 80007c6:	f000 fb51 	bl	8000e6c <Error_Handler>
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xFFFF); // backup register
 80007ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ce:	2101      	movs	r1, #1
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <set_time+0x74>)
 80007d2:	f002 fd51 	bl	8003278 <HAL_RTCEx_BKUPWrite>
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000008c 	.word	0x2000008c

080007e4 <set_alarm>:

void set_alarm(uint8_t hours, uint8_t minutes, uint8_t seconds){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
 80007ee:	460b      	mov	r3, r1
 80007f0:	71bb      	strb	r3, [r7, #6]
 80007f2:	4613      	mov	r3, r2
 80007f4:	717b      	strb	r3, [r7, #5]
	/** Enable the Alarm A
	*/
	RTC_AlarmTypeDef sAlarm;
	sAlarm.AlarmTime.Hours = hours;
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = minutes;
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = seconds;
 80007fe:	797b      	ldrb	r3, [r7, #5]
 8000800:	72bb      	strb	r3, [r7, #10]
	sAlarm.Alarm = RTC_ALARM_A;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	4809      	ldr	r0, [pc, #36]	; (8000834 <set_alarm+0x50>)
 8000810:	f002 f89e 	bl	8002950 <HAL_RTC_SetAlarm>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <set_alarm+0x3a>
	{
		Error_Handler();
 800081a:	f000 fb27 	bl	8000e6c <Error_Handler>
	}
	HAL_RTC_SetAlarm(&hrtc, &sAlarm,RTC_FORMAT_BCD);
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2201      	movs	r2, #1
 8000824:	4619      	mov	r1, r3
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <set_alarm+0x50>)
 8000828:	f002 f892 	bl	8002950 <HAL_RTC_SetAlarm>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000008c 	.word	0x2000008c

08000838 <display_time>:

void display_time(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	; 0x38
 800083c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	char time_buffer[20];
	char date_buffer[20];
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800083e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	481c      	ldr	r0, [pc, #112]	; (80008b8 <display_time+0x80>)
 8000848:	f002 f82e 	bl	80028a8 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800084c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	4818      	ldr	r0, [pc, #96]	; (80008b8 <display_time+0x80>)
 8000856:	f001 fe99 	bl	800258c <HAL_RTC_GetTime>


	sprintf(date_buffer,"%02d-%02d-%02d",2000+gDate.Year, gDate.Month, gDate.Date);
 800085a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800085e:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000862:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000866:	4619      	mov	r1, r3
 8000868:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800086c:	4638      	mov	r0, r7
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	460b      	mov	r3, r1
 8000872:	4912      	ldr	r1, [pc, #72]	; (80008bc <display_time+0x84>)
 8000874:	f002 fe70 	bl	8003558 <siprintf>
	sprintf(time_buffer,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800087c:	461a      	mov	r2, r3
 800087e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000882:	4619      	mov	r1, r3
 8000884:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000888:	f107 0014 	add.w	r0, r7, #20
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	460b      	mov	r3, r1
 8000890:	490b      	ldr	r1, [pc, #44]	; (80008c0 <display_time+0x88>)
 8000892:	f002 fe61 	bl	8003558 <siprintf>

	LCD_DrawString(20,10,date_buffer);
 8000896:	463b      	mov	r3, r7
 8000898:	461a      	mov	r2, r3
 800089a:	210a      	movs	r1, #10
 800089c:	2014      	movs	r0, #20
 800089e:	f7ff ff35 	bl	800070c <LCD_DrawString>
	LCD_DrawString(20,30,time_buffer);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	461a      	mov	r2, r3
 80008a8:	211e      	movs	r1, #30
 80008aa:	2014      	movs	r0, #20
 80008ac:	f7ff ff2e 	bl	800070c <LCD_DrawString>

}
 80008b0:	bf00      	nop
 80008b2:	3730      	adds	r7, #48	; 0x30
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000008c 	.word	0x2000008c
 80008bc:	08003e64 	.word	0x08003e64
 80008c0:	08003e74 	.word	0x08003e74

080008c4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	alarm_on=1;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <HAL_RTC_AlarmAEventCallback+0x18>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	200000e8 	.word	0x200000e8

080008e0 <ring_alarm>:

void ring_alarm(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef aTime;
	HAL_RTC_GetAlarm(&hrtc, &aTime, RTC_ALARM_A, RTC_FORMAT_BIN);
 80008e6:	f107 0108 	add.w	r1, r7, #8
 80008ea:	2300      	movs	r3, #0
 80008ec:	2200      	movs	r2, #0
 80008ee:	484e      	ldr	r0, [pc, #312]	; (8000a28 <ring_alarm+0x148>)
 80008f0:	f002 f980 	bl	8002bf4 <HAL_RTC_GetAlarm>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	484b      	ldr	r0, [pc, #300]	; (8000a28 <ring_alarm+0x148>)
 80008fc:	f001 fe46 	bl	800258c <HAL_RTC_GetTime>

	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)){
 8000900:	2110      	movs	r1, #16
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <ring_alarm+0x14c>)
 8000904:	f000 ff20 	bl	8001748 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d005      	beq.n	800091a <ring_alarm+0x3a>
		bonus_time+=10;
 800090e:	4b48      	ldr	r3, [pc, #288]	; (8000a30 <ring_alarm+0x150>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	330a      	adds	r3, #10
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <ring_alarm+0x150>)
 8000918:	701a      	strb	r2, [r3, #0]
	}
	if(bonus_time==0 && ringing==0){
 800091a:	4b45      	ldr	r3, [pc, #276]	; (8000a30 <ring_alarm+0x150>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d110      	bne.n	8000944 <ring_alarm+0x64>
 8000922:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <ring_alarm+0x154>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10c      	bne.n	8000944 <ring_alarm+0x64>
		LCD_DrawString(20,70,"WAKE UP!!!");
 800092a:	4a43      	ldr	r2, [pc, #268]	; (8000a38 <ring_alarm+0x158>)
 800092c:	2146      	movs	r1, #70	; 0x46
 800092e:	2014      	movs	r0, #20
 8000930:	f7ff feec 	bl	800070c <LCD_DrawString>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000938:	4840      	ldr	r0, [pc, #256]	; (8000a3c <ring_alarm+0x15c>)
 800093a:	f000 ff34 	bl	80017a6 <HAL_GPIO_TogglePin>
		ringing = 1;
 800093e:	4b3d      	ldr	r3, [pc, #244]	; (8000a34 <ring_alarm+0x154>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
	}
	if(bonus_time>0){
 8000944:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <ring_alarm+0x150>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d009      	beq.n	8000960 <ring_alarm+0x80>
		HAL_Delay(1000);
 800094c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000950:	f000 fc34 	bl	80011bc <HAL_Delay>
		bonus_time--;
 8000954:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <ring_alarm+0x150>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3b01      	subs	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <ring_alarm+0x150>)
 800095e:	701a      	strb	r2, [r3, #0]
	}
	//HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//BUZZER
	//TESTING
	if(bonus_time && ringing==1){
 8000960:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <ring_alarm+0x150>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00c      	beq.n	8000982 <ring_alarm+0xa2>
 8000968:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <ring_alarm+0x154>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d108      	bne.n	8000982 <ring_alarm+0xa2>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000974:	4831      	ldr	r0, [pc, #196]	; (8000a3c <ring_alarm+0x15c>)
 8000976:	f000 ff16 	bl	80017a6 <HAL_GPIO_TogglePin>
		ringing = 0;
 800097a:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <ring_alarm+0x154>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
		if(ringing==1){
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
			ringing = 0;
		}
	}
}
 8000980:	e04d      	b.n	8000a1e <ring_alarm+0x13e>
	else if(aTime.AlarmTime.Seconds+30>=59){
 8000982:	7abb      	ldrb	r3, [r7, #10]
 8000984:	2b1c      	cmp	r3, #28
 8000986:	d92e      	bls.n	80009e6 <ring_alarm+0x106>
		if(gTime.Minutes>aTime.AlarmTime.Minutes && gTime.Seconds>=(aTime.AlarmTime.Seconds+30)%60){
 8000988:	797a      	ldrb	r2, [r7, #5]
 800098a:	7a7b      	ldrb	r3, [r7, #9]
 800098c:	429a      	cmp	r2, r3
 800098e:	d946      	bls.n	8000a1e <ring_alarm+0x13e>
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	4618      	mov	r0, r3
 8000994:	7abb      	ldrb	r3, [r7, #10]
 8000996:	f103 021e 	add.w	r2, r3, #30
 800099a:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <ring_alarm+0x160>)
 800099c:	fb83 1302 	smull	r1, r3, r3, r2
 80009a0:	4413      	add	r3, r2
 80009a2:	1159      	asrs	r1, r3, #5
 80009a4:	17d3      	asrs	r3, r2, #31
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	1a5b      	subs	r3, r3, r1
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	1ad1      	subs	r1, r2, r3
 80009b2:	4288      	cmp	r0, r1
 80009b4:	db33      	blt.n	8000a1e <ring_alarm+0x13e>
			LCD_DrawString(20,70,"             ");
 80009b6:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <ring_alarm+0x164>)
 80009b8:	2146      	movs	r1, #70	; 0x46
 80009ba:	2014      	movs	r0, #20
 80009bc:	f7ff fea6 	bl	800070c <LCD_DrawString>
			alarm_on=0;
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <ring_alarm+0x168>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
			bonus_time=0;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <ring_alarm+0x150>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
			if(ringing==1){
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <ring_alarm+0x154>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d124      	bne.n	8000a1e <ring_alarm+0x13e>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	4818      	ldr	r0, [pc, #96]	; (8000a3c <ring_alarm+0x15c>)
 80009da:	f000 fee4 	bl	80017a6 <HAL_GPIO_TogglePin>
				ringing = 0;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <ring_alarm+0x154>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
}
 80009e4:	e01b      	b.n	8000a1e <ring_alarm+0x13e>
	else if(gTime.Seconds>=aTime.AlarmTime.Seconds+30){
 80009e6:	7abb      	ldrb	r3, [r7, #10]
 80009e8:	331d      	adds	r3, #29
 80009ea:	79ba      	ldrb	r2, [r7, #6]
 80009ec:	4293      	cmp	r3, r2
 80009ee:	da16      	bge.n	8000a1e <ring_alarm+0x13e>
		LCD_DrawString(20,70,"             ");
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <ring_alarm+0x164>)
 80009f2:	2146      	movs	r1, #70	; 0x46
 80009f4:	2014      	movs	r0, #20
 80009f6:	f7ff fe89 	bl	800070c <LCD_DrawString>
		alarm_on = 0;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <ring_alarm+0x168>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
		bonus_time=0;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <ring_alarm+0x150>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
		if(ringing==1){
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <ring_alarm+0x154>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d107      	bne.n	8000a1e <ring_alarm+0x13e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a12:	480a      	ldr	r0, [pc, #40]	; (8000a3c <ring_alarm+0x15c>)
 8000a14:	f000 fec7 	bl	80017a6 <HAL_GPIO_TogglePin>
			ringing = 0;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <ring_alarm+0x154>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000008c 	.word	0x2000008c
 8000a2c:	40011000 	.word	0x40011000
 8000a30:	200000ea 	.word	0x200000ea
 8000a34:	200000e9 	.word	0x200000e9
 8000a38:	08003e84 	.word	0x08003e84
 8000a3c:	40010800 	.word	0x40010800
 8000a40:	88888889 	.word	0x88888889
 8000a44:	08003e90 	.word	0x08003e90
 8000a48:	200000e8 	.word	0x200000e8

08000a4c <display_alarm_time>:

void display_alarm_time(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af02      	add	r7, sp, #8
	RTC_AlarmTypeDef aTime;
	HAL_RTC_GetAlarm(&hrtc, &aTime, RTC_ALARM_A, RTC_FORMAT_BIN);
 8000a52:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000a56:	2300      	movs	r3, #0
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <display_alarm_time+0x64>)
 8000a5c:	f002 f8ca 	bl	8002bf4 <HAL_RTC_GetAlarm>
	char atime_buffer[20];

	sprintf(atime_buffer,"Alarm Time: %02d:%02d:%02d",aTime.AlarmTime.Hours, aTime.AlarmTime.Minutes, aTime.AlarmTime.Seconds);
 8000a60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a64:	461a      	mov	r2, r3
 8000a66:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000a70:	f107 0014 	add.w	r0, r7, #20
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	460b      	mov	r3, r1
 8000a78:	490e      	ldr	r1, [pc, #56]	; (8000ab4 <display_alarm_time+0x68>)
 8000a7a:	f002 fd6d 	bl	8003558 <siprintf>
	char bonus_time_buffer[20];
	sprintf(bonus_time_buffer,"Bonus Time: %02d",bonus_time);
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <display_alarm_time+0x6c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	463b      	mov	r3, r7
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <display_alarm_time+0x70>)
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fd65 	bl	8003558 <siprintf>
	LCD_DrawString(20,50,atime_buffer);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	461a      	mov	r2, r3
 8000a94:	2132      	movs	r1, #50	; 0x32
 8000a96:	2014      	movs	r0, #20
 8000a98:	f7ff fe38 	bl	800070c <LCD_DrawString>
	LCD_DrawString(20,90,bonus_time_buffer);
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	215a      	movs	r1, #90	; 0x5a
 8000aa2:	2014      	movs	r0, #20
 8000aa4:	f7ff fe32 	bl	800070c <LCD_DrawString>
}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	08003ea0 	.word	0x08003ea0
 8000ab8:	200000ea 	.word	0x200000ea
 8000abc:	08003ebc 	.word	0x08003ebc

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac4:	f000 fb18 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac8:	f000 f820 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000acc:	f000 f8d8 	bl	8000c80 <MX_GPIO_Init>
  MX_RTC_Init();
 8000ad0:	f000 f872 	bl	8000bb8 <MX_RTC_Init>
  MX_FSMC_Init();
 8000ad4:	f000 f966 	bl	8000da4 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8000ad8:	f7ff fbb5 	bl	8000246 <LCD_INIT>
  //if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1) != 0xFFFF){
  set_time(0x0,0x0,0x0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fe43 	bl	800076c <set_time>
  //}
  set_alarm(0x0,0x0,0x5);
 8000ae6:	2205      	movs	r2, #5
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff fe7a 	bl	80007e4 <set_alarm>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 display_time();
 8000af0:	f7ff fea2 	bl	8000838 <display_time>
	 display_alarm_time();
 8000af4:	f7ff ffaa 	bl	8000a4c <display_alarm_time>

	 if(alarm_on){
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <main+0x48>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0f7      	beq.n	8000af0 <main+0x30>
		 ring_alarm();
 8000b00:	f7ff feee 	bl	80008e0 <ring_alarm>
	 display_time();
 8000b04:	e7f4      	b.n	8000af0 <main+0x30>
 8000b06:	bf00      	nop
 8000b08:	200000e8 	.word	0x200000e8

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b096      	sub	sp, #88	; 0x58
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b16:	2228      	movs	r2, #40	; 0x28
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fd14 	bl	8003548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b40:	230a      	movs	r3, #10
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fe49 	bl	80017f0 <HAL_RCC_OscConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b64:	f000 f982 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b68:	230f      	movs	r3, #15
 8000b6a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f8b6 	bl	8001cf4 <HAL_RCC_ClockConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000b8e:	f000 f96d 	bl	8000e6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b92:	2301      	movs	r3, #1
 8000b94:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fa2c 	bl	8001ffc <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000baa:	f000 f95f 	bl	8000e6c <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3758      	adds	r7, #88	; 0x58
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	801a      	strh	r2, [r3, #0]
 8000bc8:	460a      	mov	r2, r1
 8000bca:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bd8:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_RTC_Init+0xc0>)
 8000bda:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <MX_RTC_Init+0xc4>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_RTC_Init+0xc0>)
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000be4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000be6:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <MX_RTC_Init+0xc0>)
 8000be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bec:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bee:	4822      	ldr	r0, [pc, #136]	; (8000c78 <MX_RTC_Init+0xc0>)
 8000bf0:	f001 fb9e 	bl	8002330 <HAL_RTC_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000bfa:	f000 f937 	bl	8000e6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	4819      	ldr	r0, [pc, #100]	; (8000c78 <MX_RTC_Init+0xc0>)
 8000c14:	f001 fc22 	bl	800245c <HAL_RTC_SetTime>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000c1e:	f000 f925 	bl	8000e6c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c22:	2301      	movs	r3, #1
 8000c24:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 8000c26:	2311      	movs	r3, #17
 8000c28:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x16;
 8000c2a:	2316      	movs	r3, #22
 8000c2c:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x22;
 8000c2e:	2322      	movs	r3, #34	; 0x22
 8000c30:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	2201      	movs	r2, #1
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480f      	ldr	r0, [pc, #60]	; (8000c78 <MX_RTC_Init+0xc0>)
 8000c3c:	f001 fd7e 	bl	800273c <HAL_RTC_SetDate>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000c46:	f000 f911 	bl	8000e6c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000c52:	2330      	movs	r3, #48	; 0x30
 8000c54:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_RTC_Init+0xc0>)
 8000c62:	f001 ff0f 	bl	8002a84 <HAL_RTC_SetAlarm_IT>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000c6c:	f000 f8fe 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000008c 	.word	0x2000008c
 8000c7c:	40002800 	.word	0x40002800

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a3d      	ldr	r2, [pc, #244]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a37      	ldr	r2, [pc, #220]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc4:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000cca:	f043 0320 	orr.w	r3, r3, #32
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a2b      	ldr	r2, [pc, #172]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <MX_GPIO_Init+0x110>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfa:	4826      	ldr	r0, [pc, #152]	; (8000d94 <MX_GPIO_Init+0x114>)
 8000cfc:	f000 fd3b 	bl	8001776 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d06:	4824      	ldr	r0, [pc, #144]	; (8000d98 <MX_GPIO_Init+0x118>)
 8000d08:	f000 fd35 	bl	8001776 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4822      	ldr	r0, [pc, #136]	; (8000d9c <MX_GPIO_Init+0x11c>)
 8000d12:	f000 fd30 	bl	8001776 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d16:	2310      	movs	r3, #16
 8000d18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4619      	mov	r1, r3
 8000d28:	481d      	ldr	r0, [pc, #116]	; (8000da0 <MX_GPIO_Init+0x120>)
 8000d2a:	f000 fb79 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4619      	mov	r1, r3
 8000d46:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_GPIO_Init+0x114>)
 8000d48:	f000 fb6a 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	4619      	mov	r1, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <MX_GPIO_Init+0x118>)
 8000d66:	f000 fb5b 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <MX_GPIO_Init+0x11c>)
 8000d82:	f000 fb4d 	bl	8001420 <HAL_GPIO_Init>

}
 8000d86:	bf00      	nop
 8000d88:	3720      	adds	r7, #32
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40011400 	.word	0x40011400
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40011800 	.word	0x40011800
 8000da0:	40011000 	.word	0x40011000

08000da4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000dbe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000dc2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000dc4:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000dc6:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <MX_FSMC_Init+0xc0>)
 8000dc8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000dd6:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000dde:	2210      	movs	r2, #16
 8000de0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000de2:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000dfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000e1e:	230f      	movs	r3, #15
 8000e20:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000e22:	23ff      	movs	r3, #255	; 0xff
 8000e24:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000e26:	230f      	movs	r3, #15
 8000e28:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e2e:	2311      	movs	r3, #17
 8000e30:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4808      	ldr	r0, [pc, #32]	; (8000e60 <MX_FSMC_Init+0xbc>)
 8000e3e:	f002 fa35 	bl	80032ac <HAL_SRAM_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000e48:	f000 f810 	bl	8000e6c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_FSMC_Init+0xc4>)
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <MX_FSMC_Init+0xc4>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200000a0 	.word	0x200000a0
 8000e64:	a0000104 	.word	0xa0000104
 8000e68:	40010000 	.word	0x40010000

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_MspInit+0x60>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_MspInit+0x60>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000

08000edc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <HAL_RTC_MspInit+0x4c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d118      	bne.n	8000f20 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000eee:	f000 fc73 	bl	80017d8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_RTC_MspInit+0x50>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_RTC_MspInit+0x50>)
 8000ef8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000efc:	61d3      	str	r3, [r2, #28]
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_RTC_MspInit+0x50>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_RTC_MspInit+0x54>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	2029      	movs	r0, #41	; 0x29
 8000f16:	f000 fa4c 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000f1a:	2029      	movs	r0, #41	; 0x29
 8000f1c:	f000 fa65 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40002800 	.word	0x40002800
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	4242043c 	.word	0x4242043c

08000f34 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_FSMC_MspInit+0x78>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d129      	bne.n	8000fa4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_FSMC_MspInit+0x78>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_FSMC_MspInit+0x7c>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_FSMC_MspInit+0x7c>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_FSMC_MspInit+0x7c>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000f6e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000f72:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	4619      	mov	r1, r3
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <HAL_FSMC_MspInit+0x80>)
 8000f84:	f000 fa4c 	bl	8001420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f88:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000f8c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <HAL_FSMC_MspInit+0x84>)
 8000f9e:	f000 fa3f 	bl	8001420 <HAL_GPIO_Init>
 8000fa2:	e000      	b.n	8000fa6 <HAL_FSMC_MspInit+0x72>
    return;
 8000fa4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200000ec 	.word	0x200000ec
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40011800 	.word	0x40011800
 8000fb8:	40011400 	.word	0x40011400

08000fbc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000fc4:	f7ff ffb6 	bl	8000f34 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001016:	f000 f8b5 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <RTC_Alarm_IRQHandler+0x10>)
 8001026:	f001 fe5b 	bl	8002ce0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000008c 	.word	0x2000008c

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f002 fa46 	bl	80034f4 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20010000 	.word	0x20010000
 8001094:	00000400 	.word	0x00000400
 8001098:	200000f0 	.word	0x200000f0
 800109c:	20000108 	.word	0x20000108

080010a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ae:	490d      	ldr	r1, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c4:	4c0a      	ldr	r4, [pc, #40]	; (80010f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010d2:	f7ff ffe5 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f002 fa13 	bl	8003500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010da:	f7ff fcf1 	bl	8000ac0 <main>
  bx lr
 80010de:	4770      	bx	lr
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010e8:	08004534 	.word	0x08004534
  ldr r2, =_sbss
 80010ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010f0:	20000108 	.word	0x20000108

080010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_2_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_Init+0x28>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_Init+0x28>)
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f947 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	200f      	movs	r0, #15
 8001110:	f000 f808 	bl	8001124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff feb0 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40022000 	.word	0x40022000

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x54>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f95f 	bl	8001406 <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001160:	f000 f927 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_InitTick+0x5c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000008 	.word	0x20000008
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x1c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_IncTick+0x20>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_IncTick+0x20>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000008 	.word	0x20000008
 80011a4:	200000f4 	.word	0x200000f4

080011a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <HAL_GetTick+0x10>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	200000f4 	.word	0x200000f4

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff fff0 	bl	80011a8 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffe0 	bl	80011a8 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4906      	ldr	r1, [pc, #24]	; (800129c <__NVIC_EnableIRQ+0x34>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800137c:	f7ff ff90 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff2d 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff42 	bl	800124c <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff90 	bl	80012f4 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5f 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff35 	bl	8001268 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b08b      	sub	sp, #44	; 0x2c
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	e179      	b.n	8001728 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001434:	2201      	movs	r2, #1
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8168 	bne.w	8001722 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a96      	ldr	r2, [pc, #600]	; (80016b0 <HAL_GPIO_Init+0x290>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d05e      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 800145c:	4a94      	ldr	r2, [pc, #592]	; (80016b0 <HAL_GPIO_Init+0x290>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d875      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 8001462:	4a94      	ldr	r2, [pc, #592]	; (80016b4 <HAL_GPIO_Init+0x294>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d058      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 8001468:	4a92      	ldr	r2, [pc, #584]	; (80016b4 <HAL_GPIO_Init+0x294>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d86f      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 800146e:	4a92      	ldr	r2, [pc, #584]	; (80016b8 <HAL_GPIO_Init+0x298>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d052      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 8001474:	4a90      	ldr	r2, [pc, #576]	; (80016b8 <HAL_GPIO_Init+0x298>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d869      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 800147a:	4a90      	ldr	r2, [pc, #576]	; (80016bc <HAL_GPIO_Init+0x29c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d04c      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 8001480:	4a8e      	ldr	r2, [pc, #568]	; (80016bc <HAL_GPIO_Init+0x29c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d863      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 8001486:	4a8e      	ldr	r2, [pc, #568]	; (80016c0 <HAL_GPIO_Init+0x2a0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d046      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 800148c:	4a8c      	ldr	r2, [pc, #560]	; (80016c0 <HAL_GPIO_Init+0x2a0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d85d      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 8001492:	2b12      	cmp	r3, #18
 8001494:	d82a      	bhi.n	80014ec <HAL_GPIO_Init+0xcc>
 8001496:	2b12      	cmp	r3, #18
 8001498:	d859      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <HAL_GPIO_Init+0x80>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	0800151b 	.word	0x0800151b
 80014a4:	080014f5 	.word	0x080014f5
 80014a8:	08001507 	.word	0x08001507
 80014ac:	08001549 	.word	0x08001549
 80014b0:	0800154f 	.word	0x0800154f
 80014b4:	0800154f 	.word	0x0800154f
 80014b8:	0800154f 	.word	0x0800154f
 80014bc:	0800154f 	.word	0x0800154f
 80014c0:	0800154f 	.word	0x0800154f
 80014c4:	0800154f 	.word	0x0800154f
 80014c8:	0800154f 	.word	0x0800154f
 80014cc:	0800154f 	.word	0x0800154f
 80014d0:	0800154f 	.word	0x0800154f
 80014d4:	0800154f 	.word	0x0800154f
 80014d8:	0800154f 	.word	0x0800154f
 80014dc:	0800154f 	.word	0x0800154f
 80014e0:	0800154f 	.word	0x0800154f
 80014e4:	080014fd 	.word	0x080014fd
 80014e8:	08001511 	.word	0x08001511
 80014ec:	4a75      	ldr	r2, [pc, #468]	; (80016c4 <HAL_GPIO_Init+0x2a4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014f2:	e02c      	b.n	800154e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e029      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	3304      	adds	r3, #4
 8001502:	623b      	str	r3, [r7, #32]
          break;
 8001504:	e024      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	3308      	adds	r3, #8
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e01f      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	330c      	adds	r3, #12
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e01a      	b.n	8001550 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001522:	2304      	movs	r3, #4
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e013      	b.n	8001550 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d105      	bne.n	800153c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001530:	2308      	movs	r3, #8
 8001532:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	611a      	str	r2, [r3, #16]
          break;
 800153a:	e009      	b.n	8001550 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800153c:	2308      	movs	r3, #8
 800153e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	615a      	str	r2, [r3, #20]
          break;
 8001546:	e003      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x130>
          break;
 800154e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d801      	bhi.n	800155a <HAL_GPIO_Init+0x13a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	e001      	b.n	800155e <HAL_GPIO_Init+0x13e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3304      	adds	r3, #4
 800155e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2bff      	cmp	r3, #255	; 0xff
 8001564:	d802      	bhi.n	800156c <HAL_GPIO_Init+0x14c>
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	e002      	b.n	8001572 <HAL_GPIO_Init+0x152>
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	3b08      	subs	r3, #8
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	210f      	movs	r1, #15
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	401a      	ands	r2, r3
 8001584:	6a39      	ldr	r1, [r7, #32]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	431a      	orrs	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 80c1 	beq.w	8001722 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015a0:	4b49      	ldr	r3, [pc, #292]	; (80016c8 <HAL_GPIO_Init+0x2a8>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a48      	ldr	r2, [pc, #288]	; (80016c8 <HAL_GPIO_Init+0x2a8>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b46      	ldr	r3, [pc, #280]	; (80016c8 <HAL_GPIO_Init+0x2a8>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b8:	4a44      	ldr	r2, [pc, #272]	; (80016cc <HAL_GPIO_Init+0x2ac>)
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a3c      	ldr	r2, [pc, #240]	; (80016d0 <HAL_GPIO_Init+0x2b0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d01f      	beq.n	8001624 <HAL_GPIO_Init+0x204>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a3b      	ldr	r2, [pc, #236]	; (80016d4 <HAL_GPIO_Init+0x2b4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d019      	beq.n	8001620 <HAL_GPIO_Init+0x200>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a3a      	ldr	r2, [pc, #232]	; (80016d8 <HAL_GPIO_Init+0x2b8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d013      	beq.n	800161c <HAL_GPIO_Init+0x1fc>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a39      	ldr	r2, [pc, #228]	; (80016dc <HAL_GPIO_Init+0x2bc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00d      	beq.n	8001618 <HAL_GPIO_Init+0x1f8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a38      	ldr	r2, [pc, #224]	; (80016e0 <HAL_GPIO_Init+0x2c0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d007      	beq.n	8001614 <HAL_GPIO_Init+0x1f4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a37      	ldr	r2, [pc, #220]	; (80016e4 <HAL_GPIO_Init+0x2c4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_GPIO_Init+0x1f0>
 800160c:	2305      	movs	r3, #5
 800160e:	e00a      	b.n	8001626 <HAL_GPIO_Init+0x206>
 8001610:	2306      	movs	r3, #6
 8001612:	e008      	b.n	8001626 <HAL_GPIO_Init+0x206>
 8001614:	2304      	movs	r3, #4
 8001616:	e006      	b.n	8001626 <HAL_GPIO_Init+0x206>
 8001618:	2303      	movs	r3, #3
 800161a:	e004      	b.n	8001626 <HAL_GPIO_Init+0x206>
 800161c:	2302      	movs	r3, #2
 800161e:	e002      	b.n	8001626 <HAL_GPIO_Init+0x206>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_GPIO_Init+0x206>
 8001624:	2300      	movs	r3, #0
 8001626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001628:	f002 0203 	and.w	r2, r2, #3
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	4093      	lsls	r3, r2
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001636:	4925      	ldr	r1, [pc, #148]	; (80016cc <HAL_GPIO_Init+0x2ac>)
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3302      	adds	r3, #2
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4924      	ldr	r1, [pc, #144]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	4920      	ldr	r1, [pc, #128]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 8001668:	4013      	ands	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	491a      	ldr	r1, [pc, #104]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	43db      	mvns	r3, r3
 800168e:	4916      	ldr	r1, [pc, #88]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 8001690:	4013      	ands	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d025      	beq.n	80016ec <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	4910      	ldr	r1, [pc, #64]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]
 80016ac:	e025      	b.n	80016fa <HAL_GPIO_Init+0x2da>
 80016ae:	bf00      	nop
 80016b0:	10320000 	.word	0x10320000
 80016b4:	10310000 	.word	0x10310000
 80016b8:	10220000 	.word	0x10220000
 80016bc:	10210000 	.word	0x10210000
 80016c0:	10120000 	.word	0x10120000
 80016c4:	10110000 	.word	0x10110000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40010c00 	.word	0x40010c00
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40011400 	.word	0x40011400
 80016e0:	40011800 	.word	0x40011800
 80016e4:	40011c00 	.word	0x40011c00
 80016e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_GPIO_Init+0x324>)
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4913      	ldr	r1, [pc, #76]	; (8001744 <HAL_GPIO_Init+0x324>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_GPIO_Init+0x324>)
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	490e      	ldr	r1, [pc, #56]	; (8001744 <HAL_GPIO_Init+0x324>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	60cb      	str	r3, [r1, #12]
 8001712:	e006      	b.n	8001722 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_GPIO_Init+0x324>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	43db      	mvns	r3, r3
 800171c:	4909      	ldr	r1, [pc, #36]	; (8001744 <HAL_GPIO_Init+0x324>)
 800171e:	4013      	ands	r3, r2
 8001720:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	f47f ae7e 	bne.w	8001434 <HAL_GPIO_Init+0x14>
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	372c      	adds	r7, #44	; 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e001      	b.n	800176a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	807b      	strh	r3, [r7, #2]
 8001782:	4613      	mov	r3, r2
 8001784:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001786:	787b      	ldrb	r3, [r7, #1]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178c:	887a      	ldrh	r2, [r7, #2]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001792:	e003      	b.n	800179c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	041a      	lsls	r2, r3, #16
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	611a      	str	r2, [r3, #16]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b8:	887a      	ldrh	r2, [r7, #2]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4013      	ands	r3, r2
 80017be:	041a      	lsls	r2, r3, #16
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	400b      	ands	r3, r1
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	611a      	str	r2, [r3, #16]
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_PWR_EnableBkUpAccess+0x14>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	420e0020 	.word	0x420e0020

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e272      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8087 	beq.w	800191e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001810:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	d00c      	beq.n	8001836 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800181c:	4b8f      	ldr	r3, [pc, #572]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d112      	bne.n	800184e <HAL_RCC_OscConfig+0x5e>
 8001828:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d10b      	bne.n	800184e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d06c      	beq.n	800191c <HAL_RCC_OscConfig+0x12c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d168      	bne.n	800191c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e24c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x76>
 8001858:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800185e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e02e      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x98>
 800186e:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a7a      	ldr	r2, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a77      	ldr	r2, [pc, #476]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0xbc>
 8001892:	4b72      	ldr	r3, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a71      	ldr	r2, [pc, #452]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a67      	ldr	r2, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fc6c 	bl	80011a8 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff fc68 	bl	80011a8 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e200      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0xe4>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fc58 	bl	80011a8 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fc54 	bl	80011a8 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1ec      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x10c>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192a:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001936:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x18c>
 8001942:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1c0      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4939      	ldr	r1, [pc, #228]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff fc0d 	bl	80011a8 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fc09 	bl	80011a8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1a1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4927      	ldr	r1, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fbec 	bl	80011a8 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fbe8 	bl	80011a8 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e180      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03a      	beq.n	8001a74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d019      	beq.n	8001a3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fbcc 	bl	80011a8 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fbc8 	bl	80011a8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e160      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 fac4 	bl	8001fc0 <RCC_Delay>
 8001a38:	e01c      	b.n	8001a74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fbb2 	bl	80011a8 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a46:	e00f      	b.n	8001a68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff fbae 	bl	80011a8 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d908      	bls.n	8001a68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e146      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	42420000 	.word	0x42420000
 8001a64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e9      	bne.n	8001a48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80a6 	beq.w	8001bce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10d      	bne.n	8001aae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b88      	ldr	r3, [pc, #544]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a87      	ldr	r2, [pc, #540]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d118      	bne.n	8001aec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7e      	ldr	r2, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fb6f 	bl	80011a8 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff fb6b 	bl	80011a8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e103      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x312>
 8001af4:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	e02d      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x334>
 8001b0a:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a69      	ldr	r2, [pc, #420]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6213      	str	r3, [r2, #32]
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a66      	ldr	r2, [pc, #408]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	e01c      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x356>
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a60      	ldr	r2, [pc, #384]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	4b5e      	ldr	r3, [pc, #376]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	e00b      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d015      	beq.n	8001b92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7ff fb1f 	bl	80011a8 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fb1b 	bl	80011a8 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0b1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <HAL_RCC_OscConfig+0x37e>
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fb09 	bl	80011a8 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff fb05 	bl	80011a8 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e09b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a3b      	ldr	r2, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8087 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d061      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d146      	bne.n	8001c7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fad9 	bl	80011a8 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff fad5 	bl	80011a8 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e06d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d108      	bne.n	8001c34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	4921      	ldr	r1, [pc, #132]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a19      	ldr	r1, [r3, #32]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	430b      	orrs	r3, r1
 8001c46:	491b      	ldr	r1, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff faa9 	bl	80011a8 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff faa5 	bl	80011a8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e03d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x46a>
 8001c78:	e035      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fa92 	bl	80011a8 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff fa8e 	bl	80011a8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e026      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x498>
 8001ca6:	e01e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e019      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x500>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0d0      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d910      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	4965      	ldr	r1, [pc, #404]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0b8      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d50:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	494d      	ldr	r1, [pc, #308]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d040      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d115      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e07f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e073      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e06b      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4936      	ldr	r1, [pc, #216]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de4:	f7ff f9e0 	bl	80011a8 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7ff f9dc 	bl	80011a8 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e053      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d210      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4922      	ldr	r1, [pc, #136]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e032      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4916      	ldr	r1, [pc, #88]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e82:	f000 f821 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	490a      	ldr	r1, [pc, #40]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e94:	5ccb      	ldrb	r3, [r1, r3]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f93e 	bl	8001124 <HAL_InitTick>

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	080044e0 	.word	0x080044e0
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b490      	push	{r4, r7}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ed0:	1d3c      	adds	r4, r7, #4
 8001ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ed8:	f240 2301 	movw	r3, #513	; 0x201
 8001edc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x40>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x46>
 8001f06:	e02b      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f0a:	623b      	str	r3, [r7, #32]
      break;
 8001f0c:	e02b      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3328      	adds	r3, #40	; 0x28
 8001f18:	443b      	add	r3, r7
 8001f1a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f1e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d012      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0c5b      	lsrs	r3, r3, #17
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	3328      	adds	r3, #40	; 0x28
 8001f36:	443b      	add	r3, r7
 8001f38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f42:	fb03 f202 	mul.w	r2, r3, r2
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4e:	e004      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	623b      	str	r3, [r7, #32]
      break;
 8001f5e:	e002      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f62:	623b      	str	r3, [r7, #32]
      break;
 8001f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f66:	6a3b      	ldr	r3, [r7, #32]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc90      	pop	{r4, r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	08003ed0 	.word	0x08003ed0
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	007a1200 	.word	0x007a1200
 8001f80:	003d0900 	.word	0x003d0900

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b02      	ldr	r3, [pc, #8]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f9c:	f7ff fff2 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0adb      	lsrs	r3, r3, #11
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4903      	ldr	r1, [pc, #12]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	080044f0 	.word	0x080044f0

08001fc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <RCC_Delay+0x34>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <RCC_Delay+0x38>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0a5b      	lsrs	r3, r3, #9
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fdc:	bf00      	nop
  }
  while (Delay --);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e5a      	subs	r2, r3, #1
 8001fe2:	60fa      	str	r2, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f9      	bne.n	8001fdc <RCC_Delay+0x1c>
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d07d      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201c:	4b4f      	ldr	r3, [pc, #316]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10d      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	4a4b      	ldr	r2, [pc, #300]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002032:	61d3      	str	r3, [r2, #28]
 8002034:	4b49      	ldr	r3, [pc, #292]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002040:	2301      	movs	r3, #1
 8002042:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	4b46      	ldr	r3, [pc, #280]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d118      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a42      	ldr	r2, [pc, #264]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205c:	f7ff f8a4 	bl	80011a8 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	e008      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002064:	f7ff f8a0 	bl	80011a8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e06d      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d02e      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d027      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020a0:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b0:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020b6:	4a29      	ldr	r2, [pc, #164]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d014      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff f86f 	bl	80011a8 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7ff f86b 	bl	80011a8 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e036      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ee      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4917      	ldr	r1, [pc, #92]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002102:	7dfb      	ldrb	r3, [r7, #23]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002112:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	490b      	ldr	r1, [pc, #44]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	4904      	ldr	r1, [pc, #16]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	40007000 	.word	0x40007000
 8002164:	42420440 	.word	0x42420440

08002168 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b08d      	sub	sp, #52	; 0x34
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002170:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002172:	f107 040c 	add.w	r4, r7, #12
 8002176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800217c:	f240 2301 	movw	r3, #513	; 0x201
 8002180:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	2300      	movs	r3, #0
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3b01      	subs	r3, #1
 800219a:	2b0f      	cmp	r3, #15
 800219c:	f200 80b4 	bhi.w	8002308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80021a0:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	08002287 	.word	0x08002287
 80021ac:	080022ed 	.word	0x080022ed
 80021b0:	08002309 	.word	0x08002309
 80021b4:	08002277 	.word	0x08002277
 80021b8:	08002309 	.word	0x08002309
 80021bc:	08002309 	.word	0x08002309
 80021c0:	08002309 	.word	0x08002309
 80021c4:	0800227f 	.word	0x0800227f
 80021c8:	08002309 	.word	0x08002309
 80021cc:	08002309 	.word	0x08002309
 80021d0:	08002309 	.word	0x08002309
 80021d4:	08002309 	.word	0x08002309
 80021d8:	08002309 	.word	0x08002309
 80021dc:	08002309 	.word	0x08002309
 80021e0:	08002309 	.word	0x08002309
 80021e4:	080021e9 	.word	0x080021e9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80021e8:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80021ee:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8088 	beq.w	800230c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	0c9b      	lsrs	r3, r3, #18
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	3330      	adds	r3, #48	; 0x30
 8002206:	443b      	add	r3, r7
 8002208:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800220c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d017      	beq.n	8002248 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002218:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	0c5b      	lsrs	r3, r3, #17
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	3330      	adds	r3, #48	; 0x30
 8002224:	443b      	add	r3, r7
 8002226:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002236:	4a3b      	ldr	r2, [pc, #236]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	fbb2 f2f3 	udiv	r2, r2, r3
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002246:	e004      	b.n	8002252 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	4a37      	ldr	r2, [pc, #220]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002252:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225e:	d102      	bne.n	8002266 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002264:	e052      	b.n	800230c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4a30      	ldr	r2, [pc, #192]	; (800232c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002274:	e04a      	b.n	800230c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002276:	f7ff fe27 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 800227a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800227c:	e049      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800227e:	f7ff fe23 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8002282:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002284:	e045      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002296:	d108      	bne.n	80022aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 80022a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a8:	e01f      	b.n	80022ea <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b4:	d109      	bne.n	80022ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80022c2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c8:	e00f      	b.n	80022ea <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022d4:	d11c      	bne.n	8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 80022e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80022e8:	e012      	b.n	8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80022ea:	e011      	b.n	8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80022ec:	f7ff fe54 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0b9b      	lsrs	r3, r3, #14
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	3301      	adds	r3, #1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002306:	e004      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8002308:	bf00      	nop
 800230a:	e002      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 800230c:	bf00      	nop
 800230e:	e000      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002310:	bf00      	nop
    }
  }
  return (frequency);
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002314:	4618      	mov	r0, r3
 8002316:	3734      	adds	r7, #52	; 0x34
 8002318:	46bd      	mov	sp, r7
 800231a:	bd90      	pop	{r4, r7, pc}
 800231c:	08003ee0 	.word	0x08003ee0
 8002320:	40021000 	.word	0x40021000
 8002324:	007a1200 	.word	0x007a1200
 8002328:	003d0900 	.word	0x003d0900
 800232c:	aaaaaaab 	.word	0xaaaaaaab

08002330 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e084      	b.n	8002450 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7c5b      	ldrb	r3, [r3, #17]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fdc0 	bl	8000edc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fce6 	bl	8002d34 <HAL_RTC_WaitForSynchro>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2204      	movs	r2, #4
 8002372:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e06b      	b.n	8002450 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fd9f 	bl	8002ebc <RTC_EnterInitMode>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2204      	movs	r2, #4
 8002388:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e060      	b.n	8002450 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0207 	bic.w	r2, r2, #7
 800239c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <HAL_RTC_Init+0x128>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a2b      	ldr	r2, [pc, #172]	; (8002458 <HAL_RTC_Init+0x128>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80023b2:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_RTC_Init+0x128>)
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4926      	ldr	r1, [pc, #152]	; (8002458 <HAL_RTC_Init+0x128>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023cc:	d003      	beq.n	80023d6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e00e      	b.n	80023f4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80023d6:	2001      	movs	r0, #1
 80023d8:	f7ff fec6 	bl	8002168 <HAL_RCCEx_GetPeriphCLKFreq>
 80023dc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d104      	bne.n	80023ee <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2204      	movs	r2, #4
 80023e8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e030      	b.n	8002450 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 010f 	bic.w	r1, r3, #15
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	0c1a      	lsrs	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	b291      	uxth	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	430b      	orrs	r3, r1
 800241e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fd73 	bl	8002f0c <RTC_ExitInitMode>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2204      	movs	r2, #4
 8002430:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00c      	b.n	8002450 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800244e:	2300      	movs	r3, #0
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40006c00 	.word	0x40006c00

0800245c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_RTC_SetTime+0x20>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e080      	b.n	8002582 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	7c1b      	ldrb	r3, [r3, #16]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_RTC_SetTime+0x30>
 8002488:	2302      	movs	r3, #2
 800248a:	e07a      	b.n	8002582 <HAL_RTC_SetTime+0x126>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2202      	movs	r2, #2
 8002496:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d113      	bne.n	80024c6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80024a8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	785b      	ldrb	r3, [r3, #1]
 80024b0:	4619      	mov	r1, r3
 80024b2:	460b      	mov	r3, r1
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a5b      	subs	r3, r3, r1
 80024b8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80024ba:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80024c0:	4413      	add	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e01e      	b.n	8002504 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fd63 	bl	8002f96 <RTC_Bcd2ToByte>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80024d8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	785b      	ldrb	r3, [r3, #1]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fd58 	bl	8002f96 <RTC_Bcd2ToByte>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80024f2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	789b      	ldrb	r3, [r3, #2]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fd4c 	bl	8002f96 <RTC_Bcd2ToByte>
 80024fe:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002500:	4423      	add	r3, r4
 8002502:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002504:	6979      	ldr	r1, [r7, #20]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fc71 	bl	8002dee <RTC_WriteTimeCounter>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2204      	movs	r2, #4
 8002516:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e02f      	b.n	8002582 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0205 	bic.w	r2, r2, #5
 8002530:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fc82 	bl	8002e3c <RTC_ReadAlarmCounter>
 8002538:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002540:	d018      	beq.n	8002574 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	429a      	cmp	r2, r3
 8002548:	d214      	bcs.n	8002574 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002550:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002554:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002556:	6939      	ldr	r1, [r7, #16]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fc88 	bl	8002e6e <RTC_WriteAlarmCounter>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2204      	movs	r2, #4
 8002568:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e006      	b.n	8002582 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002580:	2300      	movs	r3, #0
  }
}
 8002582:	4618      	mov	r0, r3
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd90      	pop	{r4, r7, pc}
	...

0800258c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_RTC_GetTime+0x28>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b5      	b.n	8002724 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0ac      	b.n	8002724 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fbdf 	bl	8002d8e <RTC_ReadTimeCounter>
 80025d0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4a55      	ldr	r2, [pc, #340]	; (800272c <HAL_RTC_GetTime+0x1a0>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4b52      	ldr	r3, [pc, #328]	; (800272c <HAL_RTC_GetTime+0x1a0>)
 80025e2:	fba3 1302 	umull	r1, r3, r3, r2
 80025e6:	0adb      	lsrs	r3, r3, #11
 80025e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	4a4f      	ldr	r2, [pc, #316]	; (8002730 <HAL_RTC_GetTime+0x1a4>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	4a4a      	ldr	r2, [pc, #296]	; (800272c <HAL_RTC_GetTime+0x1a0>)
 8002604:	fba2 1203 	umull	r1, r2, r2, r3
 8002608:	0ad2      	lsrs	r2, r2, #11
 800260a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800260e:	fb01 f202 	mul.w	r2, r1, r2
 8002612:	1a9a      	subs	r2, r3, r2
 8002614:	4b46      	ldr	r3, [pc, #280]	; (8002730 <HAL_RTC_GetTime+0x1a4>)
 8002616:	fba3 1302 	umull	r1, r3, r3, r2
 800261a:	0959      	lsrs	r1, r3, #5
 800261c:	460b      	mov	r3, r1
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a5b      	subs	r3, r3, r1
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	1ad1      	subs	r1, r2, r3
 8002626:	b2ca      	uxtb	r2, r1
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b17      	cmp	r3, #23
 8002630:	d955      	bls.n	80026de <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4a3f      	ldr	r2, [pc, #252]	; (8002734 <HAL_RTC_GetTime+0x1a8>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800263e:	6939      	ldr	r1, [r7, #16]
 8002640:	4b3c      	ldr	r3, [pc, #240]	; (8002734 <HAL_RTC_GetTime+0x1a8>)
 8002642:	fba3 2301 	umull	r2, r3, r3, r1
 8002646:	091a      	lsrs	r2, r3, #4
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	1aca      	subs	r2, r1, r3
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fbef 	bl	8002e3c <RTC_ReadAlarmCounter>
 800265e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002666:	d008      	beq.n	800267a <HAL_RTC_GetTime+0xee>
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	429a      	cmp	r2, r3
 800266e:	d904      	bls.n	800267a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	e002      	b.n	8002680 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800267e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	4a2d      	ldr	r2, [pc, #180]	; (8002738 <HAL_RTC_GetTime+0x1ac>)
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800268e:	69b9      	ldr	r1, [r7, #24]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fbac 	bl	8002dee <RTC_WriteTimeCounter>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e041      	b.n	8002724 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a6:	d00c      	beq.n	80026c2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4413      	add	r3, r2
 80026ae:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80026b0:	69f9      	ldr	r1, [r7, #28]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fbdb 	bl	8002e6e <RTC_WriteAlarmCounter>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e030      	b.n	8002724 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80026c2:	69f9      	ldr	r1, [r7, #28]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fbd2 	bl	8002e6e <RTC_WriteAlarmCounter>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e027      	b.n	8002724 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80026d4:	6979      	ldr	r1, [r7, #20]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fc7a 	bl	8002fd0 <RTC_DateUpdate>
 80026dc:	e003      	b.n	80026e6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01a      	beq.n	8002722 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fc33 	bl	8002f5c <RTC_ByteToBcd2>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	785b      	ldrb	r3, [r3, #1]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fc2a 	bl	8002f5c <RTC_ByteToBcd2>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	789b      	ldrb	r3, [r3, #2]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fc21 	bl	8002f5c <RTC_ByteToBcd2>
 800271a:	4603      	mov	r3, r0
 800271c:	461a      	mov	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	91a2b3c5 	.word	0x91a2b3c5
 8002730:	88888889 	.word	0x88888889
 8002734:	aaaaaaab 	.word	0xaaaaaaab
 8002738:	00015180 	.word	0x00015180

0800273c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	2300      	movs	r3, #0
 800274e:	61bb      	str	r3, [r7, #24]
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_RTC_SetDate+0x24>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e097      	b.n	8002894 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	7c1b      	ldrb	r3, [r3, #16]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_RTC_SetDate+0x34>
 800276c:	2302      	movs	r3, #2
 800276e:	e091      	b.n	8002894 <HAL_RTC_SetDate+0x158>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2202      	movs	r2, #2
 800277a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	78da      	ldrb	r2, [r3, #3]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	785a      	ldrb	r2, [r3, #1]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	789a      	ldrb	r2, [r3, #2]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	739a      	strb	r2, [r3, #14]
 800279a:	e01a      	b.n	80027d2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	78db      	ldrb	r3, [r3, #3]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fbf8 	bl	8002f96 <RTC_Bcd2ToByte>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	785b      	ldrb	r3, [r3, #1]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fbef 	bl	8002f96 <RTC_Bcd2ToByte>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	789b      	ldrb	r3, [r3, #2]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fbe6 	bl	8002f96 <RTC_Bcd2ToByte>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461a      	mov	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	7bdb      	ldrb	r3, [r3, #15]
 80027d6:	4618      	mov	r0, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	7b59      	ldrb	r1, [r3, #13]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	7b9b      	ldrb	r3, [r3, #14]
 80027e0:	461a      	mov	r2, r3
 80027e2:	f000 fcd1 	bl	8003188 <RTC_WeekDayNum>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	7b1a      	ldrb	r2, [r3, #12]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fac9 	bl	8002d8e <RTC_ReadTimeCounter>
 80027fc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	4a26      	ldr	r2, [pc, #152]	; (800289c <HAL_RTC_SetDate+0x160>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0adb      	lsrs	r3, r3, #11
 8002808:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b18      	cmp	r3, #24
 800280e:	d93a      	bls.n	8002886 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	4a23      	ldr	r2, [pc, #140]	; (80028a0 <HAL_RTC_SetDate+0x164>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	4a22      	ldr	r2, [pc, #136]	; (80028a4 <HAL_RTC_SetDate+0x168>)
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002826:	69f9      	ldr	r1, [r7, #28]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fae0 	bl	8002dee <RTC_WriteTimeCounter>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2204      	movs	r2, #4
 8002838:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e027      	b.n	8002894 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 faf9 	bl	8002e3c <RTC_ReadAlarmCounter>
 800284a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002852:	d018      	beq.n	8002886 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	429a      	cmp	r2, r3
 800285a:	d214      	bcs.n	8002886 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002862:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002866:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002868:	69b9      	ldr	r1, [r7, #24]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 faff 	bl	8002e6e <RTC_WriteAlarmCounter>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2204      	movs	r2, #4
 800287a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e006      	b.n	8002894 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3720      	adds	r7, #32
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	91a2b3c5 	.word	0x91a2b3c5
 80028a0:	aaaaaaab 	.word	0xaaaaaaab
 80028a4:	00015180 	.word	0x00015180

080028a8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	2100      	movs	r1, #0
 80028ba:	460a      	mov	r2, r1
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	460a      	mov	r2, r1
 80028c0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_RTC_GetDate+0x26>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e03a      	b.n	8002948 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	2200      	movs	r2, #0
 80028d8:	4619      	mov	r1, r3
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff fe56 	bl	800258c <HAL_RTC_GetTime>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e02e      	b.n	8002948 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	7b1a      	ldrb	r2, [r3, #12]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	7bda      	ldrb	r2, [r3, #15]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	7b5a      	ldrb	r2, [r3, #13]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	7b9a      	ldrb	r2, [r3, #14]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01a      	beq.n	8002946 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	78db      	ldrb	r3, [r3, #3]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fb21 	bl	8002f5c <RTC_ByteToBcd2>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fb18 	bl	8002f5c <RTC_ByteToBcd2>
 800292c:	4603      	mov	r3, r0
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	789b      	ldrb	r3, [r3, #2]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fb0f 	bl	8002f5c <RTC_ByteToBcd2>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2100      	movs	r1, #0
 8002966:	460a      	mov	r2, r1
 8002968:	801a      	strh	r2, [r3, #0]
 800296a:	460a      	mov	r2, r1
 800296c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_RTC_SetAlarm+0x2a>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e07d      	b.n	8002a7a <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	7c1b      	ldrb	r3, [r3, #16]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_RTC_SetAlarm+0x3a>
 8002986:	2302      	movs	r3, #2
 8002988:	e077      	b.n	8002a7a <HAL_RTC_SetAlarm+0x12a>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2202      	movs	r2, #2
 8002994:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	2200      	movs	r2, #0
 800299c:	4619      	mov	r1, r3
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fdf4 	bl	800258c <HAL_RTC_GetTime>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e065      	b.n	8002a7a <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80029ae:	7d3b      	ldrb	r3, [r7, #20]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80029b6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80029ba:	7d7b      	ldrb	r3, [r7, #21]
 80029bc:	4619      	mov	r1, r3
 80029be:	460b      	mov	r3, r1
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	1a5b      	subs	r3, r3, r1
 80029c4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80029c6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80029c8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80029ca:	4413      	add	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d113      	bne.n	80029fc <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80029de:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	785b      	ldrb	r3, [r3, #1]
 80029e6:	4619      	mov	r1, r3
 80029e8:	460b      	mov	r3, r1
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a5b      	subs	r3, r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80029f0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80029f6:	4413      	add	r3, r2
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e01e      	b.n	8002a3a <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fac8 	bl	8002f96 <RTC_Bcd2ToByte>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a0e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	785b      	ldrb	r3, [r3, #1]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fabd 	bl	8002f96 <RTC_Bcd2ToByte>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002a28:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	789b      	ldrb	r3, [r3, #2]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fab1 	bl	8002f96 <RTC_Bcd2ToByte>
 8002a34:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002a36:	4423      	add	r3, r4
 8002a38:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d205      	bcs.n	8002a4e <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002a48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a4c:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002a4e:	69f9      	ldr	r1, [r7, #28]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fa0c 	bl	8002e6e <RTC_WriteAlarmCounter>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e006      	b.n	8002a7a <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002a78:	2300      	movs	r3, #0
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd90      	pop	{r4, r7, pc}
	...

08002a84 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2100      	movs	r1, #0
 8002a9a:	460a      	mov	r2, r1
 8002a9c:	801a      	strh	r2, [r3, #0]
 8002a9e:	460a      	mov	r2, r1
 8002aa0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_RTC_SetAlarm_IT+0x2a>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e099      	b.n	8002be6 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	7c1b      	ldrb	r3, [r3, #16]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_RTC_SetAlarm_IT+0x3a>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e093      	b.n	8002be6 <HAL_RTC_SetAlarm_IT+0x162>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	2200      	movs	r2, #0
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff fd5a 	bl	800258c <HAL_RTC_GetTime>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e081      	b.n	8002be6 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002ae2:	7d3b      	ldrb	r3, [r7, #20]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002aea:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002aee:	7d7b      	ldrb	r3, [r7, #21]
 8002af0:	4619      	mov	r1, r3
 8002af2:	460b      	mov	r3, r1
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a5b      	subs	r3, r3, r1
 8002af8:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002afa:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002afc:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002afe:	4413      	add	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d113      	bne.n	8002b30 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002b12:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a5b      	subs	r3, r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002b24:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002b2a:	4413      	add	r3, r2
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e01e      	b.n	8002b6e <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fa2e 	bl	8002f96 <RTC_Bcd2ToByte>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002b42:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fa23 	bl	8002f96 <RTC_Bcd2ToByte>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	4613      	mov	r3, r2
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002b5c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	789b      	ldrb	r3, [r3, #2]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fa17 	bl	8002f96 <RTC_Bcd2ToByte>
 8002b68:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002b6a:	4423      	add	r3, r4
 8002b6c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d205      	bcs.n	8002b82 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002b7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b80:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002b82:	69f9      	ldr	r1, [r7, #28]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f972 	bl	8002e6e <RTC_WriteAlarmCounter>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2204      	movs	r2, #4
 8002b94:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e022      	b.n	8002be6 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0202 	bic.w	r2, r2, #2
 8002bae:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0202 	orr.w	r2, r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bca:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd6:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	; 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  uint32_t counter_alarm = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Alarm);

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_RTC_GetAlarm+0x1e>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RTC_GetAlarm+0x22>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e05a      	b.n	8002ccc <HAL_RTC_GetAlarm+0xd8>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  /* Read Alarm counter in RTC registers */
  counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f910 	bl	8002e3c <RTC_ReadAlarmCounter>
 8002c1c:	6178      	str	r0, [r7, #20]

  /* Fill the structure with the read parameters */
  /* Set hours in a day range (between 0 to 24)*/
  sAlarm->AlarmTime.Hours   = (uint32_t)((counter_alarm / 3600U) % 24U);
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <HAL_RTC_GetAlarm+0xe0>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0ad9      	lsrs	r1, r3, #11
 8002c28:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RTC_GetAlarm+0xe4>)
 8002c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c2e:	091a      	lsrs	r2, r3, #4
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	1aca      	subs	r2, r1, r3
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_RTC_GetAlarm+0xe0>)
 8002c44:	fba3 1302 	umull	r1, r3, r3, r2
 8002c48:	0adb      	lsrs	r3, r3, #11
 8002c4a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	4a21      	ldr	r2, [pc, #132]	; (8002cdc <HAL_RTC_GetAlarm+0xe8>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <HAL_RTC_GetAlarm+0xe0>)
 8002c66:	fba2 1203 	umull	r1, r2, r2, r3
 8002c6a:	0ad2      	lsrs	r2, r2, #11
 8002c6c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002c70:	fb01 f202 	mul.w	r2, r1, r2
 8002c74:	1a9a      	subs	r2, r3, r2
 8002c76:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <HAL_RTC_GetAlarm+0xe8>)
 8002c78:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7c:	0959      	lsrs	r1, r3, #5
 8002c7e:	460b      	mov	r3, r1
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a5b      	subs	r3, r3, r1
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	1ad1      	subs	r1, r2, r3
 8002c88:	b2ca      	uxtb	r2, r1
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	709a      	strb	r2, [r3, #2]

  if (Format != RTC_FORMAT_BIN)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01a      	beq.n	8002cca <HAL_RTC_GetAlarm+0xd6>
  {
    sAlarm->AlarmTime.Hours   = RTC_ByteToBcd2(sAlarm->AlarmTime.Hours);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 f95f 	bl	8002f5c <RTC_ByteToBcd2>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	785b      	ldrb	r3, [r3, #1]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f956 	bl	8002f5c <RTC_ByteToBcd2>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	789b      	ldrb	r3, [r3, #2]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f94d 	bl	8002f5c <RTC_ByteToBcd2>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	91a2b3c5 	.word	0x91a2b3c5
 8002cd8:	aaaaaaab 	.word	0xaaaaaaab
 8002cdc:	88888889 	.word	0x88888889

08002ce0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d011      	beq.n	8002d1a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7fd fddd 	bl	80008c4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0202 	bic.w	r2, r2, #2
 8002d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002d1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d20:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	745a      	strb	r2, [r3, #17]
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40010400 	.word	0x40010400

08002d34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e01d      	b.n	8002d86 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0208 	bic.w	r2, r2, #8
 8002d58:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002d5a:	f7fe fa25 	bl	80011a8 <HAL_GetTick>
 8002d5e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002d60:	e009      	b.n	8002d76 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d62:	f7fe fa21 	bl	80011a8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d70:	d901      	bls.n	8002d76 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e007      	b.n	8002d86 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ee      	beq.n	8002d62 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	827b      	strh	r3, [r7, #18]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	823b      	strh	r3, [r7, #16]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002dbe:	8a7a      	ldrh	r2, [r7, #18]
 8002dc0:	8a3b      	ldrh	r3, [r7, #16]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d008      	beq.n	8002dd8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002dc6:	8a3b      	ldrh	r3, [r7, #16]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e004      	b.n	8002de2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002dd8:	8a7b      	ldrh	r3, [r7, #18]
 8002dda:	041a      	lsls	r2, r3, #16
 8002ddc:	89fb      	ldrh	r3, [r7, #14]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002de2:	697b      	ldr	r3, [r7, #20]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f85d 	bl	8002ebc <RTC_EnterInitMode>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	e011      	b.n	8002e32 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	0c12      	lsrs	r2, r2, #16
 8002e16:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f872 	bl	8002f0c <RTC_ExitInitMode>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	81fb      	strh	r3, [r7, #14]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002e5c:	89fb      	ldrh	r3, [r7, #14]
 8002e5e:	041a      	lsls	r2, r3, #16
 8002e60:	89bb      	ldrh	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f81d 	bl	8002ebc <RTC_EnterInitMode>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e011      	b.n	8002eb2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	0c12      	lsrs	r2, r2, #16
 8002e96:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f832 	bl	8002f0c <RTC_ExitInitMode>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002ec8:	f7fe f96e 	bl	80011a8 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ece:	e009      	b.n	8002ee4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ed0:	f7fe f96a 	bl	80011a8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ede:	d901      	bls.n	8002ee4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e00f      	b.n	8002f04 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0ee      	beq.n	8002ed0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0210 	orr.w	r2, r2, #16
 8002f00:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0210 	bic.w	r2, r2, #16
 8002f26:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002f28:	f7fe f93e 	bl	80011a8 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f2e:	e009      	b.n	8002f44 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002f30:	f7fe f93a 	bl	80011a8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f3e:	d901      	bls.n	8002f44 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e007      	b.n	8002f54 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0ee      	beq.n	8002f30 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002f6a:	e005      	b.n	8002f78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	3b0a      	subs	r3, #10
 8002f76:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	2b09      	cmp	r3, #9
 8002f7c:	d8f6      	bhi.n	8002f6c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	b2db      	uxtb	r3, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	b2db      	uxtb	r3, r3
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7bdb      	ldrb	r3, [r3, #15]
 8002fee:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7b5b      	ldrb	r3, [r3, #13]
 8002ff4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7b9b      	ldrb	r3, [r3, #14]
 8002ffa:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	e06f      	b.n	80030e2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d011      	beq.n	800302c <RTC_DateUpdate+0x5c>
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d00e      	beq.n	800302c <RTC_DateUpdate+0x5c>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b05      	cmp	r3, #5
 8003012:	d00b      	beq.n	800302c <RTC_DateUpdate+0x5c>
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b07      	cmp	r3, #7
 8003018:	d008      	beq.n	800302c <RTC_DateUpdate+0x5c>
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d005      	beq.n	800302c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b0a      	cmp	r3, #10
 8003024:	d002      	beq.n	800302c <RTC_DateUpdate+0x5c>
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d117      	bne.n	800305c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b1e      	cmp	r3, #30
 8003030:	d803      	bhi.n	800303a <RTC_DateUpdate+0x6a>
      {
        day++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3301      	adds	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003038:	e050      	b.n	80030dc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d005      	beq.n	800304c <RTC_DateUpdate+0x7c>
        {
          month++;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	3301      	adds	r3, #1
 8003044:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003046:	2301      	movs	r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800304a:	e047      	b.n	80030dc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800304c:	2301      	movs	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003050:	2301      	movs	r3, #1
 8003052:	60fb      	str	r3, [r7, #12]
          year++;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800305a:	e03f      	b.n	80030dc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d008      	beq.n	8003074 <RTC_DateUpdate+0xa4>
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b06      	cmp	r3, #6
 8003066:	d005      	beq.n	8003074 <RTC_DateUpdate+0xa4>
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b09      	cmp	r3, #9
 800306c:	d002      	beq.n	8003074 <RTC_DateUpdate+0xa4>
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b0b      	cmp	r3, #11
 8003072:	d10c      	bne.n	800308e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b1d      	cmp	r3, #29
 8003078:	d803      	bhi.n	8003082 <RTC_DateUpdate+0xb2>
      {
        day++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3301      	adds	r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003080:	e02c      	b.n	80030dc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	3301      	adds	r3, #1
 8003086:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003088:	2301      	movs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800308c:	e026      	b.n	80030dc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d123      	bne.n	80030dc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b1b      	cmp	r3, #27
 8003098:	d803      	bhi.n	80030a2 <RTC_DateUpdate+0xd2>
      {
        day++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3301      	adds	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e01c      	b.n	80030dc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b1c      	cmp	r3, #28
 80030a6:	d111      	bne.n	80030cc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f839 	bl	8003124 <RTC_IsLeapYear>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <RTC_DateUpdate+0xf0>
        {
          day++;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	e00d      	b.n	80030dc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	3301      	adds	r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80030c6:	2301      	movs	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e007      	b.n	80030dc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b1d      	cmp	r3, #29
 80030d0:	d104      	bne.n	80030dc <RTC_DateUpdate+0x10c>
      {
        month++;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	3301      	adds	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80030d8:	2301      	movs	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	3301      	adds	r3, #1
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d38b      	bcc.n	8003002 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	4619      	mov	r1, r3
 800310c:	6978      	ldr	r0, [r7, #20]
 800310e:	f000 f83b 	bl	8003188 <RTC_WeekDayNum>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	731a      	strb	r2, [r3, #12]
}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	e01d      	b.n	800317a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	4a10      	ldr	r2, [pc, #64]	; (8003184 <RTC_IsLeapYear+0x60>)
 8003142:	fba2 1203 	umull	r1, r2, r2, r3
 8003146:	0952      	lsrs	r2, r2, #5
 8003148:	2164      	movs	r1, #100	; 0x64
 800314a:	fb01 f202 	mul.w	r2, r1, r2
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	4a09      	ldr	r2, [pc, #36]	; (8003184 <RTC_IsLeapYear+0x60>)
 800315e:	fba2 1203 	umull	r1, r2, r2, r3
 8003162:	09d2      	lsrs	r2, r2, #7
 8003164:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003168:	fb01 f202 	mul.w	r2, r1, r2
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003178:	2300      	movs	r3, #0
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	51eb851f 	.word	0x51eb851f

08003188 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
 8003194:	4613      	mov	r3, r2
 8003196:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80031a6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d82d      	bhi.n	800320a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	4a2c      	ldr	r2, [pc, #176]	; (800326c <RTC_WeekDayNum+0xe4>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	085a      	lsrs	r2, r3, #1
 80031c2:	78bb      	ldrb	r3, [r7, #2]
 80031c4:	441a      	add	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	441a      	add	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	441a      	add	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	4926      	ldr	r1, [pc, #152]	; (8003270 <RTC_WeekDayNum+0xe8>)
 80031d8:	fba1 1303 	umull	r1, r3, r1, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	1ad2      	subs	r2, r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	4922      	ldr	r1, [pc, #136]	; (8003270 <RTC_WeekDayNum+0xe8>)
 80031e6:	fba1 1303 	umull	r1, r3, r1, r3
 80031ea:	09db      	lsrs	r3, r3, #7
 80031ec:	4413      	add	r3, r2
 80031ee:	1d1a      	adds	r2, r3, #4
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <RTC_WeekDayNum+0xec>)
 80031f2:	fba3 1302 	umull	r1, r3, r3, r2
 80031f6:	1ad1      	subs	r1, r2, r3
 80031f8:	0849      	lsrs	r1, r1, #1
 80031fa:	440b      	add	r3, r1
 80031fc:	0899      	lsrs	r1, r3, #2
 80031fe:	460b      	mov	r3, r1
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	1a5b      	subs	r3, r3, r1
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e029      	b.n	800325e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	4a15      	ldr	r2, [pc, #84]	; (800326c <RTC_WeekDayNum+0xe4>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	085a      	lsrs	r2, r3, #1
 800321e:	78bb      	ldrb	r3, [r7, #2]
 8003220:	441a      	add	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	441a      	add	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	441a      	add	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4910      	ldr	r1, [pc, #64]	; (8003270 <RTC_WeekDayNum+0xe8>)
 8003230:	fba1 1303 	umull	r1, r3, r1, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	1ad2      	subs	r2, r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	490d      	ldr	r1, [pc, #52]	; (8003270 <RTC_WeekDayNum+0xe8>)
 800323c:	fba1 1303 	umull	r1, r3, r1, r3
 8003240:	09db      	lsrs	r3, r3, #7
 8003242:	4413      	add	r3, r2
 8003244:	1c9a      	adds	r2, r3, #2
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <RTC_WeekDayNum+0xec>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	1ad1      	subs	r1, r2, r3
 800324e:	0849      	lsrs	r1, r1, #1
 8003250:	440b      	add	r3, r1
 8003252:	0899      	lsrs	r1, r3, #2
 8003254:	460b      	mov	r3, r1
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	1a5b      	subs	r3, r3, r1
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	b2db      	uxtb	r3, r3
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	38e38e39 	.word	0x38e38e39
 8003270:	51eb851f 	.word	0x51eb851f
 8003274:	24924925 	.word	0x24924925

08003278 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RTCEx_BKUPWrite+0x30>)
 800328a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4413      	add	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	b292      	uxth	r2, r2
 800329c:	601a      	str	r2, [r3, #0]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	40006c00 	.word	0x40006c00

080032ac <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d004      	beq.n	80032c8 <HAL_SRAM_Init+0x1c>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c6:	d101      	bne.n	80032cc <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e038      	b.n	800333e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f7fd fe6b 	bl	8000fbc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3308      	adds	r3, #8
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f000 f829 	bl	8003348 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	461a      	mov	r2, r3
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	f000 f88b 	bl	800341c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6858      	ldr	r0, [r3, #4]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	f000 f8b6 	bl	8003484 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	6892      	ldr	r2, [r2, #8]
 8003320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	6892      	ldr	r2, [r2, #8]
 800332c:	f041 0101 	orr.w	r1, r1, #1
 8003330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	f023 0101 	bic.w	r1, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b08      	cmp	r3, #8
 8003370:	d102      	bne.n	8003378 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	e001      	b.n	800337c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003388:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800338e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003394:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800339a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80033a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80033a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80033ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80033b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80033b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <FSMC_NORSRAM_Init+0xd0>)
 80033d8:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033e0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80033e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	ea02 0103 	and.w	r1, r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4319      	orrs	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	0008fb7f 	.word	0x0008fb7f

0800341c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003432:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	431a      	orrs	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	431a      	orrs	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	041b      	lsls	r3, r3, #16
 8003450:	431a      	orrs	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	3b01      	subs	r3, #1
 8003458:	051b      	lsls	r3, r3, #20
 800345a:	431a      	orrs	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	3b02      	subs	r3, #2
 8003462:	061b      	lsls	r3, r3, #24
 8003464:	431a      	orrs	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	3201      	adds	r2, #1
 8003470:	4319      	orrs	r1, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003498:	d11d      	bne.n	80034d6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034a2:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	6811      	ldr	r1, [r2, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	6852      	ldr	r2, [r2, #4]
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	4311      	orrs	r1, r2
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	0212      	lsls	r2, r2, #8
 80034b8:	4311      	orrs	r1, r2
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	6992      	ldr	r2, [r2, #24]
 80034be:	4311      	orrs	r1, r2
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	68d2      	ldr	r2, [r2, #12]
 80034c4:	0412      	lsls	r2, r2, #16
 80034c6:	430a      	orrs	r2, r1
 80034c8:	ea43 0102 	orr.w	r1, r3, r2
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80034d4:	e005      	b.n	80034e2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80034de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	cff00000 	.word	0xcff00000

080034f4 <__errno>:
 80034f4:	4b01      	ldr	r3, [pc, #4]	; (80034fc <__errno+0x8>)
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	2000000c 	.word	0x2000000c

08003500 <__libc_init_array>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	2600      	movs	r6, #0
 8003504:	4d0c      	ldr	r5, [pc, #48]	; (8003538 <__libc_init_array+0x38>)
 8003506:	4c0d      	ldr	r4, [pc, #52]	; (800353c <__libc_init_array+0x3c>)
 8003508:	1b64      	subs	r4, r4, r5
 800350a:	10a4      	asrs	r4, r4, #2
 800350c:	42a6      	cmp	r6, r4
 800350e:	d109      	bne.n	8003524 <__libc_init_array+0x24>
 8003510:	f000 fc9c 	bl	8003e4c <_init>
 8003514:	2600      	movs	r6, #0
 8003516:	4d0a      	ldr	r5, [pc, #40]	; (8003540 <__libc_init_array+0x40>)
 8003518:	4c0a      	ldr	r4, [pc, #40]	; (8003544 <__libc_init_array+0x44>)
 800351a:	1b64      	subs	r4, r4, r5
 800351c:	10a4      	asrs	r4, r4, #2
 800351e:	42a6      	cmp	r6, r4
 8003520:	d105      	bne.n	800352e <__libc_init_array+0x2e>
 8003522:	bd70      	pop	{r4, r5, r6, pc}
 8003524:	f855 3b04 	ldr.w	r3, [r5], #4
 8003528:	4798      	blx	r3
 800352a:	3601      	adds	r6, #1
 800352c:	e7ee      	b.n	800350c <__libc_init_array+0xc>
 800352e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003532:	4798      	blx	r3
 8003534:	3601      	adds	r6, #1
 8003536:	e7f2      	b.n	800351e <__libc_init_array+0x1e>
 8003538:	0800452c 	.word	0x0800452c
 800353c:	0800452c 	.word	0x0800452c
 8003540:	0800452c 	.word	0x0800452c
 8003544:	08004530 	.word	0x08004530

08003548 <memset>:
 8003548:	4603      	mov	r3, r0
 800354a:	4402      	add	r2, r0
 800354c:	4293      	cmp	r3, r2
 800354e:	d100      	bne.n	8003552 <memset+0xa>
 8003550:	4770      	bx	lr
 8003552:	f803 1b01 	strb.w	r1, [r3], #1
 8003556:	e7f9      	b.n	800354c <memset+0x4>

08003558 <siprintf>:
 8003558:	b40e      	push	{r1, r2, r3}
 800355a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800355e:	b500      	push	{lr}
 8003560:	b09c      	sub	sp, #112	; 0x70
 8003562:	ab1d      	add	r3, sp, #116	; 0x74
 8003564:	9002      	str	r0, [sp, #8]
 8003566:	9006      	str	r0, [sp, #24]
 8003568:	9107      	str	r1, [sp, #28]
 800356a:	9104      	str	r1, [sp, #16]
 800356c:	4808      	ldr	r0, [pc, #32]	; (8003590 <siprintf+0x38>)
 800356e:	4909      	ldr	r1, [pc, #36]	; (8003594 <siprintf+0x3c>)
 8003570:	f853 2b04 	ldr.w	r2, [r3], #4
 8003574:	9105      	str	r1, [sp, #20]
 8003576:	6800      	ldr	r0, [r0, #0]
 8003578:	a902      	add	r1, sp, #8
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	f000 f868 	bl	8003650 <_svfiprintf_r>
 8003580:	2200      	movs	r2, #0
 8003582:	9b02      	ldr	r3, [sp, #8]
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	b01c      	add	sp, #112	; 0x70
 8003588:	f85d eb04 	ldr.w	lr, [sp], #4
 800358c:	b003      	add	sp, #12
 800358e:	4770      	bx	lr
 8003590:	2000000c 	.word	0x2000000c
 8003594:	ffff0208 	.word	0xffff0208

08003598 <__ssputs_r>:
 8003598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800359c:	688e      	ldr	r6, [r1, #8]
 800359e:	4682      	mov	sl, r0
 80035a0:	429e      	cmp	r6, r3
 80035a2:	460c      	mov	r4, r1
 80035a4:	4690      	mov	r8, r2
 80035a6:	461f      	mov	r7, r3
 80035a8:	d838      	bhi.n	800361c <__ssputs_r+0x84>
 80035aa:	898a      	ldrh	r2, [r1, #12]
 80035ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035b0:	d032      	beq.n	8003618 <__ssputs_r+0x80>
 80035b2:	6825      	ldr	r5, [r4, #0]
 80035b4:	6909      	ldr	r1, [r1, #16]
 80035b6:	3301      	adds	r3, #1
 80035b8:	eba5 0901 	sub.w	r9, r5, r1
 80035bc:	6965      	ldr	r5, [r4, #20]
 80035be:	444b      	add	r3, r9
 80035c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035c8:	106d      	asrs	r5, r5, #1
 80035ca:	429d      	cmp	r5, r3
 80035cc:	bf38      	it	cc
 80035ce:	461d      	movcc	r5, r3
 80035d0:	0553      	lsls	r3, r2, #21
 80035d2:	d531      	bpl.n	8003638 <__ssputs_r+0xa0>
 80035d4:	4629      	mov	r1, r5
 80035d6:	f000 fb6f 	bl	8003cb8 <_malloc_r>
 80035da:	4606      	mov	r6, r0
 80035dc:	b950      	cbnz	r0, 80035f4 <__ssputs_r+0x5c>
 80035de:	230c      	movs	r3, #12
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035e4:	f8ca 3000 	str.w	r3, [sl]
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ee:	81a3      	strh	r3, [r4, #12]
 80035f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f4:	464a      	mov	r2, r9
 80035f6:	6921      	ldr	r1, [r4, #16]
 80035f8:	f000 face 	bl	8003b98 <memcpy>
 80035fc:	89a3      	ldrh	r3, [r4, #12]
 80035fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003606:	81a3      	strh	r3, [r4, #12]
 8003608:	6126      	str	r6, [r4, #16]
 800360a:	444e      	add	r6, r9
 800360c:	6026      	str	r6, [r4, #0]
 800360e:	463e      	mov	r6, r7
 8003610:	6165      	str	r5, [r4, #20]
 8003612:	eba5 0509 	sub.w	r5, r5, r9
 8003616:	60a5      	str	r5, [r4, #8]
 8003618:	42be      	cmp	r6, r7
 800361a:	d900      	bls.n	800361e <__ssputs_r+0x86>
 800361c:	463e      	mov	r6, r7
 800361e:	4632      	mov	r2, r6
 8003620:	4641      	mov	r1, r8
 8003622:	6820      	ldr	r0, [r4, #0]
 8003624:	f000 fac6 	bl	8003bb4 <memmove>
 8003628:	68a3      	ldr	r3, [r4, #8]
 800362a:	2000      	movs	r0, #0
 800362c:	1b9b      	subs	r3, r3, r6
 800362e:	60a3      	str	r3, [r4, #8]
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	4433      	add	r3, r6
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	e7db      	b.n	80035f0 <__ssputs_r+0x58>
 8003638:	462a      	mov	r2, r5
 800363a:	f000 fbb1 	bl	8003da0 <_realloc_r>
 800363e:	4606      	mov	r6, r0
 8003640:	2800      	cmp	r0, #0
 8003642:	d1e1      	bne.n	8003608 <__ssputs_r+0x70>
 8003644:	4650      	mov	r0, sl
 8003646:	6921      	ldr	r1, [r4, #16]
 8003648:	f000 face 	bl	8003be8 <_free_r>
 800364c:	e7c7      	b.n	80035de <__ssputs_r+0x46>
	...

08003650 <_svfiprintf_r>:
 8003650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003654:	4698      	mov	r8, r3
 8003656:	898b      	ldrh	r3, [r1, #12]
 8003658:	4607      	mov	r7, r0
 800365a:	061b      	lsls	r3, r3, #24
 800365c:	460d      	mov	r5, r1
 800365e:	4614      	mov	r4, r2
 8003660:	b09d      	sub	sp, #116	; 0x74
 8003662:	d50e      	bpl.n	8003682 <_svfiprintf_r+0x32>
 8003664:	690b      	ldr	r3, [r1, #16]
 8003666:	b963      	cbnz	r3, 8003682 <_svfiprintf_r+0x32>
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	f000 fb25 	bl	8003cb8 <_malloc_r>
 800366e:	6028      	str	r0, [r5, #0]
 8003670:	6128      	str	r0, [r5, #16]
 8003672:	b920      	cbnz	r0, 800367e <_svfiprintf_r+0x2e>
 8003674:	230c      	movs	r3, #12
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800367c:	e0d1      	b.n	8003822 <_svfiprintf_r+0x1d2>
 800367e:	2340      	movs	r3, #64	; 0x40
 8003680:	616b      	str	r3, [r5, #20]
 8003682:	2300      	movs	r3, #0
 8003684:	9309      	str	r3, [sp, #36]	; 0x24
 8003686:	2320      	movs	r3, #32
 8003688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800368c:	2330      	movs	r3, #48	; 0x30
 800368e:	f04f 0901 	mov.w	r9, #1
 8003692:	f8cd 800c 	str.w	r8, [sp, #12]
 8003696:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800383c <_svfiprintf_r+0x1ec>
 800369a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800369e:	4623      	mov	r3, r4
 80036a0:	469a      	mov	sl, r3
 80036a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036a6:	b10a      	cbz	r2, 80036ac <_svfiprintf_r+0x5c>
 80036a8:	2a25      	cmp	r2, #37	; 0x25
 80036aa:	d1f9      	bne.n	80036a0 <_svfiprintf_r+0x50>
 80036ac:	ebba 0b04 	subs.w	fp, sl, r4
 80036b0:	d00b      	beq.n	80036ca <_svfiprintf_r+0x7a>
 80036b2:	465b      	mov	r3, fp
 80036b4:	4622      	mov	r2, r4
 80036b6:	4629      	mov	r1, r5
 80036b8:	4638      	mov	r0, r7
 80036ba:	f7ff ff6d 	bl	8003598 <__ssputs_r>
 80036be:	3001      	adds	r0, #1
 80036c0:	f000 80aa 	beq.w	8003818 <_svfiprintf_r+0x1c8>
 80036c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036c6:	445a      	add	r2, fp
 80036c8:	9209      	str	r2, [sp, #36]	; 0x24
 80036ca:	f89a 3000 	ldrb.w	r3, [sl]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80a2 	beq.w	8003818 <_svfiprintf_r+0x1c8>
 80036d4:	2300      	movs	r3, #0
 80036d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036de:	f10a 0a01 	add.w	sl, sl, #1
 80036e2:	9304      	str	r3, [sp, #16]
 80036e4:	9307      	str	r3, [sp, #28]
 80036e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036ea:	931a      	str	r3, [sp, #104]	; 0x68
 80036ec:	4654      	mov	r4, sl
 80036ee:	2205      	movs	r2, #5
 80036f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f4:	4851      	ldr	r0, [pc, #324]	; (800383c <_svfiprintf_r+0x1ec>)
 80036f6:	f000 fa41 	bl	8003b7c <memchr>
 80036fa:	9a04      	ldr	r2, [sp, #16]
 80036fc:	b9d8      	cbnz	r0, 8003736 <_svfiprintf_r+0xe6>
 80036fe:	06d0      	lsls	r0, r2, #27
 8003700:	bf44      	itt	mi
 8003702:	2320      	movmi	r3, #32
 8003704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003708:	0711      	lsls	r1, r2, #28
 800370a:	bf44      	itt	mi
 800370c:	232b      	movmi	r3, #43	; 0x2b
 800370e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003712:	f89a 3000 	ldrb.w	r3, [sl]
 8003716:	2b2a      	cmp	r3, #42	; 0x2a
 8003718:	d015      	beq.n	8003746 <_svfiprintf_r+0xf6>
 800371a:	4654      	mov	r4, sl
 800371c:	2000      	movs	r0, #0
 800371e:	f04f 0c0a 	mov.w	ip, #10
 8003722:	9a07      	ldr	r2, [sp, #28]
 8003724:	4621      	mov	r1, r4
 8003726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800372a:	3b30      	subs	r3, #48	; 0x30
 800372c:	2b09      	cmp	r3, #9
 800372e:	d94e      	bls.n	80037ce <_svfiprintf_r+0x17e>
 8003730:	b1b0      	cbz	r0, 8003760 <_svfiprintf_r+0x110>
 8003732:	9207      	str	r2, [sp, #28]
 8003734:	e014      	b.n	8003760 <_svfiprintf_r+0x110>
 8003736:	eba0 0308 	sub.w	r3, r0, r8
 800373a:	fa09 f303 	lsl.w	r3, r9, r3
 800373e:	4313      	orrs	r3, r2
 8003740:	46a2      	mov	sl, r4
 8003742:	9304      	str	r3, [sp, #16]
 8003744:	e7d2      	b.n	80036ec <_svfiprintf_r+0x9c>
 8003746:	9b03      	ldr	r3, [sp, #12]
 8003748:	1d19      	adds	r1, r3, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	9103      	str	r1, [sp, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	bfbb      	ittet	lt
 8003752:	425b      	neglt	r3, r3
 8003754:	f042 0202 	orrlt.w	r2, r2, #2
 8003758:	9307      	strge	r3, [sp, #28]
 800375a:	9307      	strlt	r3, [sp, #28]
 800375c:	bfb8      	it	lt
 800375e:	9204      	strlt	r2, [sp, #16]
 8003760:	7823      	ldrb	r3, [r4, #0]
 8003762:	2b2e      	cmp	r3, #46	; 0x2e
 8003764:	d10c      	bne.n	8003780 <_svfiprintf_r+0x130>
 8003766:	7863      	ldrb	r3, [r4, #1]
 8003768:	2b2a      	cmp	r3, #42	; 0x2a
 800376a:	d135      	bne.n	80037d8 <_svfiprintf_r+0x188>
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	3402      	adds	r4, #2
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	9203      	str	r2, [sp, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	bfb8      	it	lt
 800377a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800377e:	9305      	str	r3, [sp, #20]
 8003780:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003840 <_svfiprintf_r+0x1f0>
 8003784:	2203      	movs	r2, #3
 8003786:	4650      	mov	r0, sl
 8003788:	7821      	ldrb	r1, [r4, #0]
 800378a:	f000 f9f7 	bl	8003b7c <memchr>
 800378e:	b140      	cbz	r0, 80037a2 <_svfiprintf_r+0x152>
 8003790:	2340      	movs	r3, #64	; 0x40
 8003792:	eba0 000a 	sub.w	r0, r0, sl
 8003796:	fa03 f000 	lsl.w	r0, r3, r0
 800379a:	9b04      	ldr	r3, [sp, #16]
 800379c:	3401      	adds	r4, #1
 800379e:	4303      	orrs	r3, r0
 80037a0:	9304      	str	r3, [sp, #16]
 80037a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a6:	2206      	movs	r2, #6
 80037a8:	4826      	ldr	r0, [pc, #152]	; (8003844 <_svfiprintf_r+0x1f4>)
 80037aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037ae:	f000 f9e5 	bl	8003b7c <memchr>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d038      	beq.n	8003828 <_svfiprintf_r+0x1d8>
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <_svfiprintf_r+0x1f8>)
 80037b8:	bb1b      	cbnz	r3, 8003802 <_svfiprintf_r+0x1b2>
 80037ba:	9b03      	ldr	r3, [sp, #12]
 80037bc:	3307      	adds	r3, #7
 80037be:	f023 0307 	bic.w	r3, r3, #7
 80037c2:	3308      	adds	r3, #8
 80037c4:	9303      	str	r3, [sp, #12]
 80037c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c8:	4433      	add	r3, r6
 80037ca:	9309      	str	r3, [sp, #36]	; 0x24
 80037cc:	e767      	b.n	800369e <_svfiprintf_r+0x4e>
 80037ce:	460c      	mov	r4, r1
 80037d0:	2001      	movs	r0, #1
 80037d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037d6:	e7a5      	b.n	8003724 <_svfiprintf_r+0xd4>
 80037d8:	2300      	movs	r3, #0
 80037da:	f04f 0c0a 	mov.w	ip, #10
 80037de:	4619      	mov	r1, r3
 80037e0:	3401      	adds	r4, #1
 80037e2:	9305      	str	r3, [sp, #20]
 80037e4:	4620      	mov	r0, r4
 80037e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ea:	3a30      	subs	r2, #48	; 0x30
 80037ec:	2a09      	cmp	r2, #9
 80037ee:	d903      	bls.n	80037f8 <_svfiprintf_r+0x1a8>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0c5      	beq.n	8003780 <_svfiprintf_r+0x130>
 80037f4:	9105      	str	r1, [sp, #20]
 80037f6:	e7c3      	b.n	8003780 <_svfiprintf_r+0x130>
 80037f8:	4604      	mov	r4, r0
 80037fa:	2301      	movs	r3, #1
 80037fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003800:	e7f0      	b.n	80037e4 <_svfiprintf_r+0x194>
 8003802:	ab03      	add	r3, sp, #12
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	462a      	mov	r2, r5
 8003808:	4638      	mov	r0, r7
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <_svfiprintf_r+0x1fc>)
 800380c:	a904      	add	r1, sp, #16
 800380e:	f3af 8000 	nop.w
 8003812:	1c42      	adds	r2, r0, #1
 8003814:	4606      	mov	r6, r0
 8003816:	d1d6      	bne.n	80037c6 <_svfiprintf_r+0x176>
 8003818:	89ab      	ldrh	r3, [r5, #12]
 800381a:	065b      	lsls	r3, r3, #25
 800381c:	f53f af2c 	bmi.w	8003678 <_svfiprintf_r+0x28>
 8003820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003822:	b01d      	add	sp, #116	; 0x74
 8003824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003828:	ab03      	add	r3, sp, #12
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	462a      	mov	r2, r5
 800382e:	4638      	mov	r0, r7
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <_svfiprintf_r+0x1fc>)
 8003832:	a904      	add	r1, sp, #16
 8003834:	f000 f87c 	bl	8003930 <_printf_i>
 8003838:	e7eb      	b.n	8003812 <_svfiprintf_r+0x1c2>
 800383a:	bf00      	nop
 800383c:	080044f8 	.word	0x080044f8
 8003840:	080044fe 	.word	0x080044fe
 8003844:	08004502 	.word	0x08004502
 8003848:	00000000 	.word	0x00000000
 800384c:	08003599 	.word	0x08003599

08003850 <_printf_common>:
 8003850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003854:	4616      	mov	r6, r2
 8003856:	4699      	mov	r9, r3
 8003858:	688a      	ldr	r2, [r1, #8]
 800385a:	690b      	ldr	r3, [r1, #16]
 800385c:	4607      	mov	r7, r0
 800385e:	4293      	cmp	r3, r2
 8003860:	bfb8      	it	lt
 8003862:	4613      	movlt	r3, r2
 8003864:	6033      	str	r3, [r6, #0]
 8003866:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800386a:	460c      	mov	r4, r1
 800386c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003870:	b10a      	cbz	r2, 8003876 <_printf_common+0x26>
 8003872:	3301      	adds	r3, #1
 8003874:	6033      	str	r3, [r6, #0]
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	0699      	lsls	r1, r3, #26
 800387a:	bf42      	ittt	mi
 800387c:	6833      	ldrmi	r3, [r6, #0]
 800387e:	3302      	addmi	r3, #2
 8003880:	6033      	strmi	r3, [r6, #0]
 8003882:	6825      	ldr	r5, [r4, #0]
 8003884:	f015 0506 	ands.w	r5, r5, #6
 8003888:	d106      	bne.n	8003898 <_printf_common+0x48>
 800388a:	f104 0a19 	add.w	sl, r4, #25
 800388e:	68e3      	ldr	r3, [r4, #12]
 8003890:	6832      	ldr	r2, [r6, #0]
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	42ab      	cmp	r3, r5
 8003896:	dc28      	bgt.n	80038ea <_printf_common+0x9a>
 8003898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800389c:	1e13      	subs	r3, r2, #0
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	bf18      	it	ne
 80038a2:	2301      	movne	r3, #1
 80038a4:	0692      	lsls	r2, r2, #26
 80038a6:	d42d      	bmi.n	8003904 <_printf_common+0xb4>
 80038a8:	4649      	mov	r1, r9
 80038aa:	4638      	mov	r0, r7
 80038ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038b0:	47c0      	blx	r8
 80038b2:	3001      	adds	r0, #1
 80038b4:	d020      	beq.n	80038f8 <_printf_common+0xa8>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	68e5      	ldr	r5, [r4, #12]
 80038ba:	f003 0306 	and.w	r3, r3, #6
 80038be:	2b04      	cmp	r3, #4
 80038c0:	bf18      	it	ne
 80038c2:	2500      	movne	r5, #0
 80038c4:	6832      	ldr	r2, [r6, #0]
 80038c6:	f04f 0600 	mov.w	r6, #0
 80038ca:	68a3      	ldr	r3, [r4, #8]
 80038cc:	bf08      	it	eq
 80038ce:	1aad      	subeq	r5, r5, r2
 80038d0:	6922      	ldr	r2, [r4, #16]
 80038d2:	bf08      	it	eq
 80038d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038d8:	4293      	cmp	r3, r2
 80038da:	bfc4      	itt	gt
 80038dc:	1a9b      	subgt	r3, r3, r2
 80038de:	18ed      	addgt	r5, r5, r3
 80038e0:	341a      	adds	r4, #26
 80038e2:	42b5      	cmp	r5, r6
 80038e4:	d11a      	bne.n	800391c <_printf_common+0xcc>
 80038e6:	2000      	movs	r0, #0
 80038e8:	e008      	b.n	80038fc <_printf_common+0xac>
 80038ea:	2301      	movs	r3, #1
 80038ec:	4652      	mov	r2, sl
 80038ee:	4649      	mov	r1, r9
 80038f0:	4638      	mov	r0, r7
 80038f2:	47c0      	blx	r8
 80038f4:	3001      	adds	r0, #1
 80038f6:	d103      	bne.n	8003900 <_printf_common+0xb0>
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003900:	3501      	adds	r5, #1
 8003902:	e7c4      	b.n	800388e <_printf_common+0x3e>
 8003904:	2030      	movs	r0, #48	; 0x30
 8003906:	18e1      	adds	r1, r4, r3
 8003908:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003912:	4422      	add	r2, r4
 8003914:	3302      	adds	r3, #2
 8003916:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800391a:	e7c5      	b.n	80038a8 <_printf_common+0x58>
 800391c:	2301      	movs	r3, #1
 800391e:	4622      	mov	r2, r4
 8003920:	4649      	mov	r1, r9
 8003922:	4638      	mov	r0, r7
 8003924:	47c0      	blx	r8
 8003926:	3001      	adds	r0, #1
 8003928:	d0e6      	beq.n	80038f8 <_printf_common+0xa8>
 800392a:	3601      	adds	r6, #1
 800392c:	e7d9      	b.n	80038e2 <_printf_common+0x92>
	...

08003930 <_printf_i>:
 8003930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003934:	7e0f      	ldrb	r7, [r1, #24]
 8003936:	4691      	mov	r9, r2
 8003938:	2f78      	cmp	r7, #120	; 0x78
 800393a:	4680      	mov	r8, r0
 800393c:	460c      	mov	r4, r1
 800393e:	469a      	mov	sl, r3
 8003940:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003946:	d807      	bhi.n	8003958 <_printf_i+0x28>
 8003948:	2f62      	cmp	r7, #98	; 0x62
 800394a:	d80a      	bhi.n	8003962 <_printf_i+0x32>
 800394c:	2f00      	cmp	r7, #0
 800394e:	f000 80d9 	beq.w	8003b04 <_printf_i+0x1d4>
 8003952:	2f58      	cmp	r7, #88	; 0x58
 8003954:	f000 80a4 	beq.w	8003aa0 <_printf_i+0x170>
 8003958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800395c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003960:	e03a      	b.n	80039d8 <_printf_i+0xa8>
 8003962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003966:	2b15      	cmp	r3, #21
 8003968:	d8f6      	bhi.n	8003958 <_printf_i+0x28>
 800396a:	a101      	add	r1, pc, #4	; (adr r1, 8003970 <_printf_i+0x40>)
 800396c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003970:	080039c9 	.word	0x080039c9
 8003974:	080039dd 	.word	0x080039dd
 8003978:	08003959 	.word	0x08003959
 800397c:	08003959 	.word	0x08003959
 8003980:	08003959 	.word	0x08003959
 8003984:	08003959 	.word	0x08003959
 8003988:	080039dd 	.word	0x080039dd
 800398c:	08003959 	.word	0x08003959
 8003990:	08003959 	.word	0x08003959
 8003994:	08003959 	.word	0x08003959
 8003998:	08003959 	.word	0x08003959
 800399c:	08003aeb 	.word	0x08003aeb
 80039a0:	08003a0d 	.word	0x08003a0d
 80039a4:	08003acd 	.word	0x08003acd
 80039a8:	08003959 	.word	0x08003959
 80039ac:	08003959 	.word	0x08003959
 80039b0:	08003b0d 	.word	0x08003b0d
 80039b4:	08003959 	.word	0x08003959
 80039b8:	08003a0d 	.word	0x08003a0d
 80039bc:	08003959 	.word	0x08003959
 80039c0:	08003959 	.word	0x08003959
 80039c4:	08003ad5 	.word	0x08003ad5
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	1d1a      	adds	r2, r3, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	602a      	str	r2, [r5, #0]
 80039d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039d8:	2301      	movs	r3, #1
 80039da:	e0a4      	b.n	8003b26 <_printf_i+0x1f6>
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	6829      	ldr	r1, [r5, #0]
 80039e0:	0606      	lsls	r6, r0, #24
 80039e2:	f101 0304 	add.w	r3, r1, #4
 80039e6:	d50a      	bpl.n	80039fe <_printf_i+0xce>
 80039e8:	680e      	ldr	r6, [r1, #0]
 80039ea:	602b      	str	r3, [r5, #0]
 80039ec:	2e00      	cmp	r6, #0
 80039ee:	da03      	bge.n	80039f8 <_printf_i+0xc8>
 80039f0:	232d      	movs	r3, #45	; 0x2d
 80039f2:	4276      	negs	r6, r6
 80039f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f8:	230a      	movs	r3, #10
 80039fa:	485e      	ldr	r0, [pc, #376]	; (8003b74 <_printf_i+0x244>)
 80039fc:	e019      	b.n	8003a32 <_printf_i+0x102>
 80039fe:	680e      	ldr	r6, [r1, #0]
 8003a00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a04:	602b      	str	r3, [r5, #0]
 8003a06:	bf18      	it	ne
 8003a08:	b236      	sxthne	r6, r6
 8003a0a:	e7ef      	b.n	80039ec <_printf_i+0xbc>
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	6820      	ldr	r0, [r4, #0]
 8003a10:	1d19      	adds	r1, r3, #4
 8003a12:	6029      	str	r1, [r5, #0]
 8003a14:	0601      	lsls	r1, r0, #24
 8003a16:	d501      	bpl.n	8003a1c <_printf_i+0xec>
 8003a18:	681e      	ldr	r6, [r3, #0]
 8003a1a:	e002      	b.n	8003a22 <_printf_i+0xf2>
 8003a1c:	0646      	lsls	r6, r0, #25
 8003a1e:	d5fb      	bpl.n	8003a18 <_printf_i+0xe8>
 8003a20:	881e      	ldrh	r6, [r3, #0]
 8003a22:	2f6f      	cmp	r7, #111	; 0x6f
 8003a24:	bf0c      	ite	eq
 8003a26:	2308      	moveq	r3, #8
 8003a28:	230a      	movne	r3, #10
 8003a2a:	4852      	ldr	r0, [pc, #328]	; (8003b74 <_printf_i+0x244>)
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a32:	6865      	ldr	r5, [r4, #4]
 8003a34:	2d00      	cmp	r5, #0
 8003a36:	bfa8      	it	ge
 8003a38:	6821      	ldrge	r1, [r4, #0]
 8003a3a:	60a5      	str	r5, [r4, #8]
 8003a3c:	bfa4      	itt	ge
 8003a3e:	f021 0104 	bicge.w	r1, r1, #4
 8003a42:	6021      	strge	r1, [r4, #0]
 8003a44:	b90e      	cbnz	r6, 8003a4a <_printf_i+0x11a>
 8003a46:	2d00      	cmp	r5, #0
 8003a48:	d04d      	beq.n	8003ae6 <_printf_i+0x1b6>
 8003a4a:	4615      	mov	r5, r2
 8003a4c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a50:	fb03 6711 	mls	r7, r3, r1, r6
 8003a54:	5dc7      	ldrb	r7, [r0, r7]
 8003a56:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a5a:	4637      	mov	r7, r6
 8003a5c:	42bb      	cmp	r3, r7
 8003a5e:	460e      	mov	r6, r1
 8003a60:	d9f4      	bls.n	8003a4c <_printf_i+0x11c>
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d10b      	bne.n	8003a7e <_printf_i+0x14e>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	07de      	lsls	r6, r3, #31
 8003a6a:	d508      	bpl.n	8003a7e <_printf_i+0x14e>
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	6861      	ldr	r1, [r4, #4]
 8003a70:	4299      	cmp	r1, r3
 8003a72:	bfde      	ittt	le
 8003a74:	2330      	movle	r3, #48	; 0x30
 8003a76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a7a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003a7e:	1b52      	subs	r2, r2, r5
 8003a80:	6122      	str	r2, [r4, #16]
 8003a82:	464b      	mov	r3, r9
 8003a84:	4621      	mov	r1, r4
 8003a86:	4640      	mov	r0, r8
 8003a88:	f8cd a000 	str.w	sl, [sp]
 8003a8c:	aa03      	add	r2, sp, #12
 8003a8e:	f7ff fedf 	bl	8003850 <_printf_common>
 8003a92:	3001      	adds	r0, #1
 8003a94:	d14c      	bne.n	8003b30 <_printf_i+0x200>
 8003a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a9a:	b004      	add	sp, #16
 8003a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa0:	4834      	ldr	r0, [pc, #208]	; (8003b74 <_printf_i+0x244>)
 8003aa2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003aa6:	6829      	ldr	r1, [r5, #0]
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	f851 6b04 	ldr.w	r6, [r1], #4
 8003aae:	6029      	str	r1, [r5, #0]
 8003ab0:	061d      	lsls	r5, r3, #24
 8003ab2:	d514      	bpl.n	8003ade <_printf_i+0x1ae>
 8003ab4:	07df      	lsls	r7, r3, #31
 8003ab6:	bf44      	itt	mi
 8003ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8003abc:	6023      	strmi	r3, [r4, #0]
 8003abe:	b91e      	cbnz	r6, 8003ac8 <_printf_i+0x198>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	f023 0320 	bic.w	r3, r3, #32
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	2310      	movs	r3, #16
 8003aca:	e7af      	b.n	8003a2c <_printf_i+0xfc>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	f043 0320 	orr.w	r3, r3, #32
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	2378      	movs	r3, #120	; 0x78
 8003ad6:	4828      	ldr	r0, [pc, #160]	; (8003b78 <_printf_i+0x248>)
 8003ad8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003adc:	e7e3      	b.n	8003aa6 <_printf_i+0x176>
 8003ade:	0659      	lsls	r1, r3, #25
 8003ae0:	bf48      	it	mi
 8003ae2:	b2b6      	uxthmi	r6, r6
 8003ae4:	e7e6      	b.n	8003ab4 <_printf_i+0x184>
 8003ae6:	4615      	mov	r5, r2
 8003ae8:	e7bb      	b.n	8003a62 <_printf_i+0x132>
 8003aea:	682b      	ldr	r3, [r5, #0]
 8003aec:	6826      	ldr	r6, [r4, #0]
 8003aee:	1d18      	adds	r0, r3, #4
 8003af0:	6961      	ldr	r1, [r4, #20]
 8003af2:	6028      	str	r0, [r5, #0]
 8003af4:	0635      	lsls	r5, r6, #24
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	d501      	bpl.n	8003afe <_printf_i+0x1ce>
 8003afa:	6019      	str	r1, [r3, #0]
 8003afc:	e002      	b.n	8003b04 <_printf_i+0x1d4>
 8003afe:	0670      	lsls	r0, r6, #25
 8003b00:	d5fb      	bpl.n	8003afa <_printf_i+0x1ca>
 8003b02:	8019      	strh	r1, [r3, #0]
 8003b04:	2300      	movs	r3, #0
 8003b06:	4615      	mov	r5, r2
 8003b08:	6123      	str	r3, [r4, #16]
 8003b0a:	e7ba      	b.n	8003a82 <_printf_i+0x152>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	2100      	movs	r1, #0
 8003b10:	1d1a      	adds	r2, r3, #4
 8003b12:	602a      	str	r2, [r5, #0]
 8003b14:	681d      	ldr	r5, [r3, #0]
 8003b16:	6862      	ldr	r2, [r4, #4]
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f000 f82f 	bl	8003b7c <memchr>
 8003b1e:	b108      	cbz	r0, 8003b24 <_printf_i+0x1f4>
 8003b20:	1b40      	subs	r0, r0, r5
 8003b22:	6060      	str	r0, [r4, #4]
 8003b24:	6863      	ldr	r3, [r4, #4]
 8003b26:	6123      	str	r3, [r4, #16]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b2e:	e7a8      	b.n	8003a82 <_printf_i+0x152>
 8003b30:	462a      	mov	r2, r5
 8003b32:	4649      	mov	r1, r9
 8003b34:	4640      	mov	r0, r8
 8003b36:	6923      	ldr	r3, [r4, #16]
 8003b38:	47d0      	blx	sl
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d0ab      	beq.n	8003a96 <_printf_i+0x166>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	079b      	lsls	r3, r3, #30
 8003b42:	d413      	bmi.n	8003b6c <_printf_i+0x23c>
 8003b44:	68e0      	ldr	r0, [r4, #12]
 8003b46:	9b03      	ldr	r3, [sp, #12]
 8003b48:	4298      	cmp	r0, r3
 8003b4a:	bfb8      	it	lt
 8003b4c:	4618      	movlt	r0, r3
 8003b4e:	e7a4      	b.n	8003a9a <_printf_i+0x16a>
 8003b50:	2301      	movs	r3, #1
 8003b52:	4632      	mov	r2, r6
 8003b54:	4649      	mov	r1, r9
 8003b56:	4640      	mov	r0, r8
 8003b58:	47d0      	blx	sl
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d09b      	beq.n	8003a96 <_printf_i+0x166>
 8003b5e:	3501      	adds	r5, #1
 8003b60:	68e3      	ldr	r3, [r4, #12]
 8003b62:	9903      	ldr	r1, [sp, #12]
 8003b64:	1a5b      	subs	r3, r3, r1
 8003b66:	42ab      	cmp	r3, r5
 8003b68:	dcf2      	bgt.n	8003b50 <_printf_i+0x220>
 8003b6a:	e7eb      	b.n	8003b44 <_printf_i+0x214>
 8003b6c:	2500      	movs	r5, #0
 8003b6e:	f104 0619 	add.w	r6, r4, #25
 8003b72:	e7f5      	b.n	8003b60 <_printf_i+0x230>
 8003b74:	08004509 	.word	0x08004509
 8003b78:	0800451a 	.word	0x0800451a

08003b7c <memchr>:
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	b2c9      	uxtb	r1, r1
 8003b82:	4402      	add	r2, r0
 8003b84:	4293      	cmp	r3, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	d101      	bne.n	8003b8e <memchr+0x12>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e003      	b.n	8003b96 <memchr+0x1a>
 8003b8e:	7804      	ldrb	r4, [r0, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	428c      	cmp	r4, r1
 8003b94:	d1f6      	bne.n	8003b84 <memchr+0x8>
 8003b96:	bd10      	pop	{r4, pc}

08003b98 <memcpy>:
 8003b98:	440a      	add	r2, r1
 8003b9a:	4291      	cmp	r1, r2
 8003b9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ba0:	d100      	bne.n	8003ba4 <memcpy+0xc>
 8003ba2:	4770      	bx	lr
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003baa:	4291      	cmp	r1, r2
 8003bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bb0:	d1f9      	bne.n	8003ba6 <memcpy+0xe>
 8003bb2:	bd10      	pop	{r4, pc}

08003bb4 <memmove>:
 8003bb4:	4288      	cmp	r0, r1
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	eb01 0402 	add.w	r4, r1, r2
 8003bbc:	d902      	bls.n	8003bc4 <memmove+0x10>
 8003bbe:	4284      	cmp	r4, r0
 8003bc0:	4623      	mov	r3, r4
 8003bc2:	d807      	bhi.n	8003bd4 <memmove+0x20>
 8003bc4:	1e43      	subs	r3, r0, #1
 8003bc6:	42a1      	cmp	r1, r4
 8003bc8:	d008      	beq.n	8003bdc <memmove+0x28>
 8003bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bd2:	e7f8      	b.n	8003bc6 <memmove+0x12>
 8003bd4:	4601      	mov	r1, r0
 8003bd6:	4402      	add	r2, r0
 8003bd8:	428a      	cmp	r2, r1
 8003bda:	d100      	bne.n	8003bde <memmove+0x2a>
 8003bdc:	bd10      	pop	{r4, pc}
 8003bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003be6:	e7f7      	b.n	8003bd8 <memmove+0x24>

08003be8 <_free_r>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	4605      	mov	r5, r0
 8003bec:	2900      	cmp	r1, #0
 8003bee:	d040      	beq.n	8003c72 <_free_r+0x8a>
 8003bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf4:	1f0c      	subs	r4, r1, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bfb8      	it	lt
 8003bfa:	18e4      	addlt	r4, r4, r3
 8003bfc:	f000 f910 	bl	8003e20 <__malloc_lock>
 8003c00:	4a1c      	ldr	r2, [pc, #112]	; (8003c74 <_free_r+0x8c>)
 8003c02:	6813      	ldr	r3, [r2, #0]
 8003c04:	b933      	cbnz	r3, 8003c14 <_free_r+0x2c>
 8003c06:	6063      	str	r3, [r4, #4]
 8003c08:	6014      	str	r4, [r2, #0]
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c10:	f000 b90c 	b.w	8003e2c <__malloc_unlock>
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	d908      	bls.n	8003c2a <_free_r+0x42>
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	1821      	adds	r1, r4, r0
 8003c1c:	428b      	cmp	r3, r1
 8003c1e:	bf01      	itttt	eq
 8003c20:	6819      	ldreq	r1, [r3, #0]
 8003c22:	685b      	ldreq	r3, [r3, #4]
 8003c24:	1809      	addeq	r1, r1, r0
 8003c26:	6021      	streq	r1, [r4, #0]
 8003c28:	e7ed      	b.n	8003c06 <_free_r+0x1e>
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	b10b      	cbz	r3, 8003c34 <_free_r+0x4c>
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	d9fa      	bls.n	8003c2a <_free_r+0x42>
 8003c34:	6811      	ldr	r1, [r2, #0]
 8003c36:	1850      	adds	r0, r2, r1
 8003c38:	42a0      	cmp	r0, r4
 8003c3a:	d10b      	bne.n	8003c54 <_free_r+0x6c>
 8003c3c:	6820      	ldr	r0, [r4, #0]
 8003c3e:	4401      	add	r1, r0
 8003c40:	1850      	adds	r0, r2, r1
 8003c42:	4283      	cmp	r3, r0
 8003c44:	6011      	str	r1, [r2, #0]
 8003c46:	d1e0      	bne.n	8003c0a <_free_r+0x22>
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4401      	add	r1, r0
 8003c4e:	6011      	str	r1, [r2, #0]
 8003c50:	6053      	str	r3, [r2, #4]
 8003c52:	e7da      	b.n	8003c0a <_free_r+0x22>
 8003c54:	d902      	bls.n	8003c5c <_free_r+0x74>
 8003c56:	230c      	movs	r3, #12
 8003c58:	602b      	str	r3, [r5, #0]
 8003c5a:	e7d6      	b.n	8003c0a <_free_r+0x22>
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	1821      	adds	r1, r4, r0
 8003c60:	428b      	cmp	r3, r1
 8003c62:	bf01      	itttt	eq
 8003c64:	6819      	ldreq	r1, [r3, #0]
 8003c66:	685b      	ldreq	r3, [r3, #4]
 8003c68:	1809      	addeq	r1, r1, r0
 8003c6a:	6021      	streq	r1, [r4, #0]
 8003c6c:	6063      	str	r3, [r4, #4]
 8003c6e:	6054      	str	r4, [r2, #4]
 8003c70:	e7cb      	b.n	8003c0a <_free_r+0x22>
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	200000f8 	.word	0x200000f8

08003c78 <sbrk_aligned>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	4e0e      	ldr	r6, [pc, #56]	; (8003cb4 <sbrk_aligned+0x3c>)
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	6831      	ldr	r1, [r6, #0]
 8003c80:	4605      	mov	r5, r0
 8003c82:	b911      	cbnz	r1, 8003c8a <sbrk_aligned+0x12>
 8003c84:	f000 f8bc 	bl	8003e00 <_sbrk_r>
 8003c88:	6030      	str	r0, [r6, #0]
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f000 f8b7 	bl	8003e00 <_sbrk_r>
 8003c92:	1c43      	adds	r3, r0, #1
 8003c94:	d00a      	beq.n	8003cac <sbrk_aligned+0x34>
 8003c96:	1cc4      	adds	r4, r0, #3
 8003c98:	f024 0403 	bic.w	r4, r4, #3
 8003c9c:	42a0      	cmp	r0, r4
 8003c9e:	d007      	beq.n	8003cb0 <sbrk_aligned+0x38>
 8003ca0:	1a21      	subs	r1, r4, r0
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f000 f8ac 	bl	8003e00 <_sbrk_r>
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d101      	bne.n	8003cb0 <sbrk_aligned+0x38>
 8003cac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	200000fc 	.word	0x200000fc

08003cb8 <_malloc_r>:
 8003cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cbc:	1ccd      	adds	r5, r1, #3
 8003cbe:	f025 0503 	bic.w	r5, r5, #3
 8003cc2:	3508      	adds	r5, #8
 8003cc4:	2d0c      	cmp	r5, #12
 8003cc6:	bf38      	it	cc
 8003cc8:	250c      	movcc	r5, #12
 8003cca:	2d00      	cmp	r5, #0
 8003ccc:	4607      	mov	r7, r0
 8003cce:	db01      	blt.n	8003cd4 <_malloc_r+0x1c>
 8003cd0:	42a9      	cmp	r1, r5
 8003cd2:	d905      	bls.n	8003ce0 <_malloc_r+0x28>
 8003cd4:	230c      	movs	r3, #12
 8003cd6:	2600      	movs	r6, #0
 8003cd8:	603b      	str	r3, [r7, #0]
 8003cda:	4630      	mov	r0, r6
 8003cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ce0:	4e2e      	ldr	r6, [pc, #184]	; (8003d9c <_malloc_r+0xe4>)
 8003ce2:	f000 f89d 	bl	8003e20 <__malloc_lock>
 8003ce6:	6833      	ldr	r3, [r6, #0]
 8003ce8:	461c      	mov	r4, r3
 8003cea:	bb34      	cbnz	r4, 8003d3a <_malloc_r+0x82>
 8003cec:	4629      	mov	r1, r5
 8003cee:	4638      	mov	r0, r7
 8003cf0:	f7ff ffc2 	bl	8003c78 <sbrk_aligned>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	d14d      	bne.n	8003d96 <_malloc_r+0xde>
 8003cfa:	6834      	ldr	r4, [r6, #0]
 8003cfc:	4626      	mov	r6, r4
 8003cfe:	2e00      	cmp	r6, #0
 8003d00:	d140      	bne.n	8003d84 <_malloc_r+0xcc>
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	4631      	mov	r1, r6
 8003d06:	4638      	mov	r0, r7
 8003d08:	eb04 0803 	add.w	r8, r4, r3
 8003d0c:	f000 f878 	bl	8003e00 <_sbrk_r>
 8003d10:	4580      	cmp	r8, r0
 8003d12:	d13a      	bne.n	8003d8a <_malloc_r+0xd2>
 8003d14:	6821      	ldr	r1, [r4, #0]
 8003d16:	3503      	adds	r5, #3
 8003d18:	1a6d      	subs	r5, r5, r1
 8003d1a:	f025 0503 	bic.w	r5, r5, #3
 8003d1e:	3508      	adds	r5, #8
 8003d20:	2d0c      	cmp	r5, #12
 8003d22:	bf38      	it	cc
 8003d24:	250c      	movcc	r5, #12
 8003d26:	4638      	mov	r0, r7
 8003d28:	4629      	mov	r1, r5
 8003d2a:	f7ff ffa5 	bl	8003c78 <sbrk_aligned>
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d02b      	beq.n	8003d8a <_malloc_r+0xd2>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	442b      	add	r3, r5
 8003d36:	6023      	str	r3, [r4, #0]
 8003d38:	e00e      	b.n	8003d58 <_malloc_r+0xa0>
 8003d3a:	6822      	ldr	r2, [r4, #0]
 8003d3c:	1b52      	subs	r2, r2, r5
 8003d3e:	d41e      	bmi.n	8003d7e <_malloc_r+0xc6>
 8003d40:	2a0b      	cmp	r2, #11
 8003d42:	d916      	bls.n	8003d72 <_malloc_r+0xba>
 8003d44:	1961      	adds	r1, r4, r5
 8003d46:	42a3      	cmp	r3, r4
 8003d48:	6025      	str	r5, [r4, #0]
 8003d4a:	bf18      	it	ne
 8003d4c:	6059      	strne	r1, [r3, #4]
 8003d4e:	6863      	ldr	r3, [r4, #4]
 8003d50:	bf08      	it	eq
 8003d52:	6031      	streq	r1, [r6, #0]
 8003d54:	5162      	str	r2, [r4, r5]
 8003d56:	604b      	str	r3, [r1, #4]
 8003d58:	4638      	mov	r0, r7
 8003d5a:	f104 060b 	add.w	r6, r4, #11
 8003d5e:	f000 f865 	bl	8003e2c <__malloc_unlock>
 8003d62:	f026 0607 	bic.w	r6, r6, #7
 8003d66:	1d23      	adds	r3, r4, #4
 8003d68:	1af2      	subs	r2, r6, r3
 8003d6a:	d0b6      	beq.n	8003cda <_malloc_r+0x22>
 8003d6c:	1b9b      	subs	r3, r3, r6
 8003d6e:	50a3      	str	r3, [r4, r2]
 8003d70:	e7b3      	b.n	8003cda <_malloc_r+0x22>
 8003d72:	6862      	ldr	r2, [r4, #4]
 8003d74:	42a3      	cmp	r3, r4
 8003d76:	bf0c      	ite	eq
 8003d78:	6032      	streq	r2, [r6, #0]
 8003d7a:	605a      	strne	r2, [r3, #4]
 8003d7c:	e7ec      	b.n	8003d58 <_malloc_r+0xa0>
 8003d7e:	4623      	mov	r3, r4
 8003d80:	6864      	ldr	r4, [r4, #4]
 8003d82:	e7b2      	b.n	8003cea <_malloc_r+0x32>
 8003d84:	4634      	mov	r4, r6
 8003d86:	6876      	ldr	r6, [r6, #4]
 8003d88:	e7b9      	b.n	8003cfe <_malloc_r+0x46>
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	f000 f84c 	bl	8003e2c <__malloc_unlock>
 8003d94:	e7a1      	b.n	8003cda <_malloc_r+0x22>
 8003d96:	6025      	str	r5, [r4, #0]
 8003d98:	e7de      	b.n	8003d58 <_malloc_r+0xa0>
 8003d9a:	bf00      	nop
 8003d9c:	200000f8 	.word	0x200000f8

08003da0 <_realloc_r>:
 8003da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da4:	4680      	mov	r8, r0
 8003da6:	4614      	mov	r4, r2
 8003da8:	460e      	mov	r6, r1
 8003daa:	b921      	cbnz	r1, 8003db6 <_realloc_r+0x16>
 8003dac:	4611      	mov	r1, r2
 8003dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003db2:	f7ff bf81 	b.w	8003cb8 <_malloc_r>
 8003db6:	b92a      	cbnz	r2, 8003dc4 <_realloc_r+0x24>
 8003db8:	f7ff ff16 	bl	8003be8 <_free_r>
 8003dbc:	4625      	mov	r5, r4
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dc4:	f000 f838 	bl	8003e38 <_malloc_usable_size_r>
 8003dc8:	4284      	cmp	r4, r0
 8003dca:	4607      	mov	r7, r0
 8003dcc:	d802      	bhi.n	8003dd4 <_realloc_r+0x34>
 8003dce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dd2:	d812      	bhi.n	8003dfa <_realloc_r+0x5a>
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	f7ff ff6e 	bl	8003cb8 <_malloc_r>
 8003ddc:	4605      	mov	r5, r0
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d0ed      	beq.n	8003dbe <_realloc_r+0x1e>
 8003de2:	42bc      	cmp	r4, r7
 8003de4:	4622      	mov	r2, r4
 8003de6:	4631      	mov	r1, r6
 8003de8:	bf28      	it	cs
 8003dea:	463a      	movcs	r2, r7
 8003dec:	f7ff fed4 	bl	8003b98 <memcpy>
 8003df0:	4631      	mov	r1, r6
 8003df2:	4640      	mov	r0, r8
 8003df4:	f7ff fef8 	bl	8003be8 <_free_r>
 8003df8:	e7e1      	b.n	8003dbe <_realloc_r+0x1e>
 8003dfa:	4635      	mov	r5, r6
 8003dfc:	e7df      	b.n	8003dbe <_realloc_r+0x1e>
	...

08003e00 <_sbrk_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	2300      	movs	r3, #0
 8003e04:	4d05      	ldr	r5, [pc, #20]	; (8003e1c <_sbrk_r+0x1c>)
 8003e06:	4604      	mov	r4, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	602b      	str	r3, [r5, #0]
 8003e0c:	f7fd f912 	bl	8001034 <_sbrk>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d102      	bne.n	8003e1a <_sbrk_r+0x1a>
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	b103      	cbz	r3, 8003e1a <_sbrk_r+0x1a>
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	20000100 	.word	0x20000100

08003e20 <__malloc_lock>:
 8003e20:	4801      	ldr	r0, [pc, #4]	; (8003e28 <__malloc_lock+0x8>)
 8003e22:	f000 b811 	b.w	8003e48 <__retarget_lock_acquire_recursive>
 8003e26:	bf00      	nop
 8003e28:	20000104 	.word	0x20000104

08003e2c <__malloc_unlock>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	; (8003e34 <__malloc_unlock+0x8>)
 8003e2e:	f000 b80c 	b.w	8003e4a <__retarget_lock_release_recursive>
 8003e32:	bf00      	nop
 8003e34:	20000104 	.word	0x20000104

08003e38 <_malloc_usable_size_r>:
 8003e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e3c:	1f18      	subs	r0, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bfbc      	itt	lt
 8003e42:	580b      	ldrlt	r3, [r1, r0]
 8003e44:	18c0      	addlt	r0, r0, r3
 8003e46:	4770      	bx	lr

08003e48 <__retarget_lock_acquire_recursive>:
 8003e48:	4770      	bx	lr

08003e4a <__retarget_lock_release_recursive>:
 8003e4a:	4770      	bx	lr

08003e4c <_init>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr

08003e58 <_fini>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr

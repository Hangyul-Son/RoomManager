
RoomManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098b4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  08009aa0  08009aa0  00019aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a584  0800a584  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a584  0800a584  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a584  0800a584  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a588  0800a588  0001a588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001e0  0800a76c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800a76c  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001156f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003107  00000000  00000000  00031778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00034880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  00035b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca62  00000000  00000000  00036c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154cf  00000000  00000000  0005368a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a00a3  00000000  00000000  00068b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108bfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e60  00000000  00000000  00108c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	08009a84 	.word	0x08009a84

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	08009a84 	.word	0x08009a84

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	; 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c34:	d2ed      	bcs.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_fmul>:
 8000d90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d98:	bf1e      	ittt	ne
 8000d9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d9e:	ea92 0f0c 	teqne	r2, ip
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d06f      	beq.n	8000e88 <__aeabi_fmul+0xf8>
 8000da8:	441a      	add	r2, r3
 8000daa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dae:	0240      	lsls	r0, r0, #9
 8000db0:	bf18      	it	ne
 8000db2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000db6:	d01e      	beq.n	8000df6 <__aeabi_fmul+0x66>
 8000db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dc4:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dcc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd0:	bf3e      	ittt	cc
 8000dd2:	0049      	lslcc	r1, r1, #1
 8000dd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd8:	005b      	lslcc	r3, r3, #1
 8000dda:	ea40 0001 	orr.w	r0, r0, r1
 8000dde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000de2:	2afd      	cmp	r2, #253	; 0xfd
 8000de4:	d81d      	bhi.n	8000e22 <__aeabi_fmul+0x92>
 8000de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dee:	bf08      	it	eq
 8000df0:	f020 0001 	biceq.w	r0, r0, #1
 8000df4:	4770      	bx	lr
 8000df6:	f090 0f00 	teq	r0, #0
 8000dfa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfe:	bf08      	it	eq
 8000e00:	0249      	lsleq	r1, r1, #9
 8000e02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e0a:	3a7f      	subs	r2, #127	; 0x7f
 8000e0c:	bfc2      	ittt	gt
 8000e0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e16:	4770      	bxgt	lr
 8000e18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	3a01      	subs	r2, #1
 8000e22:	dc5d      	bgt.n	8000ee0 <__aeabi_fmul+0x150>
 8000e24:	f112 0f19 	cmn.w	r2, #25
 8000e28:	bfdc      	itt	le
 8000e2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e2e:	4770      	bxle	lr
 8000e30:	f1c2 0200 	rsb	r2, r2, #0
 8000e34:	0041      	lsls	r1, r0, #1
 8000e36:	fa21 f102 	lsr.w	r1, r1, r2
 8000e3a:	f1c2 0220 	rsb	r2, r2, #32
 8000e3e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e42:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e46:	f140 0000 	adc.w	r0, r0, #0
 8000e4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e4e:	bf08      	it	eq
 8000e50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e54:	4770      	bx	lr
 8000e56:	f092 0f00 	teq	r2, #0
 8000e5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e5e:	bf02      	ittt	eq
 8000e60:	0040      	lsleq	r0, r0, #1
 8000e62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e66:	3a01      	subeq	r2, #1
 8000e68:	d0f9      	beq.n	8000e5e <__aeabi_fmul+0xce>
 8000e6a:	ea40 000c 	orr.w	r0, r0, ip
 8000e6e:	f093 0f00 	teq	r3, #0
 8000e72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e76:	bf02      	ittt	eq
 8000e78:	0049      	lsleq	r1, r1, #1
 8000e7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e7e:	3b01      	subeq	r3, #1
 8000e80:	d0f9      	beq.n	8000e76 <__aeabi_fmul+0xe6>
 8000e82:	ea41 010c 	orr.w	r1, r1, ip
 8000e86:	e78f      	b.n	8000da8 <__aeabi_fmul+0x18>
 8000e88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	bf18      	it	ne
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d00a      	beq.n	8000eae <__aeabi_fmul+0x11e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1d8      	bne.n	8000e56 <__aeabi_fmul+0xc6>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	4770      	bx	lr
 8000eae:	f090 0f00 	teq	r0, #0
 8000eb2:	bf17      	itett	ne
 8000eb4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eb8:	4608      	moveq	r0, r1
 8000eba:	f091 0f00 	teqne	r1, #0
 8000ebe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ec2:	d014      	beq.n	8000eee <__aeabi_fmul+0x15e>
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	d101      	bne.n	8000ece <__aeabi_fmul+0x13e>
 8000eca:	0242      	lsls	r2, r0, #9
 8000ecc:	d10f      	bne.n	8000eee <__aeabi_fmul+0x15e>
 8000ece:	ea93 0f0c 	teq	r3, ip
 8000ed2:	d103      	bne.n	8000edc <__aeabi_fmul+0x14c>
 8000ed4:	024b      	lsls	r3, r1, #9
 8000ed6:	bf18      	it	ne
 8000ed8:	4608      	movne	r0, r1
 8000eda:	d108      	bne.n	8000eee <__aeabi_fmul+0x15e>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eec:	4770      	bx	lr
 8000eee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ef6:	4770      	bx	lr

08000ef8 <__aeabi_fdiv>:
 8000ef8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000efc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f00:	bf1e      	ittt	ne
 8000f02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f06:	ea92 0f0c 	teqne	r2, ip
 8000f0a:	ea93 0f0c 	teqne	r3, ip
 8000f0e:	d069      	beq.n	8000fe4 <__aeabi_fdiv+0xec>
 8000f10:	eba2 0203 	sub.w	r2, r2, r3
 8000f14:	ea80 0c01 	eor.w	ip, r0, r1
 8000f18:	0249      	lsls	r1, r1, #9
 8000f1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f1e:	d037      	beq.n	8000f90 <__aeabi_fdiv+0x98>
 8000f20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f30:	428b      	cmp	r3, r1
 8000f32:	bf38      	it	cc
 8000f34:	005b      	lslcc	r3, r3, #1
 8000f36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	bf24      	itt	cs
 8000f42:	1a5b      	subcs	r3, r3, r1
 8000f44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f5a:	bf24      	itt	cs
 8000f5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f68:	bf24      	itt	cs
 8000f6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	bf18      	it	ne
 8000f76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f7a:	d1e0      	bne.n	8000f3e <__aeabi_fdiv+0x46>
 8000f7c:	2afd      	cmp	r2, #253	; 0xfd
 8000f7e:	f63f af50 	bhi.w	8000e22 <__aeabi_fmul+0x92>
 8000f82:	428b      	cmp	r3, r1
 8000f84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f88:	bf08      	it	eq
 8000f8a:	f020 0001 	biceq.w	r0, r0, #1
 8000f8e:	4770      	bx	lr
 8000f90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f98:	327f      	adds	r2, #127	; 0x7f
 8000f9a:	bfc2      	ittt	gt
 8000f9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fa4:	4770      	bxgt	lr
 8000fa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	3a01      	subs	r2, #1
 8000fb0:	e737      	b.n	8000e22 <__aeabi_fmul+0x92>
 8000fb2:	f092 0f00 	teq	r2, #0
 8000fb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fba:	bf02      	ittt	eq
 8000fbc:	0040      	lsleq	r0, r0, #1
 8000fbe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fc2:	3a01      	subeq	r2, #1
 8000fc4:	d0f9      	beq.n	8000fba <__aeabi_fdiv+0xc2>
 8000fc6:	ea40 000c 	orr.w	r0, r0, ip
 8000fca:	f093 0f00 	teq	r3, #0
 8000fce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	bf02      	ittt	eq
 8000fd4:	0049      	lsleq	r1, r1, #1
 8000fd6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fda:	3b01      	subeq	r3, #1
 8000fdc:	d0f9      	beq.n	8000fd2 <__aeabi_fdiv+0xda>
 8000fde:	ea41 010c 	orr.w	r1, r1, ip
 8000fe2:	e795      	b.n	8000f10 <__aeabi_fdiv+0x18>
 8000fe4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe8:	ea92 0f0c 	teq	r2, ip
 8000fec:	d108      	bne.n	8001000 <__aeabi_fdiv+0x108>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	f47f af7d 	bne.w	8000eee <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	f47f af70 	bne.w	8000edc <__aeabi_fmul+0x14c>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e776      	b.n	8000eee <__aeabi_fmul+0x15e>
 8001000:	ea93 0f0c 	teq	r3, ip
 8001004:	d104      	bne.n	8001010 <__aeabi_fdiv+0x118>
 8001006:	024b      	lsls	r3, r1, #9
 8001008:	f43f af4c 	beq.w	8000ea4 <__aeabi_fmul+0x114>
 800100c:	4608      	mov	r0, r1
 800100e:	e76e      	b.n	8000eee <__aeabi_fmul+0x15e>
 8001010:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001014:	bf18      	it	ne
 8001016:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800101a:	d1ca      	bne.n	8000fb2 <__aeabi_fdiv+0xba>
 800101c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001020:	f47f af5c 	bne.w	8000edc <__aeabi_fmul+0x14c>
 8001024:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001028:	f47f af3c 	bne.w	8000ea4 <__aeabi_fmul+0x114>
 800102c:	e75f      	b.n	8000eee <__aeabi_fmul+0x15e>
 800102e:	bf00      	nop

08001030 <DHT_Init>:

GPIO_TypeDef* DHT_PORT;
uint16_t DHT_PIN;

void DHT_Init(GPIO_TypeDef* DataPort, uint16_t DataPin)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
	DHT_PORT = DataPort;
 800103c:	4a05      	ldr	r2, [pc, #20]	; (8001054 <DHT_Init+0x24>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
	DHT_PIN = DataPin;
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <DHT_Init+0x28>)
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	8013      	strh	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000204 	.word	0x20000204
 8001058:	20000208 	.word	0x20000208

0800105c <DHT_Start>:

void DHT_Test(void){
	HAL_GPIO_WritePin(DHT_PORT,DHT_PIN, GPIO_PIN_SET);
}
void DHT_Start (void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	//Change data pin mode to OUTPUT
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT_PIN;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <DHT_Start+0x84>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2302      	movs	r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <DHT_Start+0x88>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	463a      	mov	r2, r7
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f002 f947 	bl	800331c <HAL_GPIO_Init>
	//Put pin LOW

	HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_RESET);
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <DHT_Start+0x88>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <DHT_Start+0x84>)
 8001094:	8811      	ldrh	r1, [r2, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f002 faea 	bl	8003672 <HAL_GPIO_WritePin>
	//500uSec delay
	DelayMicroSeconds(1200);
 800109e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80010a2:	f001 fe17 	bl	8002cd4 <DelayMicroSeconds>
	//Bring pin HIGH
	HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_SET);
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <DHT_Start+0x88>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <DHT_Start+0x84>)
 80010ac:	8811      	ldrh	r1, [r2, #0]
 80010ae:	2201      	movs	r2, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fade 	bl	8003672 <HAL_GPIO_WritePin>
	//30 uSec delay
	DelayMicroSeconds(30);
 80010b6:	201e      	movs	r0, #30
 80010b8:	f001 fe0c 	bl	8002cd4 <DelayMicroSeconds>
	//Set pin as input
	GPIO_InitStruct.Pin = DHT_PIN;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <DHT_Start+0x84>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <DHT_Start+0x88>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	463a      	mov	r2, r7
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 f922 	bl	800331c <HAL_GPIO_Init>
//	LCD_DrawChar(0,0,'A');
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000208 	.word	0x20000208
 80010e4:	20000204 	.word	0x20000204

080010e8 <DHT_ReadSensor>:


void DHT_ReadSensor (uint8_t* data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

    uint32_t rawBits = 0UL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
    uint8_t checksumBits = 0UL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	72fb      	strb	r3, [r7, #11]

    DelayMicroSeconds(40);
 80010f8:	2028      	movs	r0, #40	; 0x28
 80010fa:	f001 fdeb 	bl	8002cd4 <DelayMicroSeconds>

    while(!(1&HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 80010fe:	bf00      	nop
 8001100:	4b61      	ldr	r3, [pc, #388]	; (8001288 <DHT_ReadSensor+0x1a0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a61      	ldr	r2, [pc, #388]	; (800128c <DHT_ReadSensor+0x1a4>)
 8001106:	8812      	ldrh	r2, [r2, #0]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fa9a 	bl	8003644 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f1      	beq.n	8001100 <DHT_ReadSensor+0x18>
    while((1&HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 800111c:	bf00      	nop
 800111e:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <DHT_ReadSensor+0x1a0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a5a      	ldr	r2, [pc, #360]	; (800128c <DHT_ReadSensor+0x1a4>)
 8001124:	8812      	ldrh	r2, [r2, #0]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fa8b 	bl	8003644 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f1      	bne.n	800111e <DHT_ReadSensor+0x36>
    for(int8_t i=31; i>=0; i--)
 800113a:	231f      	movs	r3, #31
 800113c:	72bb      	strb	r3, [r7, #10]
 800113e:	e03c      	b.n	80011ba <DHT_ReadSensor+0xd2>
    {
        while(!(1&HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 8001140:	bf00      	nop
 8001142:	4b51      	ldr	r3, [pc, #324]	; (8001288 <DHT_ReadSensor+0x1a0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a51      	ldr	r2, [pc, #324]	; (800128c <DHT_ReadSensor+0x1a4>)
 8001148:	8812      	ldrh	r2, [r2, #0]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fa79 	bl	8003644 <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f1      	beq.n	8001142 <DHT_ReadSensor+0x5a>
        DelayMicroSeconds(40);
 800115e:	2028      	movs	r0, #40	; 0x28
 8001160:	f001 fdb8 	bl	8002cd4 <DelayMicroSeconds>
        if((1&HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <DHT_ReadSensor+0x1a0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a48      	ldr	r2, [pc, #288]	; (800128c <DHT_ReadSensor+0x1a4>)
 800116a:	8812      	ldrh	r2, [r2, #0]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fa68 	bl	8003644 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d007      	beq.n	8001190 <DHT_ReadSensor+0xa8>
        {
            rawBits |= (1UL << i);
 8001180:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001184:	2201      	movs	r2, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
        }
        while((1&HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 8001190:	bf00      	nop
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <DHT_ReadSensor+0x1a0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a3d      	ldr	r2, [pc, #244]	; (800128c <DHT_ReadSensor+0x1a4>)
 8001198:	8812      	ldrh	r2, [r2, #0]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f002 fa51 	bl	8003644 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f1      	bne.n	8001192 <DHT_ReadSensor+0xaa>
    for(int8_t i=31; i>=0; i--)
 80011ae:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	3b01      	subs	r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	72bb      	strb	r3, [r7, #10]
 80011ba:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	dabe      	bge.n	8001140 <DHT_ReadSensor+0x58>
    }

    for(int8_t i=7; i>=0; i--)
 80011c2:	2307      	movs	r3, #7
 80011c4:	727b      	strb	r3, [r7, #9]
 80011c6:	e03d      	b.n	8001244 <DHT_ReadSensor+0x15c>
    {
        while(!(1&HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 80011c8:	bf00      	nop
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <DHT_ReadSensor+0x1a0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a2f      	ldr	r2, [pc, #188]	; (800128c <DHT_ReadSensor+0x1a4>)
 80011d0:	8812      	ldrh	r2, [r2, #0]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fa35 	bl	8003644 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f1      	beq.n	80011ca <DHT_ReadSensor+0xe2>
        DelayMicroSeconds(40);
 80011e6:	2028      	movs	r0, #40	; 0x28
 80011e8:	f001 fd74 	bl	8002cd4 <DelayMicroSeconds>
        if((1&HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <DHT_ReadSensor+0x1a0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a26      	ldr	r2, [pc, #152]	; (800128c <DHT_ReadSensor+0x1a4>)
 80011f2:	8812      	ldrh	r2, [r2, #0]
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fa24 	bl	8003644 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <DHT_ReadSensor+0x132>
        {
            checksumBits |= (1UL << i);
 8001208:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800120c:	2201      	movs	r2, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	b2da      	uxtb	r2, r3
 8001214:	7afb      	ldrb	r3, [r7, #11]
 8001216:	4313      	orrs	r3, r2
 8001218:	72fb      	strb	r3, [r7, #11]
        }
        while((1&HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 800121a:	bf00      	nop
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <DHT_ReadSensor+0x1a0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1a      	ldr	r2, [pc, #104]	; (800128c <DHT_ReadSensor+0x1a4>)
 8001222:	8812      	ldrh	r2, [r2, #0]
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fa0c 	bl	8003644 <HAL_GPIO_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f1      	bne.n	800121c <DHT_ReadSensor+0x134>
    for(int8_t i=7; i>=0; i--)
 8001238:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	3b01      	subs	r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	727b      	strb	r3, [r7, #9]
 8001244:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8001248:	2b00      	cmp	r3, #0
 800124a:	dabd      	bge.n	80011c8 <DHT_ReadSensor+0xe0>
    }


    //Copy raw data to array of bytes
    data[0] = (rawBits>>24)&0xFF;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	0e1b      	lsrs	r3, r3, #24
 8001250:	b2da      	uxtb	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	701a      	strb	r2, [r3, #0]
    data[1] = (rawBits>>16)&0xFF;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	0c1a      	lsrs	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3301      	adds	r3, #1
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	701a      	strb	r2, [r3, #0]
    data[2] = (rawBits>>8)&0xFF;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	0a1a      	lsrs	r2, r3, #8
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3302      	adds	r3, #2
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]
    data[3] = (rawBits>>0)&0xFF;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3303      	adds	r3, #3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	701a      	strb	r2, [r3, #0]
    data[4] = (checksumBits)&0xFF;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3304      	adds	r3, #4
 800127c:	7afa      	ldrb	r2, [r7, #11]
 800127e:	701a      	strb	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000204 	.word	0x20000204
 800128c:	20000208 	.word	0x20000208

08001290 <DHT_ProcessSensorData>:

bool DHT_ProcessSensorData (uint8_t* data, float *Temp, float *Humidity)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	uint16_t Temp16, Humid16;
	uint8_t myChecksum = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	75bb      	strb	r3, [r7, #22]
 80012a4:	e009      	b.n	80012ba <DHT_ProcessSensorData+0x2a>
	{
		myChecksum += data[k];
 80012a6:	7dbb      	ldrb	r3, [r7, #22]
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	4413      	add	r3, r2
 80012b2:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 80012b4:	7dbb      	ldrb	r3, [r7, #22]
 80012b6:	3301      	adds	r3, #1
 80012b8:	75bb      	strb	r3, [r7, #22]
 80012ba:	7dbb      	ldrb	r3, [r7, #22]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d9f2      	bls.n	80012a6 <DHT_ProcessSensorData+0x16>
	}
	if(myChecksum == data[4])
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3304      	adds	r3, #4
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	7dfa      	ldrb	r2, [r7, #23]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d132      	bne.n	8001332 <DHT_ProcessSensorData+0xa2>
	{
		Temp16 = (data[2] <<8) | data[3];
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3302      	adds	r3, #2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3303      	adds	r3, #3
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	82bb      	strh	r3, [r7, #20]
		Humid16 = (data[0] <<8) | data[1];
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	827b      	strh	r3, [r7, #18]

		*Temp = Temp16/10.0f;
 80012fa:	8abb      	ldrh	r3, [r7, #20]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fcf3 	bl	8000ce8 <__aeabi_i2f>
 8001302:	4603      	mov	r3, r0
 8001304:	490d      	ldr	r1, [pc, #52]	; (800133c <DHT_ProcessSensorData+0xac>)
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fdf6 	bl	8000ef8 <__aeabi_fdiv>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	601a      	str	r2, [r3, #0]
		*Humidity = Humid16/10.0f;
 8001314:	8a7b      	ldrh	r3, [r7, #18]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fce6 	bl	8000ce8 <__aeabi_i2f>
 800131c:	4603      	mov	r3, r0
 800131e:	4907      	ldr	r1, [pc, #28]	; (800133c <DHT_ProcessSensorData+0xac>)
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fde9 	bl	8000ef8 <__aeabi_fdiv>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
		return 1;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <DHT_ProcessSensorData+0xa4>
	}
	else
	{
		return 0;
 8001332:	2300      	movs	r3, #0
	}
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	41200000 	.word	0x41200000

08001340 <DHT_GetTemperatureAndHumidity>:



bool DHT_GetTemperatureAndHumidity (float *Temp, float *Humidity)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]

    uint8_t rawData[6];

    DHT_Start();
 800134a:	f7ff fe87 	bl	800105c <DHT_Start>
    DHT_ReadSensor(rawData);
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fec8 	bl	80010e8 <DHT_ReadSensor>

    return DHT_ProcessSensorData(rawData, Temp, Humidity);
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff95 	bl	8001290 <DHT_ProcessSensorData>
 8001366:	4603      	mov	r3, r0

}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <DHT_Display>:
	//Calculate Discomfort Index
	return GetDiscomfortIndex(&Temperature, &Humidity);
}

void DHT_Display()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
	char temperature[20], humidity[20];
	sprintf(temperature, "Temperature: %.2f", Temperature);
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <DHT_Display+0x5c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f8ca 	bl	8000514 <__aeabi_f2d>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	f107 0014 	add.w	r0, r7, #20
 8001388:	4911      	ldr	r1, [pc, #68]	; (80013d0 <DHT_Display+0x60>)
 800138a:	f006 f8fd 	bl	8007588 <siprintf>
	sprintf(humidity, "Humidity: %.2f", Humidity);
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <DHT_Display+0x64>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8be 	bl	8000514 <__aeabi_f2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4638      	mov	r0, r7
 800139e:	490e      	ldr	r1, [pc, #56]	; (80013d8 <DHT_Display+0x68>)
 80013a0:	f006 f8f2 	bl	8007588 <siprintf>

	LCD_DrawString(20,260, temperature);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	461a      	mov	r2, r3
 80013aa:	f44f 7182 	mov.w	r1, #260	; 0x104
 80013ae:	2014      	movs	r0, #20
 80013b0:	f000 fc06 	bl	8001bc0 <LCD_DrawString>
	LCD_DrawString(20,280, humidity);
 80013b4:	463b      	mov	r3, r7
 80013b6:	461a      	mov	r2, r3
 80013b8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80013bc:	2014      	movs	r0, #20
 80013be:	f000 fbff 	bl	8001bc0 <LCD_DrawString>
}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200001fc 	.word	0x200001fc
 80013d0:	08009aa0 	.word	0x08009aa0
 80013d4:	20000200 	.word	0x20000200
 80013d8:	08009ab4 	.word	0x08009ab4

080013dc <DHT_Check>:


bool DHT_Check()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	return DHT_GetTemperatureAndHumidity(&Temperature, &Humidity);
 80013e0:	4903      	ldr	r1, [pc, #12]	; (80013f0 <DHT_Check+0x14>)
 80013e2:	4804      	ldr	r0, [pc, #16]	; (80013f4 <DHT_Check+0x18>)
 80013e4:	f7ff ffac 	bl	8001340 <DHT_GetTemperatureAndHumidity>
 80013e8:	4603      	mov	r3, r0


}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000200 	.word	0x20000200
 80013f4:	200001fc 	.word	0x200001fc

080013f8 <FAN_Init>:

TIM_HandleTypeDef *htim;
uint32_t Channel;

void FAN_Init(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	htim = htim;
	Channel = Channel;
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <checkFanON>:
	return !strncmp(rxString,strAlarm[1],size_str);
}


bool checkFanON(const char* rxString)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2101      	movs	r1, #1
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <checkFanON+0x30>)
 800141a:	f002 f92a 	bl	8003672 <HAL_GPIO_WritePin>
	return !strncmp(rxString,strFan[1],size_str);
 800141e:	2207      	movs	r2, #7
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <checkFanON+0x34>)
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f006 f8d0 	bl	80075c8 <strncmp>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf0c      	ite	eq
 800142e:	2301      	moveq	r3, #1
 8001430:	2300      	movne	r3, #0
 8001432:	b2db      	uxtb	r3, r3
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40010c00 	.word	0x40010c00
 8001440:	08009b60 	.word	0x08009b60

08001444 <checkFanOFF>:
bool checkFanOFF(const char* rxString)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800144c:	2201      	movs	r2, #1
 800144e:	2101      	movs	r1, #1
 8001450:	4808      	ldr	r0, [pc, #32]	; (8001474 <checkFanOFF+0x30>)
 8001452:	f002 f90e 	bl	8003672 <HAL_GPIO_WritePin>
	return !strncmp(rxString,strFan[2],size_str);
 8001456:	2207      	movs	r2, #7
 8001458:	4907      	ldr	r1, [pc, #28]	; (8001478 <checkFanOFF+0x34>)
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f006 f8b4 	bl	80075c8 <strncmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	bf0c      	ite	eq
 8001466:	2301      	moveq	r3, #1
 8001468:	2300      	movne	r3, #0
 800146a:	b2db      	uxtb	r3, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40010c00 	.word	0x40010c00
 8001478:	08009b68 	.word	0x08009b68

0800147c <checkLcdON>:

bool checkLcdON(const char* rxString)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	return !strncmp(rxString,strLcd[1],size_str);
 8001484:	4906      	ldr	r1, [pc, #24]	; (80014a0 <checkLcdON+0x24>)
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7fe fece 	bl	8000228 <strcmp>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	08009b78 	.word	0x08009b78

080014a4 <checkLcdOFF>:
bool checkLcdOFF(const char* rxString)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	return !strncmp(rxString,strLcd[2],size_str);
 80014ac:	2207      	movs	r2, #7
 80014ae:	4907      	ldr	r1, [pc, #28]	; (80014cc <checkLcdOFF+0x28>)
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f006 f889 	bl	80075c8 <strncmp>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	08009b80 	.word	0x08009b80

080014d0 <buildSummary>:

uint8_t buildSummary(bool FAN_ON, bool LCD_ON, char* strConfig)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b09c      	sub	sp, #112	; 0x70
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	603a      	str	r2, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	460b      	mov	r3, r1
 80014de:	71bb      	strb	r3, [r7, #6]
	int size = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint8_t strInit[100]= "";
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2260      	movs	r2, #96	; 0x60
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f005 fbe1 	bl	8006cb8 <memset>
	memcpy(strConfig,strInit,100);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	2264      	movs	r2, #100	; 0x64
 8001500:	4619      	mov	r1, r3
 8001502:	f005 fbcb 	bl	8006c9c <memcpy>
	if (LCD_ON){
 8001506:	79bb      	ldrb	r3, [r7, #6]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d029      	beq.n	8001560 <buildSummary+0x90>
//		snprintf(prefix, sizeof(prefix), "%s: %s \n", strLcd[1], strTrue);
		strcat(strConfig, strLcd[1]);
 800150c:	6838      	ldr	r0, [r7, #0]
 800150e:	f7fe fe95 	bl	800023c <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	4413      	add	r3, r2
 800151a:	4a5e      	ldr	r2, [pc, #376]	; (8001694 <buildSummary+0x1c4>)
 800151c:	6810      	ldr	r0, [r2, #0]
 800151e:	6018      	str	r0, [r3, #0]
 8001520:	8891      	ldrh	r1, [r2, #4]
 8001522:	7992      	ldrb	r2, [r2, #6]
 8001524:	8099      	strh	r1, [r3, #4]
 8001526:	719a      	strb	r2, [r3, #6]
		strcat(strConfig, ": ");
 8001528:	6838      	ldr	r0, [r7, #0]
 800152a:	f7fe fe87 	bl	800023c <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	4413      	add	r3, r2
 8001536:	4a58      	ldr	r2, [pc, #352]	; (8001698 <buildSummary+0x1c8>)
 8001538:	8811      	ldrh	r1, [r2, #0]
 800153a:	7892      	ldrb	r2, [r2, #2]
 800153c:	8019      	strh	r1, [r3, #0]
 800153e:	709a      	strb	r2, [r3, #2]
		strcat(strConfig, strTrue);
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f7fe fe7b 	bl	800023c <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	4413      	add	r3, r2
 800154e:	4a53      	ldr	r2, [pc, #332]	; (800169c <buildSummary+0x1cc>)
 8001550:	6810      	ldr	r0, [r2, #0]
 8001552:	6018      	str	r0, [r3, #0]
 8001554:	7912      	ldrb	r2, [r2, #4]
 8001556:	711a      	strb	r2, [r3, #4]
		size += sizeof(strLcd[1]) + sizeof(strTrue);
 8001558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800155a:	330d      	adds	r3, #13
 800155c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800155e:	e028      	b.n	80015b2 <buildSummary+0xe2>
	}
	else {
//					snprintf(prefix, sizeof(prefix), "%s: %s \n", strLcd[1], strFalse);
		strcat(strConfig, strLcd[1]);
 8001560:	6838      	ldr	r0, [r7, #0]
 8001562:	f7fe fe6b 	bl	800023c <strlen>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	4413      	add	r3, r2
 800156e:	4a49      	ldr	r2, [pc, #292]	; (8001694 <buildSummary+0x1c4>)
 8001570:	6810      	ldr	r0, [r2, #0]
 8001572:	6018      	str	r0, [r3, #0]
 8001574:	8891      	ldrh	r1, [r2, #4]
 8001576:	7992      	ldrb	r2, [r2, #6]
 8001578:	8099      	strh	r1, [r3, #4]
 800157a:	719a      	strb	r2, [r3, #6]
		strcat(strConfig, ": ");
 800157c:	6838      	ldr	r0, [r7, #0]
 800157e:	f7fe fe5d 	bl	800023c <strlen>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	4413      	add	r3, r2
 800158a:	4a43      	ldr	r2, [pc, #268]	; (8001698 <buildSummary+0x1c8>)
 800158c:	8811      	ldrh	r1, [r2, #0]
 800158e:	7892      	ldrb	r2, [r2, #2]
 8001590:	8019      	strh	r1, [r3, #0]
 8001592:	709a      	strb	r2, [r3, #2]
		strcat(strConfig, strFalse);
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7fe fe51 	bl	800023c <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <buildSummary+0x1d0>)
 80015a4:	6810      	ldr	r0, [r2, #0]
 80015a6:	6018      	str	r0, [r3, #0]
 80015a8:	8892      	ldrh	r2, [r2, #4]
 80015aa:	809a      	strh	r2, [r3, #4]
		size += sizeof(strLcd[1]) + sizeof(strFalse);
 80015ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ae:	330e      	adds	r3, #14
 80015b0:	66fb      	str	r3, [r7, #108]	; 0x6c
	}
	strcat(strConfig, "\n");
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f7fe fe42 	bl	800023c <strlen>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4938      	ldr	r1, [pc, #224]	; (80016a4 <buildSummary+0x1d4>)
 80015c2:	461a      	mov	r2, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	8013      	strh	r3, [r2, #0]

	if (FAN_ON){
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d027      	beq.n	8001620 <buildSummary+0x150>
//					snprintf(prefix, sizeof(prefix), "%s: %s \n", strFan[1], strTrue);
		strcat(strConfig, strFan[1]);
 80015d0:	6838      	ldr	r0, [r7, #0]
 80015d2:	f7fe fe33 	bl	800023c <strlen>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	441a      	add	r2, r3
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <buildSummary+0x1d8>)
 80015e0:	3308      	adds	r3, #8
 80015e2:	cb03      	ldmia	r3!, {r0, r1}
 80015e4:	6010      	str	r0, [r2, #0]
 80015e6:	6051      	str	r1, [r2, #4]
		strcat(strConfig, ": ");
 80015e8:	6838      	ldr	r0, [r7, #0]
 80015ea:	f7fe fe27 	bl	800023c <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a28      	ldr	r2, [pc, #160]	; (8001698 <buildSummary+0x1c8>)
 80015f8:	8811      	ldrh	r1, [r2, #0]
 80015fa:	7892      	ldrb	r2, [r2, #2]
 80015fc:	8019      	strh	r1, [r3, #0]
 80015fe:	709a      	strb	r2, [r3, #2]
		strcat(strConfig, strTrue);
 8001600:	6838      	ldr	r0, [r7, #0]
 8001602:	f7fe fe1b 	bl	800023c <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	4413      	add	r3, r2
 800160e:	4a23      	ldr	r2, [pc, #140]	; (800169c <buildSummary+0x1cc>)
 8001610:	6810      	ldr	r0, [r2, #0]
 8001612:	6018      	str	r0, [r3, #0]
 8001614:	7912      	ldrb	r2, [r2, #4]
 8001616:	711a      	strb	r2, [r3, #4]
		size += sizeof(strFan[1]) + sizeof(strTrue);
 8001618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800161a:	330d      	adds	r3, #13
 800161c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800161e:	e026      	b.n	800166e <buildSummary+0x19e>
	}
	else {
//					snprintf(prefix, sizeof(prefix), "%s: %s \n", strFan[1], strFalse);
		strcat(strConfig, strFan[1]);
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f7fe fe0b 	bl	800023c <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	441a      	add	r2, r3
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <buildSummary+0x1d8>)
 8001630:	3308      	adds	r3, #8
 8001632:	cb03      	ldmia	r3!, {r0, r1}
 8001634:	6010      	str	r0, [r2, #0]
 8001636:	6051      	str	r1, [r2, #4]
		strcat(strConfig, ": ");
 8001638:	6838      	ldr	r0, [r7, #0]
 800163a:	f7fe fdff 	bl	800023c <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <buildSummary+0x1c8>)
 8001648:	8811      	ldrh	r1, [r2, #0]
 800164a:	7892      	ldrb	r2, [r2, #2]
 800164c:	8019      	strh	r1, [r3, #0]
 800164e:	709a      	strb	r2, [r3, #2]
		strcat(strConfig, strFalse);
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f7fe fdf3 	bl	800023c <strlen>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	4413      	add	r3, r2
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <buildSummary+0x1d0>)
 8001660:	6810      	ldr	r0, [r2, #0]
 8001662:	6018      	str	r0, [r3, #0]
 8001664:	8892      	ldrh	r2, [r2, #4]
 8001666:	809a      	strh	r2, [r3, #4]
		size += sizeof(strFan[1]) + sizeof(strFalse);
 8001668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800166a:	330e      	adds	r3, #14
 800166c:	66fb      	str	r3, [r7, #108]	; 0x6c
	}
	strcat(strConfig, "\n");
 800166e:	6838      	ldr	r0, [r7, #0]
 8001670:	f7fe fde4 	bl	800023c <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4909      	ldr	r1, [pc, #36]	; (80016a4 <buildSummary+0x1d4>)
 800167e:	461a      	mov	r2, r3
 8001680:	460b      	mov	r3, r1
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	8013      	strh	r3, [r2, #0]
	return size;
 8001686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001688:	b2db      	uxtb	r3, r3
}
 800168a:	4618      	mov	r0, r3
 800168c:	3770      	adds	r7, #112	; 0x70
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	08009b78 	.word	0x08009b78
 8001698:	08009ac4 	.word	0x08009ac4
 800169c:	08009b98 	.word	0x08009b98
 80016a0:	08009b90 	.word	0x08009b90
 80016a4:	08009ac8 	.word	0x08009ac8
 80016a8:	08009b58 	.word	0x08009b58

080016ac <checkSummary>:

bool checkSummary(const char* rxString)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	return !strncmp(rxString, strUtility[0], size_str);
 80016b4:	2207      	movs	r2, #7
 80016b6:	4907      	ldr	r1, [pc, #28]	; (80016d4 <checkSummary+0x28>)
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f005 ff85 	bl	80075c8 <strncmp>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	08009b88 	.word	0x08009b88

080016d8 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	e002      	b.n	80016e8 <Delay+0x10>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f9      	bne.n	80016e2 <Delay+0xa>
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <LCD_INIT>:

void LCD_INIT ( void )
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001700:	2001      	movs	r0, #1
 8001702:	f000 f829 	bl	8001758 <LCD_BackLed_Control>
	LCD_Rst();
 8001706:	f000 f80f 	bl	8001728 <LCD_Rst>
	LCD_REG_Config();
 800170a:	f000 f85f 	bl	80017cc <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800170e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001718:	22f0      	movs	r2, #240	; 0xf0
 800171a:	2100      	movs	r1, #0
 800171c:	2000      	movs	r0, #0
 800171e:	f000 f9e6 	bl	8001aee <LCD_Clear>
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2102      	movs	r1, #2
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <LCD_Rst+0x28>)
 8001732:	f001 ff9e 	bl	8003672 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001736:	4807      	ldr	r0, [pc, #28]	; (8001754 <LCD_Rst+0x2c>)
 8001738:	f7ff ffce 	bl	80016d8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2102      	movs	r1, #2
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <LCD_Rst+0x28>)
 8001742:	f001 ff96 	bl	8003672 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001746:	4803      	ldr	r0, [pc, #12]	; (8001754 <LCD_Rst+0x2c>)
 8001748:	f7ff ffc6 	bl	80016d8 <Delay>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40011800 	.word	0x40011800
 8001754:	0002bffc 	.word	0x0002bffc

08001758 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <LCD_BackLed_Control+0x34>)
 8001770:	f001 ff7f 	bl	8003672 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001774:	e005      	b.n	8001782 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8001776:	2201      	movs	r2, #1
 8001778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800177c:	4803      	ldr	r0, [pc, #12]	; (800178c <LCD_BackLed_Control+0x34>)
 800177e:	f001 ff78 	bl	8003672 <HAL_GPIO_WritePin>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40011400 	.word	0x40011400

08001790 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800179a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	8013      	strh	r3, [r2, #0]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <LCD_Write_Data+0x1c>)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	8013      	strh	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	60020000 	.word	0x60020000

080017cc <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80017d0:	20cf      	movs	r0, #207	; 0xcf
 80017d2:	f7ff ffdd 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff ffe8 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80017dc:	2081      	movs	r0, #129	; 0x81
 80017de:	f7ff ffe5 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80017e2:	2030      	movs	r0, #48	; 0x30
 80017e4:	f7ff ffe2 	bl	80017ac <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80017e8:	20ed      	movs	r0, #237	; 0xed
 80017ea:	f7ff ffd1 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80017ee:	2064      	movs	r0, #100	; 0x64
 80017f0:	f7ff ffdc 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80017f4:	2003      	movs	r0, #3
 80017f6:	f7ff ffd9 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80017fa:	2012      	movs	r0, #18
 80017fc:	f7ff ffd6 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001800:	2081      	movs	r0, #129	; 0x81
 8001802:	f7ff ffd3 	bl	80017ac <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001806:	20e8      	movs	r0, #232	; 0xe8
 8001808:	f7ff ffc2 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800180c:	2085      	movs	r0, #133	; 0x85
 800180e:	f7ff ffcd 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001812:	2010      	movs	r0, #16
 8001814:	f7ff ffca 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001818:	2078      	movs	r0, #120	; 0x78
 800181a:	f7ff ffc7 	bl	80017ac <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800181e:	20cb      	movs	r0, #203	; 0xcb
 8001820:	f7ff ffb6 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001824:	2039      	movs	r0, #57	; 0x39
 8001826:	f7ff ffc1 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800182a:	202c      	movs	r0, #44	; 0x2c
 800182c:	f7ff ffbe 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff ffbb 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001836:	2034      	movs	r0, #52	; 0x34
 8001838:	f7ff ffb8 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800183c:	2002      	movs	r0, #2
 800183e:	f7ff ffb5 	bl	80017ac <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001842:	20f7      	movs	r0, #247	; 0xf7
 8001844:	f7ff ffa4 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001848:	2020      	movs	r0, #32
 800184a:	f7ff ffaf 	bl	80017ac <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800184e:	20ea      	movs	r0, #234	; 0xea
 8001850:	f7ff ff9e 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff ffa9 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff ffa6 	bl	80017ac <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001860:	20b1      	movs	r0, #177	; 0xb1
 8001862:	f7ff ff95 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff ffa0 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800186c:	201b      	movs	r0, #27
 800186e:	f7ff ff9d 	bl	80017ac <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001872:	20b6      	movs	r0, #182	; 0xb6
 8001874:	f7ff ff8c 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001878:	200a      	movs	r0, #10
 800187a:	f7ff ff97 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800187e:	20a2      	movs	r0, #162	; 0xa2
 8001880:	f7ff ff94 	bl	80017ac <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001884:	20c0      	movs	r0, #192	; 0xc0
 8001886:	f7ff ff83 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800188a:	2035      	movs	r0, #53	; 0x35
 800188c:	f7ff ff8e 	bl	80017ac <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001890:	20c1      	movs	r0, #193	; 0xc1
 8001892:	f7ff ff7d 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001896:	2011      	movs	r0, #17
 8001898:	f7ff ff88 	bl	80017ac <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800189c:	20c5      	movs	r0, #197	; 0xc5
 800189e:	f7ff ff77 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80018a2:	2045      	movs	r0, #69	; 0x45
 80018a4:	f7ff ff82 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80018a8:	2045      	movs	r0, #69	; 0x45
 80018aa:	f7ff ff7f 	bl	80017ac <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80018ae:	20c7      	movs	r0, #199	; 0xc7
 80018b0:	f7ff ff6e 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80018b4:	20a2      	movs	r0, #162	; 0xa2
 80018b6:	f7ff ff79 	bl	80017ac <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80018ba:	20f2      	movs	r0, #242	; 0xf2
 80018bc:	f7ff ff68 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff ff73 	bl	80017ac <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80018c6:	2026      	movs	r0, #38	; 0x26
 80018c8:	f7ff ff62 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff ff6d 	bl	80017ac <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80018d2:	20e0      	movs	r0, #224	; 0xe0
 80018d4:	f7ff ff5c 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80018d8:	200f      	movs	r0, #15
 80018da:	f7ff ff67 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80018de:	2026      	movs	r0, #38	; 0x26
 80018e0:	f7ff ff64 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80018e4:	2024      	movs	r0, #36	; 0x24
 80018e6:	f7ff ff61 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80018ea:	200b      	movs	r0, #11
 80018ec:	f7ff ff5e 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80018f0:	200e      	movs	r0, #14
 80018f2:	f7ff ff5b 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80018f6:	2009      	movs	r0, #9
 80018f8:	f7ff ff58 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80018fc:	2054      	movs	r0, #84	; 0x54
 80018fe:	f7ff ff55 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001902:	20a8      	movs	r0, #168	; 0xa8
 8001904:	f7ff ff52 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001908:	2046      	movs	r0, #70	; 0x46
 800190a:	f7ff ff4f 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800190e:	200c      	movs	r0, #12
 8001910:	f7ff ff4c 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001914:	2017      	movs	r0, #23
 8001916:	f7ff ff49 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800191a:	2009      	movs	r0, #9
 800191c:	f7ff ff46 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001920:	200f      	movs	r0, #15
 8001922:	f7ff ff43 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001926:	2007      	movs	r0, #7
 8001928:	f7ff ff40 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff ff3d 	bl	80017ac <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001932:	20e1      	movs	r0, #225	; 0xe1
 8001934:	f7ff ff2c 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ff37 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800193e:	2019      	movs	r0, #25
 8001940:	f7ff ff34 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001944:	201b      	movs	r0, #27
 8001946:	f7ff ff31 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800194a:	2004      	movs	r0, #4
 800194c:	f7ff ff2e 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001950:	2010      	movs	r0, #16
 8001952:	f7ff ff2b 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001956:	2007      	movs	r0, #7
 8001958:	f7ff ff28 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800195c:	202a      	movs	r0, #42	; 0x2a
 800195e:	f7ff ff25 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001962:	2047      	movs	r0, #71	; 0x47
 8001964:	f7ff ff22 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001968:	2039      	movs	r0, #57	; 0x39
 800196a:	f7ff ff1f 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800196e:	2003      	movs	r0, #3
 8001970:	f7ff ff1c 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001974:	2006      	movs	r0, #6
 8001976:	f7ff ff19 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800197a:	2006      	movs	r0, #6
 800197c:	f7ff ff16 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001980:	2030      	movs	r0, #48	; 0x30
 8001982:	f7ff ff13 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001986:	2038      	movs	r0, #56	; 0x38
 8001988:	f7ff ff10 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800198c:	200f      	movs	r0, #15
 800198e:	f7ff ff0d 	bl	80017ac <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001992:	2036      	movs	r0, #54	; 0x36
 8001994:	f7ff fefc 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001998:	20c8      	movs	r0, #200	; 0xc8
 800199a:	f7ff ff07 	bl	80017ac <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800199e:	202a      	movs	r0, #42	; 0x2a
 80019a0:	f7ff fef6 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff ff01 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff fefe 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff fefb 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80019b6:	20ef      	movs	r0, #239	; 0xef
 80019b8:	f7ff fef8 	bl	80017ac <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80019bc:	202b      	movs	r0, #43	; 0x2b
 80019be:	f7ff fee7 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fef2 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff feef 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff feec 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80019d4:	203f      	movs	r0, #63	; 0x3f
 80019d6:	f7ff fee9 	bl	80017ac <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80019da:	203a      	movs	r0, #58	; 0x3a
 80019dc:	f7ff fed8 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80019e0:	2055      	movs	r0, #85	; 0x55
 80019e2:	f7ff fee3 	bl	80017ac <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80019e6:	2011      	movs	r0, #17
 80019e8:	f7ff fed2 	bl	8001790 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <LCD_REG_Config+0x230>)
 80019ee:	f7ff fe73 	bl	80016d8 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80019f2:	2029      	movs	r0, #41	; 0x29
 80019f4:	f7ff fecc 	bl	8001790 <LCD_Write_Cmd>
	
	
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	0002bffc 	.word	0x0002bffc

08001a00 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4604      	mov	r4, r0
 8001a08:	4608      	mov	r0, r1
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4623      	mov	r3, r4
 8001a10:	80fb      	strh	r3, [r7, #6]
 8001a12:	4603      	mov	r3, r0
 8001a14:	80bb      	strh	r3, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	807b      	strh	r3, [r7, #2]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001a1e:	202a      	movs	r0, #42	; 0x2a
 8001a20:	f7ff feb6 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff febe 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff feb8 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001a3c:	88fa      	ldrh	r2, [r7, #6]
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	4413      	add	r3, r2
 8001a42:	3b01      	subs	r3, #1
 8001a44:	121b      	asrs	r3, r3, #8
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff feaf 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001a4e:	88fa      	ldrh	r2, [r7, #6]
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	4413      	add	r3, r2
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fea4 	bl	80017ac <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001a64:	202b      	movs	r0, #43	; 0x2b
 8001a66:	f7ff fe93 	bl	8001790 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fe9b 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001a76:	88bb      	ldrh	r3, [r7, #4]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fe95 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001a82:	88ba      	ldrh	r2, [r7, #4]
 8001a84:	883b      	ldrh	r3, [r7, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	121b      	asrs	r3, r3, #8
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fe8c 	bl	80017ac <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001a94:	88ba      	ldrh	r2, [r7, #4]
 8001a96:	883b      	ldrh	r3, [r7, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fe81 	bl	80017ac <LCD_Write_Data>
	
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}

08001ab2 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001ac2:	202c      	movs	r0, #44	; 0x2c
 8001ac4:	f7ff fe64 	bl	8001790 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e006      	b.n	8001adc <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fe6b 	bl	80017ac <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3f4      	bcc.n	8001ace <LCD_FillColor+0x1c>
		
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001aee:	b590      	push	{r4, r7, lr}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4604      	mov	r4, r0
 8001af6:	4608      	mov	r0, r1
 8001af8:	4611      	mov	r1, r2
 8001afa:	461a      	mov	r2, r3
 8001afc:	4623      	mov	r3, r4
 8001afe:	80fb      	strh	r3, [r7, #6]
 8001b00:	4603      	mov	r3, r0
 8001b02:	80bb      	strh	r3, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001b0c:	883b      	ldrh	r3, [r7, #0]
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	88b9      	ldrh	r1, [r7, #4]
 8001b12:	88f8      	ldrh	r0, [r7, #6]
 8001b14:	f7ff ff74 	bl	8001a00 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	883a      	ldrh	r2, [r7, #0]
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	8b3b      	ldrh	r3, [r7, #24]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4610      	mov	r0, r2
 8001b28:	f7ff ffc3 	bl	8001ab2 <LCD_FillColor>
	
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}

08001b34 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	80bb      	strh	r3, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	3b20      	subs	r3, #32
 8001b4a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001b4c:	88b9      	ldrh	r1, [r7, #4]
 8001b4e:	88f8      	ldrh	r0, [r7, #6]
 8001b50:	2310      	movs	r3, #16
 8001b52:	2208      	movs	r2, #8
 8001b54:	f7ff ff54 	bl	8001a00 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001b58:	202c      	movs	r0, #44	; 0x2c
 8001b5a:	f7ff fe19 	bl	8001790 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73bb      	strb	r3, [r7, #14]
 8001b62:	e023      	b.n	8001bac <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001b64:	7b3a      	ldrb	r2, [r7, #12]
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	4914      	ldr	r1, [pc, #80]	; (8001bbc <LCD_DrawChar+0x88>)
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	440a      	add	r2, r1
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001b74:	2300      	movs	r3, #0
 8001b76:	737b      	strb	r3, [r7, #13]
 8001b78:	e012      	b.n	8001ba0 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001b84:	201f      	movs	r0, #31
 8001b86:	f7ff fe11 	bl	80017ac <LCD_Write_Data>
 8001b8a:	e003      	b.n	8001b94 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001b8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b90:	f7ff fe0c 	bl	80017ac <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	085b      	lsrs	r3, r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001b9a:	7b7b      	ldrb	r3, [r7, #13]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	737b      	strb	r3, [r7, #13]
 8001ba0:	7b7b      	ldrb	r3, [r7, #13]
 8001ba2:	2b07      	cmp	r3, #7
 8001ba4:	d9e9      	bls.n	8001b7a <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001ba6:	7bbb      	ldrb	r3, [r7, #14]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	73bb      	strb	r3, [r7, #14]
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	d9d8      	bls.n	8001b64 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	08009ba0 	.word	0x08009ba0

08001bc0 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	603a      	str	r2, [r7, #0]
 8001bca:	80fb      	strh	r3, [r7, #6]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001bd0:	e01c      	b.n	8001c0c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	2be8      	cmp	r3, #232	; 0xe8
 8001bd6:	d904      	bls.n	8001be2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	3310      	adds	r3, #16
 8001be0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001be2:	88bb      	ldrh	r3, [r7, #4]
 8001be4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001be8:	d903      	bls.n	8001bf2 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001bea:	2300      	movs	r3, #0
 8001bec:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	88b9      	ldrh	r1, [r7, #4]
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff9a 	bl	8001b34 <LCD_DrawChar>
		
		pStr ++;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	3308      	adds	r3, #8
 8001c0a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1de      	bne.n	8001bd2 <LCD_DrawString+0x12>
		
	}
	
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <set_time>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time(uint8_t hours, uint8_t minutes, uint8_t seconds){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	71bb      	strb	r3, [r7, #6]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	717b      	strb	r3, [r7, #5]
	/** Initialize RTC and set the Time and Date
	  */
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef DateToUpdate;
	sTime.Hours = hours;
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = minutes;
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = seconds;
 8001c3a:	797b      	ldrb	r3, [r7, #5]
 8001c3c:	73bb      	strb	r3, [r7, #14]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2201      	movs	r2, #1
 8001c44:	4619      	mov	r1, r3
 8001c46:	4813      	ldr	r0, [pc, #76]	; (8001c94 <set_time+0x74>)
 8001c48:	f002 fb9a 	bl	8004380 <HAL_RTC_SetTime>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <set_time+0x36>
	{
		Error_Handler();
 8001c52:	f000 fd87 	bl	8002764 <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001c56:	2304      	movs	r3, #4
 8001c58:	723b      	strb	r3, [r7, #8]
	DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 8001c5a:	2311      	movs	r3, #17
 8001c5c:	727b      	strb	r3, [r7, #9]
	DateToUpdate.Date = 0x24;
 8001c5e:	2324      	movs	r3, #36	; 0x24
 8001c60:	72bb      	strb	r3, [r7, #10]
	DateToUpdate.Year = 0x22;
 8001c62:	2322      	movs	r3, #34	; 0x22
 8001c64:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <set_time+0x74>)
 8001c70:	f002 fcf6 	bl	8004660 <HAL_RTC_SetDate>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <set_time+0x5e>
	{
		Error_Handler();
 8001c7a:	f000 fd73 	bl	8002764 <Error_Handler>
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xFFFF); // backup register
 8001c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c82:	2101      	movs	r1, #1
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <set_time+0x74>)
 8001c86:	f003 fa89 	bl	800519c <HAL_RTCEx_BKUPWrite>
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000020c 	.word	0x2000020c

08001c98 <set_alarm>:

void set_alarm(uint8_t hours, uint8_t minutes, uint8_t seconds){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	71bb      	strb	r3, [r7, #6]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	717b      	strb	r3, [r7, #5]
	/** Enable the Alarm A
	*/
	RTC_AlarmTypeDef sAlarm;
	sAlarm.AlarmTime.Hours = hours;
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = minutes;
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = seconds;
 8001cb2:	797b      	ldrb	r3, [r7, #5]
 8001cb4:	72bb      	strb	r3, [r7, #10]
	sAlarm.Alarm = RTC_ALARM_A;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <set_alarm+0x50>)
 8001cc4:	f002 fdd6 	bl	8004874 <HAL_RTC_SetAlarm>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <set_alarm+0x3a>
	{
		Error_Handler();
 8001cce:	f000 fd49 	bl	8002764 <Error_Handler>
	}
	HAL_RTC_SetAlarm(&hrtc, &sAlarm,RTC_FORMAT_BCD);
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <set_alarm+0x50>)
 8001cdc:	f002 fdca 	bl	8004874 <HAL_RTC_SetAlarm>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000020c 	.word	0x2000020c

08001cec <display_time>:

void display_time(void){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08e      	sub	sp, #56	; 0x38
 8001cf0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	char time_buffer[20];
	char date_buffer[20];
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	481c      	ldr	r0, [pc, #112]	; (8001d6c <display_time+0x80>)
 8001cfc:	f002 fd66 	bl	80047cc <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d04:	2200      	movs	r2, #0
 8001d06:	4619      	mov	r1, r3
 8001d08:	4818      	ldr	r0, [pc, #96]	; (8001d6c <display_time+0x80>)
 8001d0a:	f002 fbd1 	bl	80044b0 <HAL_RTC_GetTime>


	sprintf(date_buffer,"%02d-%02d-%02d",2000+gDate.Year, gDate.Month, gDate.Date);
 8001d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d12:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001d16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d20:	4638      	mov	r0, r7
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	460b      	mov	r3, r1
 8001d26:	4912      	ldr	r1, [pc, #72]	; (8001d70 <display_time+0x84>)
 8001d28:	f005 fc2e 	bl	8007588 <siprintf>
	sprintf(time_buffer,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001d2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d30:	461a      	mov	r2, r3
 8001d32:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001d36:	4619      	mov	r1, r3
 8001d38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d3c:	f107 0014 	add.w	r0, r7, #20
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	460b      	mov	r3, r1
 8001d44:	490b      	ldr	r1, [pc, #44]	; (8001d74 <display_time+0x88>)
 8001d46:	f005 fc1f 	bl	8007588 <siprintf>

	LCD_DrawString(20,10,date_buffer);
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	210a      	movs	r1, #10
 8001d50:	2014      	movs	r0, #20
 8001d52:	f7ff ff35 	bl	8001bc0 <LCD_DrawString>
	LCD_DrawString(20,30,time_buffer);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	211e      	movs	r1, #30
 8001d5e:	2014      	movs	r0, #20
 8001d60:	f7ff ff2e 	bl	8001bc0 <LCD_DrawString>

}
 8001d64:	bf00      	nop
 8001d66:	3730      	adds	r7, #48	; 0x30
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2000020c 	.word	0x2000020c
 8001d70:	08009acc 	.word	0x08009acc
 8001d74:	08009adc 	.word	0x08009adc

08001d78 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	alarm_on=1;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_RTC_AlarmAEventCallback+0x18>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	2000033c 	.word	0x2000033c

08001d94 <ring_alarm>:

void ring_alarm(void){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef aTime;
	HAL_RTC_GetAlarm(&hrtc, &aTime, RTC_ALARM_A, RTC_FORMAT_BIN);
 8001d9a:	f107 0108 	add.w	r1, r7, #8
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2200      	movs	r2, #0
 8001da2:	484e      	ldr	r0, [pc, #312]	; (8001edc <ring_alarm+0x148>)
 8001da4:	f002 feb8 	bl	8004b18 <HAL_RTC_GetAlarm>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	4619      	mov	r1, r3
 8001dae:	484b      	ldr	r0, [pc, #300]	; (8001edc <ring_alarm+0x148>)
 8001db0:	f002 fb7e 	bl	80044b0 <HAL_RTC_GetTime>

	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)){
 8001db4:	2110      	movs	r1, #16
 8001db6:	484a      	ldr	r0, [pc, #296]	; (8001ee0 <ring_alarm+0x14c>)
 8001db8:	f001 fc44 	bl	8003644 <HAL_GPIO_ReadPin>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <ring_alarm+0x3a>
		bonus_time+=5;
 8001dc2:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <ring_alarm+0x150>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3305      	adds	r3, #5
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <ring_alarm+0x150>)
 8001dcc:	701a      	strb	r2, [r3, #0]
	}
	if(bonus_time==0 && ringing==0){
 8001dce:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <ring_alarm+0x150>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d110      	bne.n	8001df8 <ring_alarm+0x64>
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <ring_alarm+0x154>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10c      	bne.n	8001df8 <ring_alarm+0x64>
		LCD_DrawString(20,70,"WAKE UP!!!");
 8001dde:	4a43      	ldr	r2, [pc, #268]	; (8001eec <ring_alarm+0x158>)
 8001de0:	2146      	movs	r1, #70	; 0x46
 8001de2:	2014      	movs	r0, #20
 8001de4:	f7ff feec 	bl	8001bc0 <LCD_DrawString>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dec:	4840      	ldr	r0, [pc, #256]	; (8001ef0 <ring_alarm+0x15c>)
 8001dee:	f001 fc58 	bl	80036a2 <HAL_GPIO_TogglePin>
		ringing = 1;
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <ring_alarm+0x154>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
	}
	if(bonus_time>0){
 8001df8:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <ring_alarm+0x150>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <ring_alarm+0x80>
		HAL_Delay(1000);
 8001e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e04:	f001 f816 	bl	8002e34 <HAL_Delay>
		bonus_time--;
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <ring_alarm+0x150>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <ring_alarm+0x150>)
 8001e12:	701a      	strb	r2, [r3, #0]
	}
	//HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//BUZZER
	//TESTING
	if(bonus_time && ringing==1){
 8001e14:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <ring_alarm+0x150>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00c      	beq.n	8001e36 <ring_alarm+0xa2>
 8001e1c:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <ring_alarm+0x154>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d108      	bne.n	8001e36 <ring_alarm+0xa2>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e28:	4831      	ldr	r0, [pc, #196]	; (8001ef0 <ring_alarm+0x15c>)
 8001e2a:	f001 fc3a 	bl	80036a2 <HAL_GPIO_TogglePin>
		ringing = 0;
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <ring_alarm+0x154>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
		if(ringing==1){
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
			ringing = 0;
		}
	}
}
 8001e34:	e04d      	b.n	8001ed2 <ring_alarm+0x13e>
	else if(aTime.AlarmTime.Seconds+30>=59){
 8001e36:	7abb      	ldrb	r3, [r7, #10]
 8001e38:	2b1c      	cmp	r3, #28
 8001e3a:	d92e      	bls.n	8001e9a <ring_alarm+0x106>
		if(gTime.Minutes>aTime.AlarmTime.Minutes && gTime.Seconds>=(aTime.AlarmTime.Seconds+30)%60){
 8001e3c:	797a      	ldrb	r2, [r7, #5]
 8001e3e:	7a7b      	ldrb	r3, [r7, #9]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d946      	bls.n	8001ed2 <ring_alarm+0x13e>
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	4618      	mov	r0, r3
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	f103 021e 	add.w	r2, r3, #30
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <ring_alarm+0x160>)
 8001e50:	fb83 1302 	smull	r1, r3, r3, r2
 8001e54:	4413      	add	r3, r2
 8001e56:	1159      	asrs	r1, r3, #5
 8001e58:	17d3      	asrs	r3, r2, #31
 8001e5a:	1ac9      	subs	r1, r1, r3
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	1a5b      	subs	r3, r3, r1
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	1ad1      	subs	r1, r2, r3
 8001e66:	4288      	cmp	r0, r1
 8001e68:	db33      	blt.n	8001ed2 <ring_alarm+0x13e>
			LCD_DrawString(20,70,"             ");
 8001e6a:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <ring_alarm+0x164>)
 8001e6c:	2146      	movs	r1, #70	; 0x46
 8001e6e:	2014      	movs	r0, #20
 8001e70:	f7ff fea6 	bl	8001bc0 <LCD_DrawString>
			alarm_on=0;
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <ring_alarm+0x168>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
			bonus_time=0;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <ring_alarm+0x150>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
			if(ringing==1){
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <ring_alarm+0x154>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d124      	bne.n	8001ed2 <ring_alarm+0x13e>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e8c:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <ring_alarm+0x15c>)
 8001e8e:	f001 fc08 	bl	80036a2 <HAL_GPIO_TogglePin>
				ringing = 0;
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <ring_alarm+0x154>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
}
 8001e98:	e01b      	b.n	8001ed2 <ring_alarm+0x13e>
	else if(gTime.Seconds>=aTime.AlarmTime.Seconds+30){
 8001e9a:	7abb      	ldrb	r3, [r7, #10]
 8001e9c:	331d      	adds	r3, #29
 8001e9e:	79ba      	ldrb	r2, [r7, #6]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	da16      	bge.n	8001ed2 <ring_alarm+0x13e>
		LCD_DrawString(20,70,"             ");
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <ring_alarm+0x164>)
 8001ea6:	2146      	movs	r1, #70	; 0x46
 8001ea8:	2014      	movs	r0, #20
 8001eaa:	f7ff fe89 	bl	8001bc0 <LCD_DrawString>
		alarm_on = 0;
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <ring_alarm+0x168>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
		bonus_time=0;
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <ring_alarm+0x150>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
		if(ringing==1){
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <ring_alarm+0x154>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <ring_alarm+0x13e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <ring_alarm+0x15c>)
 8001ec8:	f001 fbeb 	bl	80036a2 <HAL_GPIO_TogglePin>
			ringing = 0;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <ring_alarm+0x154>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000020c 	.word	0x2000020c
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	2000033e 	.word	0x2000033e
 8001ee8:	2000033d 	.word	0x2000033d
 8001eec:	08009aec 	.word	0x08009aec
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	88888889 	.word	0x88888889
 8001ef8:	08009af8 	.word	0x08009af8
 8001efc:	2000033c 	.word	0x2000033c

08001f00 <display_alarm_time>:

void display_alarm_time(void){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	; 0x38
 8001f04:	af02      	add	r7, sp, #8
	RTC_AlarmTypeDef aTime;
	HAL_RTC_GetAlarm(&hrtc, &aTime, RTC_ALARM_A, RTC_FORMAT_BIN);
 8001f06:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4815      	ldr	r0, [pc, #84]	; (8001f64 <display_alarm_time+0x64>)
 8001f10:	f002 fe02 	bl	8004b18 <HAL_RTC_GetAlarm>
	char atime_buffer[20];

	sprintf(atime_buffer,"Alarm Time: %02d:%02d:%02d",aTime.AlarmTime.Hours, aTime.AlarmTime.Minutes, aTime.AlarmTime.Seconds);
 8001f14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f24:	f107 0014 	add.w	r0, r7, #20
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	490e      	ldr	r1, [pc, #56]	; (8001f68 <display_alarm_time+0x68>)
 8001f2e:	f005 fb2b 	bl	8007588 <siprintf>
	char bonus_time_buffer[20];
	sprintf(bonus_time_buffer,"Bonus Time: %02d",bonus_time);
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <display_alarm_time+0x6c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	463b      	mov	r3, r7
 8001f3a:	490d      	ldr	r1, [pc, #52]	; (8001f70 <display_alarm_time+0x70>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f005 fb23 	bl	8007588 <siprintf>
	LCD_DrawString(20,50,atime_buffer);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	461a      	mov	r2, r3
 8001f48:	2132      	movs	r1, #50	; 0x32
 8001f4a:	2014      	movs	r0, #20
 8001f4c:	f7ff fe38 	bl	8001bc0 <LCD_DrawString>
	LCD_DrawString(20,90,bonus_time_buffer);
 8001f50:	463b      	mov	r3, r7
 8001f52:	461a      	mov	r2, r3
 8001f54:	215a      	movs	r1, #90	; 0x5a
 8001f56:	2014      	movs	r0, #20
 8001f58:	f7ff fe32 	bl	8001bc0 <LCD_DrawString>
}
 8001f5c:	bf00      	nop
 8001f5e:	3730      	adds	r7, #48	; 0x30
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000020c 	.word	0x2000020c
 8001f68:	08009b08 	.word	0x08009b08
 8001f6c:	2000033e 	.word	0x2000033e
 8001f70:	08009b24 	.word	0x08009b24

08001f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7a:	f000 fef9 	bl	8002d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f7e:	f000 f8ab 	bl	80020d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f82:	f000 fa81 	bl	8002488 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001f86:	f000 fb67 	bl	8002658 <MX_FSMC_Init>
  MX_TIM2_Init();
 8001f8a:	f000 f969 	bl	8002260 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f8e:	f000 f9db 	bl	8002348 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001f92:	f000 fa4f 	bl	8002434 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001f96:	f000 f8ff 	bl	8002198 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001f9a:	f7ff fbae 	bl	80016fa <LCD_INIT>
  //if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1) != 0xFFFF){
  set_time(0x0,0x0,0x0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff fe3c 	bl	8001c20 <set_time>
  //}
  set_alarm(0x0,0x0,0x5);
 8001fa8:	2205      	movs	r2, #5
 8001faa:	2100      	movs	r1, #0
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff fe73 	bl	8001c98 <set_alarm>
  DWT_Delay_Init();
 8001fb2:	f000 fe5f 	bl	8002c74 <DWT_Delay_Init>
  DHT_Init(GPIOA,GPIO_PIN_6);
 8001fb6:	2140      	movs	r1, #64	; 0x40
 8001fb8:	483e      	ldr	r0, [pc, #248]	; (80020b4 <main+0x140>)
 8001fba:	f7ff f839 	bl	8001030 <DHT_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001fbe:	210c      	movs	r1, #12
 8001fc0:	483d      	ldr	r0, [pc, #244]	; (80020b8 <main+0x144>)
 8001fc2:	f003 f9f9 	bl	80053b8 <HAL_TIM_PWM_Start>
  FAN_Init(&htim2,TIM_CHANNEL_4);
 8001fc6:	210c      	movs	r1, #12
 8001fc8:	483b      	ldr	r0, [pc, #236]	; (80020b8 <main+0x144>)
 8001fca:	f7ff fa15 	bl	80013f8 <FAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8001fce:	2064      	movs	r0, #100	; 0x64
 8001fd0:	f000 ff30 	bl	8002e34 <HAL_Delay>
	  if (HAL_UART_Receive(&huart3,(uint8_t*)rxString,7,200)==HAL_OK) {
 8001fd4:	23c8      	movs	r3, #200	; 0xc8
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	4938      	ldr	r1, [pc, #224]	; (80020bc <main+0x148>)
 8001fda:	4839      	ldr	r0, [pc, #228]	; (80020c0 <main+0x14c>)
 8001fdc:	f004 f8c3 	bl	8006166 <HAL_UART_Receive>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d13e      	bne.n	8002064 <main+0xf0>
		  if(checkFanON(rxString)) FAN_ON = true;
 8001fe6:	4835      	ldr	r0, [pc, #212]	; (80020bc <main+0x148>)
 8001fe8:	f7ff fa10 	bl	800140c <checkFanON>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <main+0x86>
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <main+0x150>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	e034      	b.n	8002064 <main+0xf0>
		  else if(checkFanOFF(rxString))FAN_ON = false;
 8001ffa:	4830      	ldr	r0, [pc, #192]	; (80020bc <main+0x148>)
 8001ffc:	f7ff fa22 	bl	8001444 <checkFanOFF>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <main+0x9a>
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <main+0x150>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e02a      	b.n	8002064 <main+0xf0>
		  else if(checkLcdON(rxString)) LCD_ON = true;
 800200e:	482b      	ldr	r0, [pc, #172]	; (80020bc <main+0x148>)
 8002010:	f7ff fa34 	bl	800147c <checkLcdON>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <main+0xae>
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <main+0x154>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e020      	b.n	8002064 <main+0xf0>
		  else if(checkLcdOFF(rxString))LCD_ON = false;
 8002022:	4826      	ldr	r0, [pc, #152]	; (80020bc <main+0x148>)
 8002024:	f7ff fa3e 	bl	80014a4 <checkLcdOFF>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <main+0xc2>
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <main+0x154>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e016      	b.n	8002064 <main+0xf0>
		  else if (checkSummary(rxString)){
 8002036:	4821      	ldr	r0, [pc, #132]	; (80020bc <main+0x148>)
 8002038:	f7ff fb38 	bl	80016ac <checkSummary>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d010      	beq.n	8002064 <main+0xf0>
			int size = buildSummary(FAN_ON, LCD_ON, strConfig);
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <main+0x150>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4a20      	ldr	r2, [pc, #128]	; (80020c8 <main+0x154>)
 8002048:	7811      	ldrb	r1, [r2, #0]
 800204a:	4a20      	ldr	r2, [pc, #128]	; (80020cc <main+0x158>)
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fa3f 	bl	80014d0 <buildSummary>
 8002052:	4603      	mov	r3, r0
 8002054:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart3, (uint8_t*)strConfig, size, 200);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	b29a      	uxth	r2, r3
 800205a:	23c8      	movs	r3, #200	; 0xc8
 800205c:	491b      	ldr	r1, [pc, #108]	; (80020cc <main+0x158>)
 800205e:	4818      	ldr	r0, [pc, #96]	; (80020c0 <main+0x14c>)
 8002060:	f003 ffef 	bl	8006042 <HAL_UART_Transmit>
		  }
	  }

	  if (!LCD_ON){
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <main+0x154>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	f083 0301 	eor.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11e      	bne.n	80020b0 <main+0x13c>
		  continue;
	  }
	  if (DHT_ON){
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <main+0x15c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00d      	beq.n	8002096 <main+0x122>
		  if(DHT_Check()){
 800207a:	f7ff f9af 	bl	80013dc <DHT_Check>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <main+0x122>
//				  DHT_Get_DI() % 10;
				  if (FAN_ON) {
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <main+0x150>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <main+0x122>
					  user_pwm_setvalue(&htim2, TIM_CHANNEL_4, 10);
 800208c:	220a      	movs	r2, #10
 800208e:	210c      	movs	r1, #12
 8002090:	4809      	ldr	r0, [pc, #36]	; (80020b8 <main+0x144>)
 8002092:	f000 fb45 	bl	8002720 <user_pwm_setvalue>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 DHT_Display();
 8002096:	f7ff f96b 	bl	8001370 <DHT_Display>
	 display_time();
 800209a:	f7ff fe27 	bl	8001cec <display_time>
	 display_alarm_time();
 800209e:	f7ff ff2f 	bl	8001f00 <display_alarm_time>

	 if(alarm_on){
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <main+0x160>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d091      	beq.n	8001fce <main+0x5a>
		 ring_alarm();
 80020aa:	f7ff fe73 	bl	8001d94 <ring_alarm>
 80020ae:	e78e      	b.n	8001fce <main+0x5a>
		  continue;
 80020b0:	bf00      	nop
	  HAL_Delay(100);
 80020b2:	e78c      	b.n	8001fce <main+0x5a>
 80020b4:	40010800 	.word	0x40010800
 80020b8:	20000220 	.word	0x20000220
 80020bc:	20000340 	.word	0x20000340
 80020c0:	200002b0 	.word	0x200002b0
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000001 	.word	0x20000001
 80020cc:	20000348 	.word	0x20000348
 80020d0:	20000002 	.word	0x20000002
 80020d4:	2000033c 	.word	0x2000033c

080020d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b096      	sub	sp, #88	; 0x58
 80020dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020e2:	2228      	movs	r2, #40	; 0x28
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fde6 	bl	8006cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]
 800210a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800210c:	2309      	movs	r3, #9
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002116:	2300      	movs	r3, #0
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800211a:	2301      	movs	r3, #1
 800211c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800211e:	2301      	movs	r3, #1
 8002120:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002122:	2302      	movs	r3, #2
 8002124:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800212c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002130:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002132:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002136:	4618      	mov	r0, r3
 8002138:	f001 fad8 	bl	80036ec <HAL_RCC_OscConfig>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002142:	f000 fb0f 	bl	8002764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002146:	230f      	movs	r3, #15
 8002148:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214a:	2302      	movs	r3, #2
 800214c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	2102      	movs	r1, #2
 8002162:	4618      	mov	r0, r3
 8002164:	f001 fd44 	bl	8003bf0 <HAL_RCC_ClockConfig>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800216e:	f000 faf9 	bl	8002764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002172:	2301      	movs	r3, #1
 8002174:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	4618      	mov	r0, r3
 8002180:	f001 fece 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800218a:	f000 faeb 	bl	8002764 <Error_Handler>
  }
}
 800218e:	bf00      	nop
 8002190:	3758      	adds	r7, #88	; 0x58
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	2100      	movs	r1, #0
 80021a4:	460a      	mov	r2, r1
 80021a6:	801a      	strh	r2, [r3, #0]
 80021a8:	460a      	mov	r2, r1
 80021aa:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80021b0:	463b      	mov	r3, r7
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <MX_RTC_Init+0xc0>)
 80021ba:	4a28      	ldr	r2, [pc, #160]	; (800225c <MX_RTC_Init+0xc4>)
 80021bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <MX_RTC_Init+0xc0>)
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <MX_RTC_Init+0xc0>)
 80021c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021cc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021ce:	4822      	ldr	r0, [pc, #136]	; (8002258 <MX_RTC_Init+0xc0>)
 80021d0:	f002 f840 	bl	8004254 <HAL_RTC_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80021da:	f000 fac3 	bl	8002764 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80021de:	2300      	movs	r3, #0
 80021e0:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	2201      	movs	r2, #1
 80021f0:	4619      	mov	r1, r3
 80021f2:	4819      	ldr	r0, [pc, #100]	; (8002258 <MX_RTC_Init+0xc0>)
 80021f4:	f002 f8c4 	bl	8004380 <HAL_RTC_SetTime>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80021fe:	f000 fab1 	bl	8002764 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002202:	2301      	movs	r3, #1
 8002204:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 8002206:	2311      	movs	r3, #17
 8002208:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x25;
 800220a:	2325      	movs	r3, #37	; 0x25
 800220c:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x22;
 800220e:	2322      	movs	r3, #34	; 0x22
 8002210:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002212:	f107 0308 	add.w	r3, r7, #8
 8002216:	2201      	movs	r2, #1
 8002218:	4619      	mov	r1, r3
 800221a:	480f      	ldr	r0, [pc, #60]	; (8002258 <MX_RTC_Init+0xc0>)
 800221c:	f002 fa20 	bl	8004660 <HAL_RTC_SetDate>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002226:	f000 fa9d 	bl	8002764 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800222a:	2300      	movs	r3, #0
 800222c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800222e:	2300      	movs	r3, #0
 8002230:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 8002232:	2330      	movs	r3, #48	; 0x30
 8002234:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800223a:	463b      	mov	r3, r7
 800223c:	2201      	movs	r2, #1
 800223e:	4619      	mov	r1, r3
 8002240:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_RTC_Init+0xc0>)
 8002242:	f002 fbb1 	bl	80049a8 <HAL_RTC_SetAlarm_IT>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800224c:	f000 fa8a 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	2000020c 	.word	0x2000020c
 800225c:	40002800 	.word	0x40002800

08002260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002274:	f107 0320 	add.w	r3, r7, #32
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
 800228c:	615a      	str	r2, [r3, #20]
 800228e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <MX_TIM2_Init+0xe4>)
 8002292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <MX_TIM2_Init+0xe4>)
 800229a:	2200      	movs	r2, #0
 800229c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022a6:	220a      	movs	r2, #10
 80022a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022b6:	4823      	ldr	r0, [pc, #140]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022b8:	f002 ffd7 	bl	800526a <HAL_TIM_Base_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80022c2:	f000 fa4f 	bl	8002764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d0:	4619      	mov	r1, r3
 80022d2:	481c      	ldr	r0, [pc, #112]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022d4:	f003 fa58 	bl	8005788 <HAL_TIM_ConfigClockSource>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80022de:	f000 fa41 	bl	8002764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022e2:	4818      	ldr	r0, [pc, #96]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022e4:	f003 f810 	bl	8005308 <HAL_TIM_PWM_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80022ee:	f000 fa39 	bl	8002764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022fa:	f107 0320 	add.w	r3, r7, #32
 80022fe:	4619      	mov	r1, r3
 8002300:	4810      	ldr	r0, [pc, #64]	; (8002344 <MX_TIM2_Init+0xe4>)
 8002302:	f003 fde5 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800230c:	f000 fa2a 	bl	8002764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002310:	2360      	movs	r3, #96	; 0x60
 8002312:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	220c      	movs	r2, #12
 8002324:	4619      	mov	r1, r3
 8002326:	4807      	ldr	r0, [pc, #28]	; (8002344 <MX_TIM2_Init+0xe4>)
 8002328:	f003 f970 	bl	800560c <HAL_TIM_PWM_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002332:	f000 fa17 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002336:	4803      	ldr	r0, [pc, #12]	; (8002344 <MX_TIM2_Init+0xe4>)
 8002338:	f000 faa8 	bl	800288c <HAL_TIM_MspPostInit>

}
 800233c:	bf00      	nop
 800233e:	3738      	adds	r7, #56	; 0x38
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000220 	.word	0x20000220

08002348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	; 0x38
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235c:	f107 0320 	add.w	r3, r7, #32
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
 8002374:	615a      	str	r2, [r3, #20]
 8002376:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002378:	4b2c      	ldr	r3, [pc, #176]	; (800242c <MX_TIM3_Init+0xe4>)
 800237a:	4a2d      	ldr	r2, [pc, #180]	; (8002430 <MX_TIM3_Init+0xe8>)
 800237c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800237e:	4b2b      	ldr	r3, [pc, #172]	; (800242c <MX_TIM3_Init+0xe4>)
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <MX_TIM3_Init+0xe4>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 800238a:	4b28      	ldr	r3, [pc, #160]	; (800242c <MX_TIM3_Init+0xe4>)
 800238c:	223f      	movs	r2, #63	; 0x3f
 800238e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002390:	4b26      	ldr	r3, [pc, #152]	; (800242c <MX_TIM3_Init+0xe4>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <MX_TIM3_Init+0xe4>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800239c:	4823      	ldr	r0, [pc, #140]	; (800242c <MX_TIM3_Init+0xe4>)
 800239e:	f002 ff64 	bl	800526a <HAL_TIM_Base_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80023a8:	f000 f9dc 	bl	8002764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b6:	4619      	mov	r1, r3
 80023b8:	481c      	ldr	r0, [pc, #112]	; (800242c <MX_TIM3_Init+0xe4>)
 80023ba:	f003 f9e5 	bl	8005788 <HAL_TIM_ConfigClockSource>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80023c4:	f000 f9ce 	bl	8002764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023c8:	4818      	ldr	r0, [pc, #96]	; (800242c <MX_TIM3_Init+0xe4>)
 80023ca:	f002 ff9d 	bl	8005308 <HAL_TIM_PWM_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80023d4:	f000 f9c6 	bl	8002764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023e0:	f107 0320 	add.w	r3, r7, #32
 80023e4:	4619      	mov	r1, r3
 80023e6:	4811      	ldr	r0, [pc, #68]	; (800242c <MX_TIM3_Init+0xe4>)
 80023e8:	f003 fd72 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80023f2:	f000 f9b7 	bl	8002764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f6:	2360      	movs	r3, #96	; 0x60
 80023f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80023fa:	230a      	movs	r3, #10
 80023fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	2204      	movs	r2, #4
 800240a:	4619      	mov	r1, r3
 800240c:	4807      	ldr	r0, [pc, #28]	; (800242c <MX_TIM3_Init+0xe4>)
 800240e:	f003 f8fd 	bl	800560c <HAL_TIM_PWM_ConfigChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002418:	f000 f9a4 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800241c:	4803      	ldr	r0, [pc, #12]	; (800242c <MX_TIM3_Init+0xe4>)
 800241e:	f000 fa35 	bl	800288c <HAL_TIM_MspPostInit>

}
 8002422:	bf00      	nop
 8002424:	3738      	adds	r7, #56	; 0x38
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000268 	.word	0x20000268
 8002430:	40000400 	.word	0x40000400

08002434 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_USART3_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002440:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800246c:	f003 fd9c 	bl	8005fa8 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f000 f975 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200002b0 	.word	0x200002b0
 8002484:	40004800 	.word	0x40004800

08002488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248e:	f107 0318 	add.w	r3, r7, #24
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <MX_GPIO_Init+0x1b8>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a67      	ldr	r2, [pc, #412]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024a2:	f043 0310 	orr.w	r3, r3, #16
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b65      	ldr	r3, [pc, #404]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b4:	4b62      	ldr	r3, [pc, #392]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a61      	ldr	r2, [pc, #388]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6193      	str	r3, [r2, #24]
 80024c0:	4b5f      	ldr	r3, [pc, #380]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a5b      	ldr	r2, [pc, #364]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024e4:	4b56      	ldr	r3, [pc, #344]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	4a55      	ldr	r2, [pc, #340]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ee:	6193      	str	r3, [r2, #24]
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <MX_GPIO_Init+0x1b8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a4f      	ldr	r2, [pc, #316]	; (8002640 <MX_GPIO_Init+0x1b8>)
 8002502:	f043 0320 	orr.w	r3, r3, #32
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <MX_GPIO_Init+0x1b8>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8002514:	2201      	movs	r2, #1
 8002516:	2140      	movs	r1, #64	; 0x40
 8002518:	484a      	ldr	r0, [pc, #296]	; (8002644 <MX_GPIO_Init+0x1bc>)
 800251a:	f001 f8aa 	bl	8003672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	2101      	movs	r1, #1
 8002522:	4849      	ldr	r0, [pc, #292]	; (8002648 <MX_GPIO_Init+0x1c0>)
 8002524:	f001 f8a5 	bl	8003672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	2144      	movs	r1, #68	; 0x44
 800252c:	4846      	ldr	r0, [pc, #280]	; (8002648 <MX_GPIO_Init+0x1c0>)
 800252e:	f001 f8a0 	bl	8003672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002532:	2200      	movs	r2, #0
 8002534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002538:	4844      	ldr	r0, [pc, #272]	; (800264c <MX_GPIO_Init+0x1c4>)
 800253a:	f001 f89a 	bl	8003672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800253e:	2200      	movs	r2, #0
 8002540:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8002544:	483f      	ldr	r0, [pc, #252]	; (8002644 <MX_GPIO_Init+0x1bc>)
 8002546:	f001 f894 	bl	8003672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800254a:	2200      	movs	r2, #0
 800254c:	2102      	movs	r1, #2
 800254e:	4840      	ldr	r0, [pc, #256]	; (8002650 <MX_GPIO_Init+0x1c8>)
 8002550:	f001 f88f 	bl	8003672 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12;
 8002554:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255a:	2301      	movs	r3, #1
 800255c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 0318 	add.w	r3, r7, #24
 800256a:	4619      	mov	r1, r3
 800256c:	4835      	ldr	r0, [pc, #212]	; (8002644 <MX_GPIO_Init+0x1bc>)
 800256e:	f000 fed5 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002572:	2310      	movs	r3, #16
 8002574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800257e:	f107 0318 	add.w	r3, r7, #24
 8002582:	4619      	mov	r1, r3
 8002584:	4833      	ldr	r0, [pc, #204]	; (8002654 <MX_GPIO_Init+0x1cc>)
 8002586:	f000 fec9 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800258a:	2301      	movs	r3, #1
 800258c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258e:	2301      	movs	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002596:	2301      	movs	r3, #1
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259a:	f107 0318 	add.w	r3, r7, #24
 800259e:	4619      	mov	r1, r3
 80025a0:	4829      	ldr	r0, [pc, #164]	; (8002648 <MX_GPIO_Init+0x1c0>)
 80025a2:	f000 febb 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025a6:	2304      	movs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025aa:	2301      	movs	r3, #1
 80025ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2302      	movs	r3, #2
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	f107 0318 	add.w	r3, r7, #24
 80025ba:	4619      	mov	r1, r3
 80025bc:	4822      	ldr	r0, [pc, #136]	; (8002648 <MX_GPIO_Init+0x1c0>)
 80025be:	f000 fead 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c8:	2301      	movs	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d4:	f107 0318 	add.w	r3, r7, #24
 80025d8:	4619      	mov	r1, r3
 80025da:	481c      	ldr	r0, [pc, #112]	; (800264c <MX_GPIO_Init+0x1c4>)
 80025dc:	f000 fe9e 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80025e0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80025e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2302      	movs	r3, #2
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 0318 	add.w	r3, r7, #24
 80025f6:	4619      	mov	r1, r3
 80025f8:	4812      	ldr	r0, [pc, #72]	; (8002644 <MX_GPIO_Init+0x1bc>)
 80025fa:	f000 fe8f 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025fe:	2340      	movs	r3, #64	; 0x40
 8002600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260e:	f107 0318 	add.w	r3, r7, #24
 8002612:	4619      	mov	r1, r3
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <MX_GPIO_Init+0x1c0>)
 8002616:	f000 fe81 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800261a:	2302      	movs	r3, #2
 800261c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261e:	2301      	movs	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800262a:	f107 0318 	add.w	r3, r7, #24
 800262e:	4619      	mov	r1, r3
 8002630:	4807      	ldr	r0, [pc, #28]	; (8002650 <MX_GPIO_Init+0x1c8>)
 8002632:	f000 fe73 	bl	800331c <HAL_GPIO_Init>

}
 8002636:	bf00      	nop
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	40010800 	.word	0x40010800
 8002648:	40010c00 	.word	0x40010c00
 800264c:	40011400 	.word	0x40011400
 8002650:	40011800 	.word	0x40011800
 8002654:	40011000 	.word	0x40011000

08002658 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
 800266c:	615a      	str	r2, [r3, #20]
 800266e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002670:	4b28      	ldr	r3, [pc, #160]	; (8002714 <MX_FSMC_Init+0xbc>)
 8002672:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002676:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <MX_FSMC_Init+0xbc>)
 800267a:	4a27      	ldr	r2, [pc, #156]	; (8002718 <MX_FSMC_Init+0xc0>)
 800267c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <MX_FSMC_Init+0xbc>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <MX_FSMC_Init+0xbc>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <MX_FSMC_Init+0xbc>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <MX_FSMC_Init+0xbc>)
 8002692:	2210      	movs	r2, #16
 8002694:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002696:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <MX_FSMC_Init+0xbc>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <MX_FSMC_Init+0xbc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <MX_FSMC_Init+0xbc>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <MX_FSMC_Init+0xbc>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <MX_FSMC_Init+0xbc>)
 80026b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <MX_FSMC_Init+0xbc>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <MX_FSMC_Init+0xbc>)
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <MX_FSMC_Init+0xbc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_FSMC_Init+0xbc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80026ce:	230f      	movs	r3, #15
 80026d0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80026d2:	230f      	movs	r3, #15
 80026d4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80026d6:	23ff      	movs	r3, #255	; 0xff
 80026d8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80026da:	230f      	movs	r3, #15
 80026dc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80026de:	2310      	movs	r3, #16
 80026e0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80026e2:	2311      	movs	r3, #17
 80026e4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	4619      	mov	r1, r3
 80026f0:	4808      	ldr	r0, [pc, #32]	; (8002714 <MX_FSMC_Init+0xbc>)
 80026f2:	f002 fd6d 	bl	80051d0 <HAL_SRAM_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80026fc:	f000 f832 	bl	8002764 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <MX_FSMC_Init+0xc4>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4a05      	ldr	r2, [pc, #20]	; (800271c <MX_FSMC_Init+0xc4>)
 8002706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800270a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800270c:	bf00      	nop
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200002f4 	.word	0x200002f4
 8002718:	a0000104 	.word	0xa0000104
 800271c:	40010000 	.word	0x40010000

08002720 <user_pwm_setvalue>:

/* USER CODE BEGIN 4 */
void user_pwm_setvalue(TIM_HandleTypeDef *htim, uint32_t TIM_CHANNEL, uint16_t value)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08c      	sub	sp, #48	; 0x30
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;
    HAL_TIM_PWM_Stop(htim, TIM_CHANNEL);
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f002 fefb 	bl	800552c <HAL_TIM_PWM_Stop>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002736:	2360      	movs	r3, #96	; 0x60
 8002738:	617b      	str	r3, [r7, #20]
    sConfigOC.Pulse = value;
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	4619      	mov	r1, r3
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f002 ff5c 	bl	800560c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL);
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f002 fe2e 	bl	80053b8 <HAL_TIM_PWM_Start>
}
 800275c:	bf00      	nop
 800275e:	3730      	adds	r7, #48	; 0x30
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002768:	b672      	cpsid	i
}
 800276a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800276c:	e7fe      	b.n	800276c <Error_Handler+0x8>
	...

08002770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_MspInit+0x5c>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	4a14      	ldr	r2, [pc, #80]	; (80027cc <HAL_MspInit+0x5c>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6193      	str	r3, [r2, #24]
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_MspInit+0x5c>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_MspInit+0x5c>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_MspInit+0x5c>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_MspInit+0x5c>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_MspInit+0x60>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_MspInit+0x60>)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40010000 	.word	0x40010000

080027d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <HAL_RTC_MspInit+0x4c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d118      	bne.n	8002818 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80027e6:	f000 ff75 	bl	80036d4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_RTC_MspInit+0x50>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <HAL_RTC_MspInit+0x50>)
 80027f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027f4:	61d3      	str	r3, [r2, #28]
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RTC_MspInit+0x50>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RTC_MspInit+0x54>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002808:	2200      	movs	r2, #0
 800280a:	2100      	movs	r1, #0
 800280c:	2029      	movs	r0, #41	; 0x29
 800280e:	f000 fc0c 	bl	800302a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002812:	2029      	movs	r0, #41	; 0x29
 8002814:	f000 fc25 	bl	8003062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40002800 	.word	0x40002800
 8002824:	40021000 	.word	0x40021000
 8002828:	4242043c 	.word	0x4242043c

0800282c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d10c      	bne.n	8002858 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_TIM_Base_MspInit+0x58>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a10      	ldr	r2, [pc, #64]	; (8002884 <HAL_TIM_Base_MspInit+0x58>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_TIM_Base_MspInit+0x58>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002856:	e010      	b.n	800287a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_TIM_Base_MspInit+0x5c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10b      	bne.n	800287a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_TIM_Base_MspInit+0x58>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_TIM_Base_MspInit+0x58>)
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	61d3      	str	r3, [r2, #28]
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_TIM_Base_MspInit+0x58>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40021000 	.word	0x40021000
 8002888:	40000400 	.word	0x40000400

0800288c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028aa:	d118      	bne.n	80028de <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <HAL_TIM_MspPostInit+0x94>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <HAL_TIM_MspPostInit+0x94>)
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_TIM_MspPostInit+0x94>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028c4:	2308      	movs	r3, #8
 80028c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	4619      	mov	r1, r3
 80028d6:	4813      	ldr	r0, [pc, #76]	; (8002924 <HAL_TIM_MspPostInit+0x98>)
 80028d8:	f000 fd20 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028dc:	e01c      	b.n	8002918 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a11      	ldr	r2, [pc, #68]	; (8002928 <HAL_TIM_MspPostInit+0x9c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d117      	bne.n	8002918 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_TIM_MspPostInit+0x94>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <HAL_TIM_MspPostInit+0x94>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_TIM_MspPostInit+0x94>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	4619      	mov	r1, r3
 8002912:	4804      	ldr	r0, [pc, #16]	; (8002924 <HAL_TIM_MspPostInit+0x98>)
 8002914:	f000 fd02 	bl	800331c <HAL_GPIO_Init>
}
 8002918:	bf00      	nop
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	40010800 	.word	0x40010800
 8002928:	40000400 	.word	0x40000400

0800292c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a20      	ldr	r2, [pc, #128]	; (80029c8 <HAL_UART_MspInit+0x9c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d139      	bne.n	80029c0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800294c:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <HAL_UART_MspInit+0xa0>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_UART_MspInit+0xa0>)
 8002952:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002956:	61d3      	str	r3, [r2, #28]
 8002958:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <HAL_UART_MspInit+0xa0>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_UART_MspInit+0xa0>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <HAL_UART_MspInit+0xa0>)
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6193      	str	r3, [r2, #24]
 8002970:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_UART_MspInit+0xa0>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800297c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002986:	2303      	movs	r3, #3
 8002988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298a:	f107 0310 	add.w	r3, r7, #16
 800298e:	4619      	mov	r1, r3
 8002990:	480f      	ldr	r0, [pc, #60]	; (80029d0 <HAL_UART_MspInit+0xa4>)
 8002992:	f000 fcc3 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002996:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800299a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	4619      	mov	r1, r3
 80029aa:	4809      	ldr	r0, [pc, #36]	; (80029d0 <HAL_UART_MspInit+0xa4>)
 80029ac:	f000 fcb6 	bl	800331c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2100      	movs	r1, #0
 80029b4:	2027      	movs	r0, #39	; 0x27
 80029b6:	f000 fb38 	bl	800302a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029ba:	2027      	movs	r0, #39	; 0x27
 80029bc:	f000 fb51 	bl	8003062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40004800 	.word	0x40004800
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010c00 	.word	0x40010c00

080029d4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80029e8:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_FSMC_MspInit+0x78>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d129      	bne.n	8002a44 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_FSMC_MspInit+0x78>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80029f6:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_FSMC_MspInit+0x7c>)
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <HAL_FSMC_MspInit+0x7c>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a00:	6153      	str	r3, [r2, #20]
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_FSMC_MspInit+0x7c>)
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002a0e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002a12:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a1c:	f107 0308 	add.w	r3, r7, #8
 8002a20:	4619      	mov	r1, r3
 8002a22:	480c      	ldr	r0, [pc, #48]	; (8002a54 <HAL_FSMC_MspInit+0x80>)
 8002a24:	f000 fc7a 	bl	800331c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002a28:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002a2c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a32:	2303      	movs	r3, #3
 8002a34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a36:	f107 0308 	add.w	r3, r7, #8
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4806      	ldr	r0, [pc, #24]	; (8002a58 <HAL_FSMC_MspInit+0x84>)
 8002a3e:	f000 fc6d 	bl	800331c <HAL_GPIO_Init>
 8002a42:	e000      	b.n	8002a46 <HAL_FSMC_MspInit+0x72>
    return;
 8002a44:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200003ac 	.word	0x200003ac
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40011800 	.word	0x40011800
 8002a58:	40011400 	.word	0x40011400

08002a5c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002a64:	f7ff ffb6 	bl	80029d4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <NMI_Handler+0x4>

08002a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <HardFault_Handler+0x4>

08002a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <MemManage_Handler+0x4>

08002a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <BusFault_Handler+0x4>

08002a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <UsageFault_Handler+0x4>

08002a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab6:	f000 f9a1 	bl	8002dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ac4:	4802      	ldr	r0, [pc, #8]	; (8002ad0 <USART3_IRQHandler+0x10>)
 8002ac6:	f003 fbf1 	bl	80062ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200002b0 	.word	0x200002b0

08002ad4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002ad8:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <RTC_Alarm_IRQHandler+0x10>)
 8002ada:	f002 f893 	bl	8004c04 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000020c 	.word	0x2000020c

08002ae8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
	return 1;
 8002aec:	2301      	movs	r3, #1
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <_kill>:

int _kill(int pid, int sig)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b00:	f004 f8a2 	bl	8006c48 <__errno>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2216      	movs	r2, #22
 8002b08:	601a      	str	r2, [r3, #0]
	return -1;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_exit>:

void _exit (int status)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ffe7 	bl	8002af6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b28:	e7fe      	b.n	8002b28 <_exit+0x12>

08002b2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e00a      	b.n	8002b52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b3c:	f3af 8000 	nop.w
 8002b40:	4601      	mov	r1, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	60ba      	str	r2, [r7, #8]
 8002b48:	b2ca      	uxtb	r2, r1
 8002b4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	dbf0      	blt.n	8002b3c <_read+0x12>
	}

return len;
 8002b5a:	687b      	ldr	r3, [r7, #4]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e009      	b.n	8002b8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	60ba      	str	r2, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dbf1      	blt.n	8002b76 <_write+0x12>
	}
	return len;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_close>:

int _close(int file)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <_isatty>:

int _isatty(int file)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	return 1;
 8002bd8:	2301      	movs	r3, #1
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
	return 0;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <_sbrk+0x5c>)
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <_sbrk+0x60>)
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <_sbrk+0x64>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <_sbrk+0x68>)
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d207      	bcs.n	8002c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c2c:	f004 f80c 	bl	8006c48 <__errno>
 8002c30:	4603      	mov	r3, r0
 8002c32:	220c      	movs	r2, #12
 8002c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c3a:	e009      	b.n	8002c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <_sbrk+0x64>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <_sbrk+0x64>)
 8002c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20010000 	.word	0x20010000
 8002c5c:	00000400 	.word	0x00000400
 8002c60:	200003b0 	.word	0x200003b0
 8002c64:	200003c8 	.word	0x200003c8

08002c68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <DWT_Delay_Init>:

#include "utility.h"

uint32_t DWT_Delay_Init(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <DWT_Delay_Init+0x58>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <DWT_Delay_Init+0x58>)
 8002c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c82:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <DWT_Delay_Init+0x58>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <DWT_Delay_Init+0x58>)
 8002c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <DWT_Delay_Init+0x5c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <DWT_Delay_Init+0x5c>)
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <DWT_Delay_Init+0x5c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <DWT_Delay_Init+0x5c>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <DWT_Delay_Init+0x5c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8002cae:	bf00      	nop
    __ASM volatile ("NOP");
 8002cb0:	bf00      	nop
    __ASM volatile ("NOP");
 8002cb2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <DWT_Delay_Init+0x5c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8002cc0:	2301      	movs	r3, #1
    }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e000edf0 	.word	0xe000edf0
 8002cd0:	e0001000 	.word	0xe0001000

08002cd4 <DelayMicroSeconds>:

void DelayMicroSeconds(volatile uint32_t au32_microseconds)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <DelayMicroSeconds+0x48>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8002ce2:	f001 f8cd 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <DelayMicroSeconds+0x4c>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	0c9b      	lsrs	r3, r3, #18
 8002cf0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8002cfc:	bf00      	nop
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <DelayMicroSeconds+0x48>)
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad2      	subs	r2, r2, r3
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1acb      	subs	r3, r1, r3
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d3f6      	bcc.n	8002cfe <DelayMicroSeconds+0x2a>
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e0001000 	.word	0xe0001000
 8002d20:	431bde83 	.word	0x431bde83

08002d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d26:	490d      	ldr	r1, [pc, #52]	; (8002d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d28:	4a0d      	ldr	r2, [pc, #52]	; (8002d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d2c:	e002      	b.n	8002d34 <LoopCopyDataInit>

08002d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d32:	3304      	adds	r3, #4

08002d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d38:	d3f9      	bcc.n	8002d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d3c:	4c0a      	ldr	r4, [pc, #40]	; (8002d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d40:	e001      	b.n	8002d46 <LoopFillZerobss>

08002d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d44:	3204      	adds	r2, #4

08002d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d48:	d3fb      	bcc.n	8002d42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d4a:	f7ff ff8d 	bl	8002c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f003 ff81 	bl	8006c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d52:	f7ff f90f 	bl	8001f74 <main>
  bx lr
 8002d56:	4770      	bx	lr
  ldr r0, =_sdata
 8002d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d5c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d60:	0800a58c 	.word	0x0800a58c
  ldr r2, =_sbss
 8002d64:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d68:	200003c8 	.word	0x200003c8

08002d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d6c:	e7fe      	b.n	8002d6c <ADC1_2_IRQHandler>
	...

08002d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_Init+0x28>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <HAL_Init+0x28>)
 8002d7a:	f043 0310 	orr.w	r3, r3, #16
 8002d7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d80:	2003      	movs	r0, #3
 8002d82:	f000 f947 	bl	8003014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d86:	200f      	movs	r0, #15
 8002d88:	f000 f808 	bl	8002d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8c:	f7ff fcf0 	bl	8002770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40022000 	.word	0x40022000

08002d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_InitTick+0x54>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_InitTick+0x58>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f95f 	bl	800307e <HAL_SYSTICK_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00e      	b.n	8002de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b0f      	cmp	r3, #15
 8002dce:	d80a      	bhi.n	8002de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd8:	f000 f927 	bl	800302a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ddc:	4a06      	ldr	r2, [pc, #24]	; (8002df8 <HAL_InitTick+0x5c>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000004 	.word	0x20000004
 8002df4:	2000000c 	.word	0x2000000c
 8002df8:	20000008 	.word	0x20000008

08002dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_IncTick+0x1c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_IncTick+0x20>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a03      	ldr	r2, [pc, #12]	; (8002e1c <HAL_IncTick+0x20>)
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	2000000c 	.word	0x2000000c
 8002e1c:	200003b4 	.word	0x200003b4

08002e20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return uwTick;
 8002e24:	4b02      	ldr	r3, [pc, #8]	; (8002e30 <HAL_GetTick+0x10>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	200003b4 	.word	0x200003b4

08002e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e4c:	d005      	beq.n	8002e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_Delay+0x44>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e5a:	bf00      	nop
 8002e5c:	f7ff ffe0 	bl	8002e20 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f7      	bhi.n	8002e5c <HAL_Delay+0x28>
  {
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000000c 	.word	0x2000000c

08002e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eae:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	60d3      	str	r3, [r2, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <__NVIC_GetPriorityGrouping+0x18>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	f003 0307 	and.w	r3, r3, #7
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	db0b      	blt.n	8002f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	f003 021f 	and.w	r2, r3, #31
 8002ef8:	4906      	ldr	r1, [pc, #24]	; (8002f14 <__NVIC_EnableIRQ+0x34>)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2001      	movs	r0, #1
 8002f02:	fa00 f202 	lsl.w	r2, r0, r2
 8002f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	db0a      	blt.n	8002f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	490c      	ldr	r1, [pc, #48]	; (8002f64 <__NVIC_SetPriority+0x4c>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	0112      	lsls	r2, r2, #4
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f40:	e00a      	b.n	8002f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4908      	ldr	r1, [pc, #32]	; (8002f68 <__NVIC_SetPriority+0x50>)
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	3b04      	subs	r3, #4
 8002f50:	0112      	lsls	r2, r2, #4
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	440b      	add	r3, r1
 8002f56:	761a      	strb	r2, [r3, #24]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000e100 	.word	0xe000e100
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	bf28      	it	cs
 8002f8a:	2304      	movcs	r3, #4
 8002f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d902      	bls.n	8002f9c <NVIC_EncodePriority+0x30>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3b03      	subs	r3, #3
 8002f9a:	e000      	b.n	8002f9e <NVIC_EncodePriority+0x32>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	401a      	ands	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43d9      	mvns	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	4313      	orrs	r3, r2
         );
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe0:	d301      	bcc.n	8002fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00f      	b.n	8003006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <SysTick_Config+0x40>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fee:	210f      	movs	r1, #15
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ff4:	f7ff ff90 	bl	8002f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <SysTick_Config+0x40>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffe:	4b04      	ldr	r3, [pc, #16]	; (8003010 <SysTick_Config+0x40>)
 8003000:	2207      	movs	r2, #7
 8003002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	e000e010 	.word	0xe000e010

08003014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff2d 	bl	8002e7c <__NVIC_SetPriorityGrouping>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800303c:	f7ff ff42 	bl	8002ec4 <__NVIC_GetPriorityGrouping>
 8003040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	6978      	ldr	r0, [r7, #20]
 8003048:	f7ff ff90 	bl	8002f6c <NVIC_EncodePriority>
 800304c:	4602      	mov	r2, r0
 800304e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff5f 	bl	8002f18 <__NVIC_SetPriority>
}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff35 	bl	8002ee0 <__NVIC_EnableIRQ>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ffa2 	bl	8002fd0 <SysTick_Config>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d008      	beq.n	80030be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2204      	movs	r2, #4
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e020      	b.n	8003100 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 020e 	bic.w	r2, r2, #14
 80030cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e6:	2101      	movs	r1, #1
 80030e8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
	...

0800310c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800311e:	2b02      	cmp	r3, #2
 8003120:	d005      	beq.n	800312e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2204      	movs	r2, #4
 8003126:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e0d6      	b.n	80032dc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 020e 	bic.w	r2, r2, #14
 800313c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	4b64      	ldr	r3, [pc, #400]	; (80032e8 <HAL_DMA_Abort_IT+0x1dc>)
 8003156:	429a      	cmp	r2, r3
 8003158:	d958      	bls.n	800320c <HAL_DMA_Abort_IT+0x100>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a63      	ldr	r2, [pc, #396]	; (80032ec <HAL_DMA_Abort_IT+0x1e0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d04f      	beq.n	8003204 <HAL_DMA_Abort_IT+0xf8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a61      	ldr	r2, [pc, #388]	; (80032f0 <HAL_DMA_Abort_IT+0x1e4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d048      	beq.n	8003200 <HAL_DMA_Abort_IT+0xf4>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a60      	ldr	r2, [pc, #384]	; (80032f4 <HAL_DMA_Abort_IT+0x1e8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d040      	beq.n	80031fa <HAL_DMA_Abort_IT+0xee>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a5e      	ldr	r2, [pc, #376]	; (80032f8 <HAL_DMA_Abort_IT+0x1ec>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d038      	beq.n	80031f4 <HAL_DMA_Abort_IT+0xe8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a5d      	ldr	r2, [pc, #372]	; (80032fc <HAL_DMA_Abort_IT+0x1f0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d030      	beq.n	80031ee <HAL_DMA_Abort_IT+0xe2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a5b      	ldr	r2, [pc, #364]	; (8003300 <HAL_DMA_Abort_IT+0x1f4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d028      	beq.n	80031e8 <HAL_DMA_Abort_IT+0xdc>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a53      	ldr	r2, [pc, #332]	; (80032e8 <HAL_DMA_Abort_IT+0x1dc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d020      	beq.n	80031e2 <HAL_DMA_Abort_IT+0xd6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a57      	ldr	r2, [pc, #348]	; (8003304 <HAL_DMA_Abort_IT+0x1f8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_DMA_Abort_IT+0xd2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a56      	ldr	r2, [pc, #344]	; (8003308 <HAL_DMA_Abort_IT+0x1fc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d012      	beq.n	80031da <HAL_DMA_Abort_IT+0xce>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a54      	ldr	r2, [pc, #336]	; (800330c <HAL_DMA_Abort_IT+0x200>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00a      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xc8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a53      	ldr	r2, [pc, #332]	; (8003310 <HAL_DMA_Abort_IT+0x204>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d102      	bne.n	80031ce <HAL_DMA_Abort_IT+0xc2>
 80031c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031cc:	e01b      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 80031ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031d2:	e018      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 80031d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d8:	e015      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 80031da:	2310      	movs	r3, #16
 80031dc:	e013      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 80031de:	2301      	movs	r3, #1
 80031e0:	e011      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 80031e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031e6:	e00e      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 80031e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031ec:	e00b      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 80031ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031f2:	e008      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 80031f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f8:	e005      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 80031fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031fe:	e002      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 8003200:	2310      	movs	r3, #16
 8003202:	e000      	b.n	8003206 <HAL_DMA_Abort_IT+0xfa>
 8003204:	2301      	movs	r3, #1
 8003206:	4a43      	ldr	r2, [pc, #268]	; (8003314 <HAL_DMA_Abort_IT+0x208>)
 8003208:	6053      	str	r3, [r2, #4]
 800320a:	e057      	b.n	80032bc <HAL_DMA_Abort_IT+0x1b0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a36      	ldr	r2, [pc, #216]	; (80032ec <HAL_DMA_Abort_IT+0x1e0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d04f      	beq.n	80032b6 <HAL_DMA_Abort_IT+0x1aa>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a35      	ldr	r2, [pc, #212]	; (80032f0 <HAL_DMA_Abort_IT+0x1e4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d048      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x1a6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a33      	ldr	r2, [pc, #204]	; (80032f4 <HAL_DMA_Abort_IT+0x1e8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d040      	beq.n	80032ac <HAL_DMA_Abort_IT+0x1a0>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a32      	ldr	r2, [pc, #200]	; (80032f8 <HAL_DMA_Abort_IT+0x1ec>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d038      	beq.n	80032a6 <HAL_DMA_Abort_IT+0x19a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a30      	ldr	r2, [pc, #192]	; (80032fc <HAL_DMA_Abort_IT+0x1f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d030      	beq.n	80032a0 <HAL_DMA_Abort_IT+0x194>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <HAL_DMA_Abort_IT+0x1f4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d028      	beq.n	800329a <HAL_DMA_Abort_IT+0x18e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <HAL_DMA_Abort_IT+0x1dc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d020      	beq.n	8003294 <HAL_DMA_Abort_IT+0x188>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <HAL_DMA_Abort_IT+0x1f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d019      	beq.n	8003290 <HAL_DMA_Abort_IT+0x184>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a29      	ldr	r2, [pc, #164]	; (8003308 <HAL_DMA_Abort_IT+0x1fc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d012      	beq.n	800328c <HAL_DMA_Abort_IT+0x180>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a28      	ldr	r2, [pc, #160]	; (800330c <HAL_DMA_Abort_IT+0x200>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00a      	beq.n	8003286 <HAL_DMA_Abort_IT+0x17a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a26      	ldr	r2, [pc, #152]	; (8003310 <HAL_DMA_Abort_IT+0x204>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d102      	bne.n	8003280 <HAL_DMA_Abort_IT+0x174>
 800327a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327e:	e01b      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 8003280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003284:	e018      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 8003286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800328a:	e015      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 800328c:	2310      	movs	r3, #16
 800328e:	e013      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 8003290:	2301      	movs	r3, #1
 8003292:	e011      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 8003294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003298:	e00e      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 800329a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800329e:	e00b      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 80032a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032a4:	e008      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 80032a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032aa:	e005      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 80032ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032b0:	e002      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 80032b2:	2310      	movs	r3, #16
 80032b4:	e000      	b.n	80032b8 <HAL_DMA_Abort_IT+0x1ac>
 80032b6:	2301      	movs	r3, #1
 80032b8:	4a17      	ldr	r2, [pc, #92]	; (8003318 <HAL_DMA_Abort_IT+0x20c>)
 80032ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
    } 
  }
  return status;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40020080 	.word	0x40020080
 80032ec:	40020008 	.word	0x40020008
 80032f0:	4002001c 	.word	0x4002001c
 80032f4:	40020030 	.word	0x40020030
 80032f8:	40020044 	.word	0x40020044
 80032fc:	40020058 	.word	0x40020058
 8003300:	4002006c 	.word	0x4002006c
 8003304:	40020408 	.word	0x40020408
 8003308:	4002041c 	.word	0x4002041c
 800330c:	40020430 	.word	0x40020430
 8003310:	40020444 	.word	0x40020444
 8003314:	40020400 	.word	0x40020400
 8003318:	40020000 	.word	0x40020000

0800331c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800331c:	b480      	push	{r7}
 800331e:	b08b      	sub	sp, #44	; 0x2c
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003326:	2300      	movs	r3, #0
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800332a:	2300      	movs	r3, #0
 800332c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332e:	e179      	b.n	8003624 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003330:	2201      	movs	r2, #1
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	429a      	cmp	r2, r3
 800334a:	f040 8168 	bne.w	800361e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4a96      	ldr	r2, [pc, #600]	; (80035ac <HAL_GPIO_Init+0x290>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d05e      	beq.n	8003416 <HAL_GPIO_Init+0xfa>
 8003358:	4a94      	ldr	r2, [pc, #592]	; (80035ac <HAL_GPIO_Init+0x290>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d875      	bhi.n	800344a <HAL_GPIO_Init+0x12e>
 800335e:	4a94      	ldr	r2, [pc, #592]	; (80035b0 <HAL_GPIO_Init+0x294>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d058      	beq.n	8003416 <HAL_GPIO_Init+0xfa>
 8003364:	4a92      	ldr	r2, [pc, #584]	; (80035b0 <HAL_GPIO_Init+0x294>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d86f      	bhi.n	800344a <HAL_GPIO_Init+0x12e>
 800336a:	4a92      	ldr	r2, [pc, #584]	; (80035b4 <HAL_GPIO_Init+0x298>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d052      	beq.n	8003416 <HAL_GPIO_Init+0xfa>
 8003370:	4a90      	ldr	r2, [pc, #576]	; (80035b4 <HAL_GPIO_Init+0x298>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d869      	bhi.n	800344a <HAL_GPIO_Init+0x12e>
 8003376:	4a90      	ldr	r2, [pc, #576]	; (80035b8 <HAL_GPIO_Init+0x29c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04c      	beq.n	8003416 <HAL_GPIO_Init+0xfa>
 800337c:	4a8e      	ldr	r2, [pc, #568]	; (80035b8 <HAL_GPIO_Init+0x29c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d863      	bhi.n	800344a <HAL_GPIO_Init+0x12e>
 8003382:	4a8e      	ldr	r2, [pc, #568]	; (80035bc <HAL_GPIO_Init+0x2a0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d046      	beq.n	8003416 <HAL_GPIO_Init+0xfa>
 8003388:	4a8c      	ldr	r2, [pc, #560]	; (80035bc <HAL_GPIO_Init+0x2a0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d85d      	bhi.n	800344a <HAL_GPIO_Init+0x12e>
 800338e:	2b12      	cmp	r3, #18
 8003390:	d82a      	bhi.n	80033e8 <HAL_GPIO_Init+0xcc>
 8003392:	2b12      	cmp	r3, #18
 8003394:	d859      	bhi.n	800344a <HAL_GPIO_Init+0x12e>
 8003396:	a201      	add	r2, pc, #4	; (adr r2, 800339c <HAL_GPIO_Init+0x80>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	08003417 	.word	0x08003417
 80033a0:	080033f1 	.word	0x080033f1
 80033a4:	08003403 	.word	0x08003403
 80033a8:	08003445 	.word	0x08003445
 80033ac:	0800344b 	.word	0x0800344b
 80033b0:	0800344b 	.word	0x0800344b
 80033b4:	0800344b 	.word	0x0800344b
 80033b8:	0800344b 	.word	0x0800344b
 80033bc:	0800344b 	.word	0x0800344b
 80033c0:	0800344b 	.word	0x0800344b
 80033c4:	0800344b 	.word	0x0800344b
 80033c8:	0800344b 	.word	0x0800344b
 80033cc:	0800344b 	.word	0x0800344b
 80033d0:	0800344b 	.word	0x0800344b
 80033d4:	0800344b 	.word	0x0800344b
 80033d8:	0800344b 	.word	0x0800344b
 80033dc:	0800344b 	.word	0x0800344b
 80033e0:	080033f9 	.word	0x080033f9
 80033e4:	0800340d 	.word	0x0800340d
 80033e8:	4a75      	ldr	r2, [pc, #468]	; (80035c0 <HAL_GPIO_Init+0x2a4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033ee:	e02c      	b.n	800344a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	623b      	str	r3, [r7, #32]
          break;
 80033f6:	e029      	b.n	800344c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	3304      	adds	r3, #4
 80033fe:	623b      	str	r3, [r7, #32]
          break;
 8003400:	e024      	b.n	800344c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	3308      	adds	r3, #8
 8003408:	623b      	str	r3, [r7, #32]
          break;
 800340a:	e01f      	b.n	800344c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	330c      	adds	r3, #12
 8003412:	623b      	str	r3, [r7, #32]
          break;
 8003414:	e01a      	b.n	800344c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800341e:	2304      	movs	r3, #4
 8003420:	623b      	str	r3, [r7, #32]
          break;
 8003422:	e013      	b.n	800344c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800342c:	2308      	movs	r3, #8
 800342e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	611a      	str	r2, [r3, #16]
          break;
 8003436:	e009      	b.n	800344c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003438:	2308      	movs	r3, #8
 800343a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	615a      	str	r2, [r3, #20]
          break;
 8003442:	e003      	b.n	800344c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003444:	2300      	movs	r3, #0
 8003446:	623b      	str	r3, [r7, #32]
          break;
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x130>
          break;
 800344a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2bff      	cmp	r3, #255	; 0xff
 8003450:	d801      	bhi.n	8003456 <HAL_GPIO_Init+0x13a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	e001      	b.n	800345a <HAL_GPIO_Init+0x13e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2bff      	cmp	r3, #255	; 0xff
 8003460:	d802      	bhi.n	8003468 <HAL_GPIO_Init+0x14c>
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	e002      	b.n	800346e <HAL_GPIO_Init+0x152>
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	3b08      	subs	r3, #8
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	210f      	movs	r1, #15
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	fa01 f303 	lsl.w	r3, r1, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	401a      	ands	r2, r3
 8003480:	6a39      	ldr	r1, [r7, #32]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	431a      	orrs	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80c1 	beq.w	800361e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800349c:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <HAL_GPIO_Init+0x2a8>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	4a48      	ldr	r2, [pc, #288]	; (80035c4 <HAL_GPIO_Init+0x2a8>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6193      	str	r3, [r2, #24]
 80034a8:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_GPIO_Init+0x2a8>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034b4:	4a44      	ldr	r2, [pc, #272]	; (80035c8 <HAL_GPIO_Init+0x2ac>)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	089b      	lsrs	r3, r3, #2
 80034ba:	3302      	adds	r3, #2
 80034bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	220f      	movs	r2, #15
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4013      	ands	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3c      	ldr	r2, [pc, #240]	; (80035cc <HAL_GPIO_Init+0x2b0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d01f      	beq.n	8003520 <HAL_GPIO_Init+0x204>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <HAL_GPIO_Init+0x2b4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d019      	beq.n	800351c <HAL_GPIO_Init+0x200>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <HAL_GPIO_Init+0x2b8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_GPIO_Init+0x1fc>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a39      	ldr	r2, [pc, #228]	; (80035d8 <HAL_GPIO_Init+0x2bc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00d      	beq.n	8003514 <HAL_GPIO_Init+0x1f8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a38      	ldr	r2, [pc, #224]	; (80035dc <HAL_GPIO_Init+0x2c0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <HAL_GPIO_Init+0x1f4>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a37      	ldr	r2, [pc, #220]	; (80035e0 <HAL_GPIO_Init+0x2c4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_GPIO_Init+0x1f0>
 8003508:	2305      	movs	r3, #5
 800350a:	e00a      	b.n	8003522 <HAL_GPIO_Init+0x206>
 800350c:	2306      	movs	r3, #6
 800350e:	e008      	b.n	8003522 <HAL_GPIO_Init+0x206>
 8003510:	2304      	movs	r3, #4
 8003512:	e006      	b.n	8003522 <HAL_GPIO_Init+0x206>
 8003514:	2303      	movs	r3, #3
 8003516:	e004      	b.n	8003522 <HAL_GPIO_Init+0x206>
 8003518:	2302      	movs	r3, #2
 800351a:	e002      	b.n	8003522 <HAL_GPIO_Init+0x206>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_GPIO_Init+0x206>
 8003520:	2300      	movs	r3, #0
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	f002 0203 	and.w	r2, r2, #3
 8003528:	0092      	lsls	r2, r2, #2
 800352a:	4093      	lsls	r3, r2
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003532:	4925      	ldr	r1, [pc, #148]	; (80035c8 <HAL_GPIO_Init+0x2ac>)
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d006      	beq.n	800355a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_GPIO_Init+0x2c8>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4924      	ldr	r1, [pc, #144]	; (80035e4 <HAL_GPIO_Init+0x2c8>)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e006      	b.n	8003568 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_GPIO_Init+0x2c8>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	43db      	mvns	r3, r3
 8003562:	4920      	ldr	r1, [pc, #128]	; (80035e4 <HAL_GPIO_Init+0x2c8>)
 8003564:	4013      	ands	r3, r2
 8003566:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d006      	beq.n	8003582 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003574:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <HAL_GPIO_Init+0x2c8>)
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	491a      	ldr	r1, [pc, #104]	; (80035e4 <HAL_GPIO_Init+0x2c8>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
 8003580:	e006      	b.n	8003590 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003582:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <HAL_GPIO_Init+0x2c8>)
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	43db      	mvns	r3, r3
 800358a:	4916      	ldr	r1, [pc, #88]	; (80035e4 <HAL_GPIO_Init+0x2c8>)
 800358c:	4013      	ands	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d025      	beq.n	80035e8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_GPIO_Init+0x2c8>)
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	4910      	ldr	r1, [pc, #64]	; (80035e4 <HAL_GPIO_Init+0x2c8>)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]
 80035a8:	e025      	b.n	80035f6 <HAL_GPIO_Init+0x2da>
 80035aa:	bf00      	nop
 80035ac:	10320000 	.word	0x10320000
 80035b0:	10310000 	.word	0x10310000
 80035b4:	10220000 	.word	0x10220000
 80035b8:	10210000 	.word	0x10210000
 80035bc:	10120000 	.word	0x10120000
 80035c0:	10110000 	.word	0x10110000
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40010000 	.word	0x40010000
 80035cc:	40010800 	.word	0x40010800
 80035d0:	40010c00 	.word	0x40010c00
 80035d4:	40011000 	.word	0x40011000
 80035d8:	40011400 	.word	0x40011400
 80035dc:	40011800 	.word	0x40011800
 80035e0:	40011c00 	.word	0x40011c00
 80035e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035e8:	4b15      	ldr	r3, [pc, #84]	; (8003640 <HAL_GPIO_Init+0x324>)
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	4913      	ldr	r1, [pc, #76]	; (8003640 <HAL_GPIO_Init+0x324>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_GPIO_Init+0x324>)
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	490e      	ldr	r1, [pc, #56]	; (8003640 <HAL_GPIO_Init+0x324>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	60cb      	str	r3, [r1, #12]
 800360e:	e006      	b.n	800361e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_GPIO_Init+0x324>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	43db      	mvns	r3, r3
 8003618:	4909      	ldr	r1, [pc, #36]	; (8003640 <HAL_GPIO_Init+0x324>)
 800361a:	4013      	ands	r3, r2
 800361c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	3301      	adds	r3, #1
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	fa22 f303 	lsr.w	r3, r2, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	f47f ae7e 	bne.w	8003330 <HAL_GPIO_Init+0x14>
  }
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	372c      	adds	r7, #44	; 0x2c
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	40010400 	.word	0x40010400

08003644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	e001      	b.n	8003666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	807b      	strh	r3, [r7, #2]
 800367e:	4613      	mov	r3, r2
 8003680:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003682:	787b      	ldrb	r3, [r7, #1]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003688:	887a      	ldrh	r2, [r7, #2]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800368e:	e003      	b.n	8003698 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003690:	887b      	ldrh	r3, [r7, #2]
 8003692:	041a      	lsls	r2, r3, #16
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	611a      	str	r2, [r3, #16]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036b4:	887a      	ldrh	r2, [r7, #2]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	041a      	lsls	r2, r3, #16
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	43d9      	mvns	r1, r3
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	400b      	ands	r3, r1
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	611a      	str	r2, [r3, #16]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	420e0020 	.word	0x420e0020

080036ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e272      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8087 	beq.w	800381a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800370c:	4b92      	ldr	r3, [pc, #584]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b04      	cmp	r3, #4
 8003716:	d00c      	beq.n	8003732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003718:	4b8f      	ldr	r3, [pc, #572]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d112      	bne.n	800374a <HAL_RCC_OscConfig+0x5e>
 8003724:	4b8c      	ldr	r3, [pc, #560]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003730:	d10b      	bne.n	800374a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003732:	4b89      	ldr	r3, [pc, #548]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d06c      	beq.n	8003818 <HAL_RCC_OscConfig+0x12c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d168      	bne.n	8003818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e24c      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x76>
 8003754:	4b80      	ldr	r3, [pc, #512]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a7f      	ldr	r2, [pc, #508]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800375a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	e02e      	b.n	80037c0 <HAL_RCC_OscConfig+0xd4>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0x98>
 800376a:	4b7b      	ldr	r3, [pc, #492]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7a      	ldr	r2, [pc, #488]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b78      	ldr	r3, [pc, #480]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a77      	ldr	r2, [pc, #476]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800377c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e01d      	b.n	80037c0 <HAL_RCC_OscConfig+0xd4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0xbc>
 800378e:	4b72      	ldr	r3, [pc, #456]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a71      	ldr	r2, [pc, #452]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b6f      	ldr	r3, [pc, #444]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6e      	ldr	r2, [pc, #440]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e00b      	b.n	80037c0 <HAL_RCC_OscConfig+0xd4>
 80037a8:	4b6b      	ldr	r3, [pc, #428]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6a      	ldr	r2, [pc, #424]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b68      	ldr	r3, [pc, #416]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a67      	ldr	r2, [pc, #412]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7ff fb2a 	bl	8002e20 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7ff fb26 	bl	8002e20 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e200      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b5d      	ldr	r3, [pc, #372]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0xe4>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7ff fb16 	bl	8002e20 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7ff fb12 	bl	8002e20 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1ec      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x10c>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d063      	beq.n	80038ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003826:	4b4c      	ldr	r3, [pc, #304]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003832:	4b49      	ldr	r3, [pc, #292]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b08      	cmp	r3, #8
 800383c:	d11c      	bne.n	8003878 <HAL_RCC_OscConfig+0x18c>
 800383e:	4b46      	ldr	r3, [pc, #280]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	4b43      	ldr	r3, [pc, #268]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x176>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e1c0      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	4b3d      	ldr	r3, [pc, #244]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4939      	ldr	r1, [pc, #228]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	e03a      	b.n	80038ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003880:	4b36      	ldr	r3, [pc, #216]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7ff facb 	bl	8002e20 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388e:	f7ff fac7 	bl	8002e20 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e1a1      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a0:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4927      	ldr	r1, [pc, #156]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]
 80038c0:	e015      	b.n	80038ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7ff faaa 	bl	8002e20 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d0:	f7ff faa6 	bl	8002e20 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e180      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e2:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d03a      	beq.n	8003970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d019      	beq.n	8003936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003902:	4b17      	ldr	r3, [pc, #92]	; (8003960 <HAL_RCC_OscConfig+0x274>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7ff fa8a 	bl	8002e20 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003910:	f7ff fa86 	bl	8002e20 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e160      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800392e:	2001      	movs	r0, #1
 8003930:	f000 fad8 	bl	8003ee4 <RCC_Delay>
 8003934:	e01c      	b.n	8003970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_RCC_OscConfig+0x274>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393c:	f7ff fa70 	bl	8002e20 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003942:	e00f      	b.n	8003964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003944:	f7ff fa6c 	bl	8002e20 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d908      	bls.n	8003964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e146      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	42420000 	.word	0x42420000
 8003960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	4b92      	ldr	r3, [pc, #584]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e9      	bne.n	8003944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80a6 	beq.w	8003aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003982:	4b8b      	ldr	r3, [pc, #556]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10d      	bne.n	80039aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	4b88      	ldr	r3, [pc, #544]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	4a87      	ldr	r2, [pc, #540]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	61d3      	str	r3, [r2, #28]
 800399a:	4b85      	ldr	r3, [pc, #532]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	4b82      	ldr	r3, [pc, #520]	; (8003bb4 <HAL_RCC_OscConfig+0x4c8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d118      	bne.n	80039e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b6:	4b7f      	ldr	r3, [pc, #508]	; (8003bb4 <HAL_RCC_OscConfig+0x4c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7e      	ldr	r2, [pc, #504]	; (8003bb4 <HAL_RCC_OscConfig+0x4c8>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c2:	f7ff fa2d 	bl	8002e20 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7ff fa29 	bl	8002e20 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e103      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	4b75      	ldr	r3, [pc, #468]	; (8003bb4 <HAL_RCC_OscConfig+0x4c8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x312>
 80039f0:	4b6f      	ldr	r3, [pc, #444]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a6e      	ldr	r2, [pc, #440]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	e02d      	b.n	8003a5a <HAL_RCC_OscConfig+0x36e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x334>
 8003a06:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4a69      	ldr	r2, [pc, #420]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	6213      	str	r3, [r2, #32]
 8003a12:	4b67      	ldr	r3, [pc, #412]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a66      	ldr	r2, [pc, #408]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	6213      	str	r3, [r2, #32]
 8003a1e:	e01c      	b.n	8003a5a <HAL_RCC_OscConfig+0x36e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d10c      	bne.n	8003a42 <HAL_RCC_OscConfig+0x356>
 8003a28:	4b61      	ldr	r3, [pc, #388]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4a60      	ldr	r2, [pc, #384]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6213      	str	r3, [r2, #32]
 8003a34:	4b5e      	ldr	r3, [pc, #376]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a5d      	ldr	r2, [pc, #372]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	e00b      	b.n	8003a5a <HAL_RCC_OscConfig+0x36e>
 8003a42:	4b5b      	ldr	r3, [pc, #364]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4a5a      	ldr	r2, [pc, #360]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6213      	str	r3, [r2, #32]
 8003a4e:	4b58      	ldr	r3, [pc, #352]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4a57      	ldr	r2, [pc, #348]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d015      	beq.n	8003a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a62:	f7ff f9dd 	bl	8002e20 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7ff f9d9 	bl	8002e20 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0b1      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ee      	beq.n	8003a6a <HAL_RCC_OscConfig+0x37e>
 8003a8c:	e014      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7ff f9c7 	bl	8002e20 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7ff f9c3 	bl	8002e20 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e09b      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aac:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ee      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d105      	bne.n	8003aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abe:	4b3c      	ldr	r3, [pc, #240]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4a3b      	ldr	r2, [pc, #236]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8087 	beq.w	8003be2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ad4:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d061      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d146      	bne.n	8003b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae8:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_RCC_OscConfig+0x4cc>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7ff f997 	bl	8002e20 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af6:	f7ff f993 	bl	8002e20 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e06d      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f0      	bne.n	8003af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d108      	bne.n	8003b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	4921      	ldr	r1, [pc, #132]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b30:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a19      	ldr	r1, [r3, #32]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	430b      	orrs	r3, r1
 8003b42:	491b      	ldr	r1, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b48:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <HAL_RCC_OscConfig+0x4cc>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7ff f967 	bl	8002e20 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b56:	f7ff f963 	bl	8002e20 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e03d      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x46a>
 8003b74:	e035      	b.n	8003be2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_RCC_OscConfig+0x4cc>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7ff f950 	bl	8002e20 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7ff f94c 	bl	8002e20 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e026      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x498>
 8003ba2:	e01e      	b.n	8003be2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e019      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_OscConfig+0x500>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000

08003bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0d0      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c04:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d910      	bls.n	8003c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b67      	ldr	r3, [pc, #412]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 0207 	bic.w	r2, r3, #7
 8003c1a:	4965      	ldr	r1, [pc, #404]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b63      	ldr	r3, [pc, #396]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0b8      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c4c:	4b59      	ldr	r3, [pc, #356]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4a58      	ldr	r2, [pc, #352]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4a52      	ldr	r2, [pc, #328]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c70:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	494d      	ldr	r1, [pc, #308]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d040      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d115      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e07f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cae:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e073      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbe:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e06b      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cce:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f023 0203 	bic.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4936      	ldr	r1, [pc, #216]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce0:	f7ff f89e 	bl	8002e20 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce8:	f7ff f89a 	bl	8002e20 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e053      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 020c 	and.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d1eb      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d10:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d210      	bcs.n	8003d40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 0207 	bic.w	r2, r3, #7
 8003d26:	4922      	ldr	r1, [pc, #136]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e032      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4916      	ldr	r1, [pc, #88]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	490e      	ldr	r1, [pc, #56]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d7e:	f000 f821 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 8003d82:	4602      	mov	r2, r0
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	490a      	ldr	r1, [pc, #40]	; (8003db8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	5ccb      	ldrb	r3, [r1, r3]
 8003d92:	fa22 f303 	lsr.w	r3, r2, r3
 8003d96:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1cc>)
 8003d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fffc 	bl	8002d9c <HAL_InitTick>

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40022000 	.word	0x40022000
 8003db4:	40021000 	.word	0x40021000
 8003db8:	0800a190 	.word	0x0800a190
 8003dbc:	20000004 	.word	0x20000004
 8003dc0:	20000008 	.word	0x20000008

08003dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc4:	b490      	push	{r4, r7}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dca:	4b29      	ldr	r3, [pc, #164]	; (8003e70 <HAL_RCC_GetSysClockFreq+0xac>)
 8003dcc:	1d3c      	adds	r4, r7, #4
 8003dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003dd4:	f240 2301 	movw	r3, #513	; 0x201
 8003dd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dee:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d002      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x40>
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d003      	beq.n	8003e0a <HAL_RCC_GetSysClockFreq+0x46>
 8003e02:	e02b      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e04:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e06:	623b      	str	r3, [r7, #32]
      break;
 8003e08:	e02b      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	0c9b      	lsrs	r3, r3, #18
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	3328      	adds	r3, #40	; 0x28
 8003e14:	443b      	add	r3, r7
 8003e16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e1a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d012      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	0c5b      	lsrs	r3, r3, #17
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	3328      	adds	r3, #40	; 0x28
 8003e32:	443b      	add	r3, r7
 8003e34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e3e:	fb03 f202 	mul.w	r2, r3, r2
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4a:	e004      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	623b      	str	r3, [r7, #32]
      break;
 8003e5a:	e002      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e5e:	623b      	str	r3, [r7, #32]
      break;
 8003e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e62:	6a3b      	ldr	r3, [r7, #32]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3728      	adds	r7, #40	; 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc90      	pop	{r4, r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	08009b38 	.word	0x08009b38
 8003e74:	40021000 	.word	0x40021000
 8003e78:	007a1200 	.word	0x007a1200
 8003e7c:	003d0900 	.word	0x003d0900

08003e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e84:	4b02      	ldr	r3, [pc, #8]	; (8003e90 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr
 8003e90:	20000004 	.word	0x20000004

08003e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e98:	f7ff fff2 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	4903      	ldr	r1, [pc, #12]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eaa:	5ccb      	ldrb	r3, [r1, r3]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	0800a1a0 	.word	0x0800a1a0

08003ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec0:	f7ff ffde 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	0adb      	lsrs	r3, r3, #11
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4903      	ldr	r1, [pc, #12]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	0800a1a0 	.word	0x0800a1a0

08003ee4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <RCC_Delay+0x34>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <RCC_Delay+0x38>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	0a5b      	lsrs	r3, r3, #9
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f00:	bf00      	nop
  }
  while (Delay --);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1e5a      	subs	r2, r3, #1
 8003f06:	60fa      	str	r2, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f9      	bne.n	8003f00 <RCC_Delay+0x1c>
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	20000004 	.word	0x20000004
 8003f1c:	10624dd3 	.word	0x10624dd3

08003f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d07d      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10d      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4c:	4b4c      	ldr	r3, [pc, #304]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	4a4b      	ldr	r2, [pc, #300]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f56:	61d3      	str	r3, [r2, #28]
 8003f58:	4b49      	ldr	r3, [pc, #292]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	4b46      	ldr	r3, [pc, #280]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d118      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f74:	4b43      	ldr	r3, [pc, #268]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a42      	ldr	r2, [pc, #264]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f80:	f7fe ff4e 	bl	8002e20 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f86:	e008      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f88:	f7fe ff4a 	bl	8002e20 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e06d      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9a:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fa6:	4b36      	ldr	r3, [pc, #216]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02e      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d027      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fc4:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fce:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fda:	4a29      	ldr	r2, [pc, #164]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d014      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7fe ff19 	bl	8002e20 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff2:	f7fe ff15 	bl	8002e20 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004000:	4293      	cmp	r3, r2
 8004002:	d901      	bls.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e036      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004008:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ee      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004014:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4917      	ldr	r1, [pc, #92]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004022:	4313      	orrs	r3, r2
 8004024:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402c:	4b14      	ldr	r3, [pc, #80]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004036:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004044:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	490b      	ldr	r1, [pc, #44]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	4313      	orrs	r3, r2
 8004054:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	4904      	ldr	r1, [pc, #16]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	40007000 	.word	0x40007000
 8004088:	42420440 	.word	0x42420440

0800408c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b08d      	sub	sp, #52	; 0x34
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004094:	4b6a      	ldr	r3, [pc, #424]	; (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8004096:	f107 040c 	add.w	r4, r7, #12
 800409a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800409c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040a0:	f240 2301 	movw	r3, #513	; 0x201
 80040a4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
 80040aa:	2300      	movs	r3, #0
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ae:	2300      	movs	r3, #0
 80040b0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	2300      	movs	r3, #0
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3b01      	subs	r3, #1
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	f200 80b4 	bhi.w	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080041ab 	.word	0x080041ab
 80040d0:	08004211 	.word	0x08004211
 80040d4:	0800422d 	.word	0x0800422d
 80040d8:	0800419b 	.word	0x0800419b
 80040dc:	0800422d 	.word	0x0800422d
 80040e0:	0800422d 	.word	0x0800422d
 80040e4:	0800422d 	.word	0x0800422d
 80040e8:	080041a3 	.word	0x080041a3
 80040ec:	0800422d 	.word	0x0800422d
 80040f0:	0800422d 	.word	0x0800422d
 80040f4:	0800422d 	.word	0x0800422d
 80040f8:	0800422d 	.word	0x0800422d
 80040fc:	0800422d 	.word	0x0800422d
 8004100:	0800422d 	.word	0x0800422d
 8004104:	0800422d 	.word	0x0800422d
 8004108:	0800410d 	.word	0x0800410d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800410c:	4b4d      	ldr	r3, [pc, #308]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004112:	4b4c      	ldr	r3, [pc, #304]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8088 	beq.w	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	0c9b      	lsrs	r3, r3, #18
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	3330      	adds	r3, #48	; 0x30
 800412a:	443b      	add	r3, r7
 800412c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004130:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d017      	beq.n	800416c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800413c:	4b41      	ldr	r3, [pc, #260]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	0c5b      	lsrs	r3, r3, #17
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	3330      	adds	r3, #48	; 0x30
 8004148:	443b      	add	r3, r7
 800414a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800415a:	4a3b      	ldr	r2, [pc, #236]	; (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	4a37      	ldr	r2, [pc, #220]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8004170:	fb02 f303 	mul.w	r3, r2, r3
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004176:	4b33      	ldr	r3, [pc, #204]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004182:	d102      	bne.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004188:	e052      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4a30      	ldr	r2, [pc, #192]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004198:	e04a      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800419a:	f7ff fe13 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 800419e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80041a0:	e049      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80041a2:	f7ff fe0f 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 80041a6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80041a8:	e045      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80041aa:	4b26      	ldr	r3, [pc, #152]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ba:	d108      	bne.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 80041c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80041cc:	e01f      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d109      	bne.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80041da:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80041e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ec:	e00f      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f8:	d11c      	bne.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80041fa:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8004206:	f24f 4324 	movw	r3, #62500	; 0xf424
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800420c:	e012      	b.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800420e:	e011      	b.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004210:	f7ff fe54 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	0b9b      	lsrs	r3, r3, #14
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	3301      	adds	r3, #1
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800422a:	e004      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 800422c:	bf00      	nop
 800422e:	e002      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8004234:	bf00      	nop
    }
  }
  return (frequency);
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004238:	4618      	mov	r0, r3
 800423a:	3734      	adds	r7, #52	; 0x34
 800423c:	46bd      	mov	sp, r7
 800423e:	bd90      	pop	{r4, r7, pc}
 8004240:	08009b48 	.word	0x08009b48
 8004244:	40021000 	.word	0x40021000
 8004248:	007a1200 	.word	0x007a1200
 800424c:	003d0900 	.word	0x003d0900
 8004250:	aaaaaaab 	.word	0xaaaaaaab

08004254 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e084      	b.n	8004374 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	7c5b      	ldrb	r3, [r3, #17]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fe faaa 	bl	80027d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fce6 	bl	8004c58 <HAL_RTC_WaitForSynchro>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2204      	movs	r2, #4
 8004296:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e06b      	b.n	8004374 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fd9f 	bl	8004de0 <RTC_EnterInitMode>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2204      	movs	r2, #4
 80042ac:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e060      	b.n	8004374 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0207 	bic.w	r2, r2, #7
 80042c0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80042ca:	4b2c      	ldr	r3, [pc, #176]	; (800437c <HAL_RTC_Init+0x128>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	4a2b      	ldr	r2, [pc, #172]	; (800437c <HAL_RTC_Init+0x128>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_RTC_Init+0x128>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	4926      	ldr	r1, [pc, #152]	; (800437c <HAL_RTC_Init+0x128>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042f0:	d003      	beq.n	80042fa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e00e      	b.n	8004318 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80042fa:	2001      	movs	r0, #1
 80042fc:	f7ff fec6 	bl	800408c <HAL_RCCEx_GetPeriphCLKFreq>
 8004300:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2204      	movs	r2, #4
 800430c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e030      	b.n	8004374 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3b01      	subs	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f023 010f 	bic.w	r1, r3, #15
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	0c1a      	lsrs	r2, r3, #16
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	b291      	uxth	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	430b      	orrs	r3, r1
 8004342:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fd73 	bl	8004e30 <RTC_ExitInitMode>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d004      	beq.n	800435a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2204      	movs	r2, #4
 8004354:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e00c      	b.n	8004374 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004372:	2300      	movs	r3, #0
  }
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40006c00 	.word	0x40006c00

08004380 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	2300      	movs	r3, #0
 8004392:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_RTC_SetTime+0x20>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e080      	b.n	80044a6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	7c1b      	ldrb	r3, [r3, #16]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_RTC_SetTime+0x30>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e07a      	b.n	80044a6 <HAL_RTC_SetTime+0x126>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2202      	movs	r2, #2
 80043ba:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d113      	bne.n	80043ea <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80043cc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	4619      	mov	r1, r3
 80043d6:	460b      	mov	r3, r1
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a5b      	subs	r3, r3, r1
 80043dc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80043de:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80043e4:	4413      	add	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e01e      	b.n	8004428 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fd63 	bl	8004eba <RTC_Bcd2ToByte>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80043fc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fd58 	bl	8004eba <RTC_Bcd2ToByte>
 800440a:	4603      	mov	r3, r0
 800440c:	461a      	mov	r2, r3
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004416:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	789b      	ldrb	r3, [r3, #2]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fd4c 	bl	8004eba <RTC_Bcd2ToByte>
 8004422:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004424:	4423      	add	r3, r4
 8004426:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004428:	6979      	ldr	r1, [r7, #20]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fc71 	bl	8004d12 <RTC_WriteTimeCounter>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2204      	movs	r2, #4
 800443a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e02f      	b.n	80044a6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0205 	bic.w	r2, r2, #5
 8004454:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fc82 	bl	8004d60 <RTC_ReadAlarmCounter>
 800445c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004464:	d018      	beq.n	8004498 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	429a      	cmp	r2, r3
 800446c:	d214      	bcs.n	8004498 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004474:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004478:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800447a:	6939      	ldr	r1, [r7, #16]
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fc88 	bl	8004d92 <RTC_WriteAlarmCounter>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2204      	movs	r2, #4
 800448c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e006      	b.n	80044a6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80044a4:	2300      	movs	r3, #0
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd90      	pop	{r4, r7, pc}
	...

080044b0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	2300      	movs	r3, #0
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_RTC_GetTime+0x28>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0b5      	b.n	8004648 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0ac      	b.n	8004648 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fbdf 	bl	8004cb2 <RTC_ReadTimeCounter>
 80044f4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	4a55      	ldr	r2, [pc, #340]	; (8004650 <HAL_RTC_GetTime+0x1a0>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	0adb      	lsrs	r3, r3, #11
 8004500:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4b52      	ldr	r3, [pc, #328]	; (8004650 <HAL_RTC_GetTime+0x1a0>)
 8004506:	fba3 1302 	umull	r1, r3, r3, r2
 800450a:	0adb      	lsrs	r3, r3, #11
 800450c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	4a4f      	ldr	r2, [pc, #316]	; (8004654 <HAL_RTC_GetTime+0x1a4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	b2da      	uxtb	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4a4a      	ldr	r2, [pc, #296]	; (8004650 <HAL_RTC_GetTime+0x1a0>)
 8004528:	fba2 1203 	umull	r1, r2, r2, r3
 800452c:	0ad2      	lsrs	r2, r2, #11
 800452e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004532:	fb01 f202 	mul.w	r2, r1, r2
 8004536:	1a9a      	subs	r2, r3, r2
 8004538:	4b46      	ldr	r3, [pc, #280]	; (8004654 <HAL_RTC_GetTime+0x1a4>)
 800453a:	fba3 1302 	umull	r1, r3, r3, r2
 800453e:	0959      	lsrs	r1, r3, #5
 8004540:	460b      	mov	r3, r1
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a5b      	subs	r3, r3, r1
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	1ad1      	subs	r1, r2, r3
 800454a:	b2ca      	uxtb	r2, r1
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b17      	cmp	r3, #23
 8004554:	d955      	bls.n	8004602 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4a3f      	ldr	r2, [pc, #252]	; (8004658 <HAL_RTC_GetTime+0x1a8>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004562:	6939      	ldr	r1, [r7, #16]
 8004564:	4b3c      	ldr	r3, [pc, #240]	; (8004658 <HAL_RTC_GetTime+0x1a8>)
 8004566:	fba3 2301 	umull	r2, r3, r3, r1
 800456a:	091a      	lsrs	r2, r3, #4
 800456c:	4613      	mov	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4413      	add	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	1aca      	subs	r2, r1, r3
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fbef 	bl	8004d60 <RTC_ReadAlarmCounter>
 8004582:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800458a:	d008      	beq.n	800459e <HAL_RTC_GetTime+0xee>
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	429a      	cmp	r2, r3
 8004592:	d904      	bls.n	800459e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	e002      	b.n	80045a4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800459e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045a2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	4a2d      	ldr	r2, [pc, #180]	; (800465c <HAL_RTC_GetTime+0x1ac>)
 80045a8:	fb02 f303 	mul.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80045b2:	69b9      	ldr	r1, [r7, #24]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fbac 	bl	8004d12 <RTC_WriteTimeCounter>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e041      	b.n	8004648 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ca:	d00c      	beq.n	80045e6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	4413      	add	r3, r2
 80045d2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80045d4:	69f9      	ldr	r1, [r7, #28]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fbdb 	bl	8004d92 <RTC_WriteAlarmCounter>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e030      	b.n	8004648 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80045e6:	69f9      	ldr	r1, [r7, #28]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fbd2 	bl	8004d92 <RTC_WriteAlarmCounter>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e027      	b.n	8004648 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80045f8:	6979      	ldr	r1, [r7, #20]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fc7a 	bl	8004ef4 <RTC_DateUpdate>
 8004600:	e003      	b.n	800460a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01a      	beq.n	8004646 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fc33 	bl	8004e80 <RTC_ByteToBcd2>
 800461a:	4603      	mov	r3, r0
 800461c:	461a      	mov	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	785b      	ldrb	r3, [r3, #1]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fc2a 	bl	8004e80 <RTC_ByteToBcd2>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	789b      	ldrb	r3, [r3, #2]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fc21 	bl	8004e80 <RTC_ByteToBcd2>
 800463e:	4603      	mov	r3, r0
 8004640:	461a      	mov	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	91a2b3c5 	.word	0x91a2b3c5
 8004654:	88888889 	.word	0x88888889
 8004658:	aaaaaaab 	.word	0xaaaaaaab
 800465c:	00015180 	.word	0x00015180

08004660 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_RTC_SetDate+0x24>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e097      	b.n	80047b8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	7c1b      	ldrb	r3, [r3, #16]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_RTC_SetDate+0x34>
 8004690:	2302      	movs	r3, #2
 8004692:	e091      	b.n	80047b8 <HAL_RTC_SetDate+0x158>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2202      	movs	r2, #2
 800469e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10c      	bne.n	80046c0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	78da      	ldrb	r2, [r3, #3]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	785a      	ldrb	r2, [r3, #1]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	789a      	ldrb	r2, [r3, #2]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	739a      	strb	r2, [r3, #14]
 80046be:	e01a      	b.n	80046f6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	78db      	ldrb	r3, [r3, #3]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fbf8 	bl	8004eba <RTC_Bcd2ToByte>
 80046ca:	4603      	mov	r3, r0
 80046cc:	461a      	mov	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fbef 	bl	8004eba <RTC_Bcd2ToByte>
 80046dc:	4603      	mov	r3, r0
 80046de:	461a      	mov	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	789b      	ldrb	r3, [r3, #2]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fbe6 	bl	8004eba <RTC_Bcd2ToByte>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	7bdb      	ldrb	r3, [r3, #15]
 80046fa:	4618      	mov	r0, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	7b59      	ldrb	r1, [r3, #13]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	7b9b      	ldrb	r3, [r3, #14]
 8004704:	461a      	mov	r2, r3
 8004706:	f000 fcd1 	bl	80050ac <RTC_WeekDayNum>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	7b1a      	ldrb	r2, [r3, #12]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fac9 	bl	8004cb2 <RTC_ReadTimeCounter>
 8004720:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4a26      	ldr	r2, [pc, #152]	; (80047c0 <HAL_RTC_SetDate+0x160>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	0adb      	lsrs	r3, r3, #11
 800472c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b18      	cmp	r3, #24
 8004732:	d93a      	bls.n	80047aa <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	4a23      	ldr	r2, [pc, #140]	; (80047c4 <HAL_RTC_SetDate+0x164>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <HAL_RTC_SetDate+0x168>)
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800474a:	69f9      	ldr	r1, [r7, #28]
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fae0 	bl	8004d12 <RTC_WriteTimeCounter>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2204      	movs	r2, #4
 800475c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e027      	b.n	80047b8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 faf9 	bl	8004d60 <RTC_ReadAlarmCounter>
 800476e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004776:	d018      	beq.n	80047aa <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	429a      	cmp	r2, r3
 800477e:	d214      	bcs.n	80047aa <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004786:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800478a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800478c:	69b9      	ldr	r1, [r7, #24]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 faff 	bl	8004d92 <RTC_WriteAlarmCounter>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2204      	movs	r2, #4
 800479e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e006      	b.n	80047b8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	91a2b3c5 	.word	0x91a2b3c5
 80047c4:	aaaaaaab 	.word	0xaaaaaaab
 80047c8:	00015180 	.word	0x00015180

080047cc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80047d8:	f107 0314 	add.w	r3, r7, #20
 80047dc:	2100      	movs	r1, #0
 80047de:	460a      	mov	r2, r1
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	460a      	mov	r2, r1
 80047e4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_RTC_GetDate+0x26>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e03a      	b.n	800486c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80047f6:	f107 0314 	add.w	r3, r7, #20
 80047fa:	2200      	movs	r2, #0
 80047fc:	4619      	mov	r1, r3
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff fe56 	bl	80044b0 <HAL_RTC_GetTime>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e02e      	b.n	800486c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	7b1a      	ldrb	r2, [r3, #12]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	7bda      	ldrb	r2, [r3, #15]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	7b5a      	ldrb	r2, [r3, #13]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	7b9a      	ldrb	r2, [r3, #14]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01a      	beq.n	800486a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	78db      	ldrb	r3, [r3, #3]
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fb21 	bl	8004e80 <RTC_ByteToBcd2>
 800483e:	4603      	mov	r3, r0
 8004840:	461a      	mov	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fb18 	bl	8004e80 <RTC_ByteToBcd2>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	789b      	ldrb	r3, [r3, #2]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fb0f 	bl	8004e80 <RTC_ByteToBcd2>
 8004862:	4603      	mov	r3, r0
 8004864:	461a      	mov	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	2100      	movs	r1, #0
 800488a:	460a      	mov	r2, r1
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	460a      	mov	r2, r1
 8004890:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_RTC_SetAlarm+0x2a>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e07d      	b.n	800499e <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	7c1b      	ldrb	r3, [r3, #16]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_RTC_SetAlarm+0x3a>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e077      	b.n	800499e <HAL_RTC_SetAlarm+0x12a>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2202      	movs	r2, #2
 80048b8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80048ba:	f107 0314 	add.w	r3, r7, #20
 80048be:	2200      	movs	r2, #0
 80048c0:	4619      	mov	r1, r3
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff fdf4 	bl	80044b0 <HAL_RTC_GetTime>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e065      	b.n	800499e <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80048d2:	7d3b      	ldrb	r3, [r7, #20]
 80048d4:	461a      	mov	r2, r3
 80048d6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80048da:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80048de:	7d7b      	ldrb	r3, [r7, #21]
 80048e0:	4619      	mov	r1, r3
 80048e2:	460b      	mov	r3, r1
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	1a5b      	subs	r3, r3, r1
 80048e8:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80048ea:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80048ec:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80048ee:	4413      	add	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d113      	bne.n	8004920 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004902:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	785b      	ldrb	r3, [r3, #1]
 800490a:	4619      	mov	r1, r3
 800490c:	460b      	mov	r3, r1
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	1a5b      	subs	r3, r3, r1
 8004912:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004914:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800491a:	4413      	add	r3, r2
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	e01e      	b.n	800495e <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fac8 	bl	8004eba <RTC_Bcd2ToByte>
 800492a:	4603      	mov	r3, r0
 800492c:	461a      	mov	r2, r3
 800492e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004932:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fabd 	bl	8004eba <RTC_Bcd2ToByte>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	4613      	mov	r3, r2
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800494c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	789b      	ldrb	r3, [r3, #2]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fab1 	bl	8004eba <RTC_Bcd2ToByte>
 8004958:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800495a:	4423      	add	r3, r4
 800495c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	429a      	cmp	r2, r3
 8004964:	d205      	bcs.n	8004972 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800496c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004970:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004972:	69f9      	ldr	r1, [r7, #28]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fa0c 	bl	8004d92 <RTC_WriteAlarmCounter>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2204      	movs	r2, #4
 8004984:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e006      	b.n	800499e <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800499c:	2300      	movs	r3, #0
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd90      	pop	{r4, r7, pc}
	...

080049a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b089      	sub	sp, #36	; 0x24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80049b8:	f107 0314 	add.w	r3, r7, #20
 80049bc:	2100      	movs	r1, #0
 80049be:	460a      	mov	r2, r1
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	460a      	mov	r2, r1
 80049c4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_RTC_SetAlarm_IT+0x2a>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e099      	b.n	8004b0a <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	7c1b      	ldrb	r3, [r3, #16]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_RTC_SetAlarm_IT+0x3a>
 80049de:	2302      	movs	r3, #2
 80049e0:	e093      	b.n	8004b0a <HAL_RTC_SetAlarm_IT+0x162>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2202      	movs	r2, #2
 80049ec:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80049ee:	f107 0314 	add.w	r3, r7, #20
 80049f2:	2200      	movs	r2, #0
 80049f4:	4619      	mov	r1, r3
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff fd5a 	bl	80044b0 <HAL_RTC_GetTime>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e081      	b.n	8004b0a <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004a06:	7d3b      	ldrb	r3, [r7, #20]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a0e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004a12:	7d7b      	ldrb	r3, [r7, #21]
 8004a14:	4619      	mov	r1, r3
 8004a16:	460b      	mov	r3, r1
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	1a5b      	subs	r3, r3, r1
 8004a1c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004a1e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004a20:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004a22:	4413      	add	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d113      	bne.n	8004a54 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a36:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	460b      	mov	r3, r1
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	1a5b      	subs	r3, r3, r1
 8004a46:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004a48:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004a4e:	4413      	add	r3, r2
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	e01e      	b.n	8004a92 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fa2e 	bl	8004eba <RTC_Bcd2ToByte>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	461a      	mov	r2, r3
 8004a62:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a66:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fa23 	bl	8004eba <RTC_Bcd2ToByte>
 8004a74:	4603      	mov	r3, r0
 8004a76:	461a      	mov	r2, r3
 8004a78:	4613      	mov	r3, r2
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004a80:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	789b      	ldrb	r3, [r3, #2]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fa17 	bl	8004eba <RTC_Bcd2ToByte>
 8004a8c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004a8e:	4423      	add	r3, r4
 8004a90:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d205      	bcs.n	8004aa6 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004aa0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004aa4:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004aa6:	69f9      	ldr	r1, [r7, #28]
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f972 	bl	8004d92 <RTC_WriteAlarmCounter>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e022      	b.n	8004b0a <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0202 	bic.w	r2, r2, #2
 8004ad2:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0202 	orr.w	r2, r2, #2
 8004ae2:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aee:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afa:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004b08:	2300      	movs	r3, #0
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3724      	adds	r7, #36	; 0x24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd90      	pop	{r4, r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40010400 	.word	0x40010400

08004b18 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  uint32_t counter_alarm = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Alarm);

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_RTC_GetAlarm+0x1e>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RTC_GetAlarm+0x22>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e05a      	b.n	8004bf0 <HAL_RTC_GetAlarm+0xd8>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  /* Read Alarm counter in RTC registers */
  counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f910 	bl	8004d60 <RTC_ReadAlarmCounter>
 8004b40:	6178      	str	r0, [r7, #20]

  /* Fill the structure with the read parameters */
  /* Set hours in a day range (between 0 to 24)*/
  sAlarm->AlarmTime.Hours   = (uint32_t)((counter_alarm / 3600U) % 24U);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4a2c      	ldr	r2, [pc, #176]	; (8004bf8 <HAL_RTC_GetAlarm+0xe0>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	0ad9      	lsrs	r1, r3, #11
 8004b4c:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <HAL_RTC_GetAlarm+0xe4>)
 8004b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b52:	091a      	lsrs	r2, r3, #4
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	1aca      	subs	r2, r1, r3
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <HAL_RTC_GetAlarm+0xe0>)
 8004b68:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6c:	0adb      	lsrs	r3, r3, #11
 8004b6e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	4a21      	ldr	r2, [pc, #132]	; (8004c00 <HAL_RTC_GetAlarm+0xe8>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <HAL_RTC_GetAlarm+0xe0>)
 8004b8a:	fba2 1203 	umull	r1, r2, r2, r3
 8004b8e:	0ad2      	lsrs	r2, r2, #11
 8004b90:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b94:	fb01 f202 	mul.w	r2, r1, r2
 8004b98:	1a9a      	subs	r2, r3, r2
 8004b9a:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <HAL_RTC_GetAlarm+0xe8>)
 8004b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba0:	0959      	lsrs	r1, r3, #5
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	1a5b      	subs	r3, r3, r1
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	1ad1      	subs	r1, r2, r3
 8004bac:	b2ca      	uxtb	r2, r1
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	709a      	strb	r2, [r3, #2]

  if (Format != RTC_FORMAT_BIN)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01a      	beq.n	8004bee <HAL_RTC_GetAlarm+0xd6>
  {
    sAlarm->AlarmTime.Hours   = RTC_ByteToBcd2(sAlarm->AlarmTime.Hours);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 f95f 	bl	8004e80 <RTC_ByteToBcd2>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f956 	bl	8004e80 <RTC_ByteToBcd2>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	789b      	ldrb	r3, [r3, #2]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f94d 	bl	8004e80 <RTC_ByteToBcd2>
 8004be6:	4603      	mov	r3, r0
 8004be8:	461a      	mov	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	91a2b3c5 	.word	0x91a2b3c5
 8004bfc:	aaaaaaab 	.word	0xaaaaaaab
 8004c00:	88888889 	.word	0x88888889

08004c04 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d011      	beq.n	8004c3e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fd f8a5 	bl	8001d78 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0202 	bic.w	r2, r2, #2
 8004c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004c40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c44:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	745a      	strb	r2, [r3, #17]
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40010400 	.word	0x40010400

08004c58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e01d      	b.n	8004caa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0208 	bic.w	r2, r2, #8
 8004c7c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004c7e:	f7fe f8cf 	bl	8002e20 <HAL_GetTick>
 8004c82:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004c84:	e009      	b.n	8004c9a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c86:	f7fe f8cb 	bl	8002e20 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c94:	d901      	bls.n	8004c9a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e007      	b.n	8004caa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0ee      	beq.n	8004c86 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b087      	sub	sp, #28
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	827b      	strh	r3, [r7, #18]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	823b      	strh	r3, [r7, #16]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004ce2:	8a7a      	ldrh	r2, [r7, #18]
 8004ce4:	8a3b      	ldrh	r3, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d008      	beq.n	8004cfc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004cea:	8a3b      	ldrh	r3, [r7, #16]
 8004cec:	041a      	lsls	r2, r3, #16
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e004      	b.n	8004d06 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004cfc:	8a7b      	ldrh	r3, [r7, #18]
 8004cfe:	041a      	lsls	r2, r3, #16
 8004d00:	89fb      	ldrh	r3, [r7, #14]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004d06:	697b      	ldr	r3, [r7, #20]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr

08004d12 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f85d 	bl	8004de0 <RTC_EnterInitMode>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
 8004d30:	e011      	b.n	8004d56 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	0c12      	lsrs	r2, r2, #16
 8004d3a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	b292      	uxth	r2, r2
 8004d44:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f872 	bl	8004e30 <RTC_ExitInitMode>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	81fb      	strh	r3, [r7, #14]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	041a      	lsls	r2, r3, #16
 8004d84:	89bb      	ldrh	r3, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr

08004d92 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f81d 	bl	8004de0 <RTC_EnterInitMode>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
 8004db0:	e011      	b.n	8004dd6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	0c12      	lsrs	r2, r2, #16
 8004dba:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	b292      	uxth	r2, r2
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f832 	bl	8004e30 <RTC_ExitInitMode>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004dec:	f7fe f818 	bl	8002e20 <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004df2:	e009      	b.n	8004e08 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004df4:	f7fe f814 	bl	8002e20 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e02:	d901      	bls.n	8004e08 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e00f      	b.n	8004e28 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0ee      	beq.n	8004df4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0210 	orr.w	r2, r2, #16
 8004e24:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0210 	bic.w	r2, r2, #16
 8004e4a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004e4c:	f7fd ffe8 	bl	8002e20 <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e52:	e009      	b.n	8004e68 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004e54:	f7fd ffe4 	bl	8002e20 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e62:	d901      	bls.n	8004e68 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e007      	b.n	8004e78 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ee      	beq.n	8004e54 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004e8e:	e005      	b.n	8004e9c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	3b0a      	subs	r3, #10
 8004e9a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	d8f6      	bhi.n	8004e90 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	b2db      	uxtb	r3, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	b2db      	uxtb	r3, r3
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	7bdb      	ldrb	r3, [r3, #15]
 8004f12:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7b5b      	ldrb	r3, [r3, #13]
 8004f18:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	7b9b      	ldrb	r3, [r3, #14]
 8004f1e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004f20:	2300      	movs	r3, #0
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	e06f      	b.n	8005006 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d011      	beq.n	8004f50 <RTC_DateUpdate+0x5c>
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d00e      	beq.n	8004f50 <RTC_DateUpdate+0x5c>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d00b      	beq.n	8004f50 <RTC_DateUpdate+0x5c>
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	2b07      	cmp	r3, #7
 8004f3c:	d008      	beq.n	8004f50 <RTC_DateUpdate+0x5c>
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d005      	beq.n	8004f50 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2b0a      	cmp	r3, #10
 8004f48:	d002      	beq.n	8004f50 <RTC_DateUpdate+0x5c>
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b0c      	cmp	r3, #12
 8004f4e:	d117      	bne.n	8004f80 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b1e      	cmp	r3, #30
 8004f54:	d803      	bhi.n	8004f5e <RTC_DateUpdate+0x6a>
      {
        day++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004f5c:	e050      	b.n	8005000 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b0c      	cmp	r3, #12
 8004f62:	d005      	beq.n	8004f70 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	3301      	adds	r3, #1
 8004f68:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004f6e:	e047      	b.n	8005000 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004f70:	2301      	movs	r3, #1
 8004f72:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004f74:	2301      	movs	r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
          year++;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004f7e:	e03f      	b.n	8005000 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d008      	beq.n	8004f98 <RTC_DateUpdate+0xa4>
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b06      	cmp	r3, #6
 8004f8a:	d005      	beq.n	8004f98 <RTC_DateUpdate+0xa4>
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b09      	cmp	r3, #9
 8004f90:	d002      	beq.n	8004f98 <RTC_DateUpdate+0xa4>
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b0b      	cmp	r3, #11
 8004f96:	d10c      	bne.n	8004fb2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b1d      	cmp	r3, #29
 8004f9c:	d803      	bhi.n	8004fa6 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004fa4:	e02c      	b.n	8005000 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004fac:	2301      	movs	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004fb0:	e026      	b.n	8005000 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d123      	bne.n	8005000 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b1b      	cmp	r3, #27
 8004fbc:	d803      	bhi.n	8004fc6 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e01c      	b.n	8005000 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b1c      	cmp	r3, #28
 8004fca:	d111      	bne.n	8004ff0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 f839 	bl	8005048 <RTC_IsLeapYear>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e00d      	b.n	8005000 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004fea:	2301      	movs	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e007      	b.n	8005000 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b1d      	cmp	r3, #29
 8004ff4:	d104      	bne.n	8005000 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	3301      	adds	r3, #1
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d38b      	bcc.n	8004f26 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	b2da      	uxtb	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	4619      	mov	r1, r3
 8005030:	6978      	ldr	r0, [r7, #20]
 8005032:	f000 f83b 	bl	80050ac <RTC_WeekDayNum>
 8005036:	4603      	mov	r3, r0
 8005038:	461a      	mov	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	731a      	strb	r2, [r3, #12]
}
 800503e:	bf00      	nop
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	e01d      	b.n	800509e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <RTC_IsLeapYear+0x60>)
 8005066:	fba2 1203 	umull	r1, r2, r2, r3
 800506a:	0952      	lsrs	r2, r2, #5
 800506c:	2164      	movs	r1, #100	; 0x64
 800506e:	fb01 f202 	mul.w	r2, r1, r2
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800507a:	2301      	movs	r3, #1
 800507c:	e00f      	b.n	800509e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	4a09      	ldr	r2, [pc, #36]	; (80050a8 <RTC_IsLeapYear+0x60>)
 8005082:	fba2 1203 	umull	r1, r2, r2, r3
 8005086:	09d2      	lsrs	r2, r2, #7
 8005088:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800508c:	fb01 f202 	mul.w	r2, r1, r2
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800509c:	2300      	movs	r3, #0
  }
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr
 80050a8:	51eb851f 	.word	0x51eb851f

080050ac <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]
 80050b8:	4613      	mov	r3, r2
 80050ba:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80050ca:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d82d      	bhi.n	800512e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	4613      	mov	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	4413      	add	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	4a2c      	ldr	r2, [pc, #176]	; (8005190 <RTC_WeekDayNum+0xe4>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	085a      	lsrs	r2, r3, #1
 80050e6:	78bb      	ldrb	r3, [r7, #2]
 80050e8:	441a      	add	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	441a      	add	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	089b      	lsrs	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	4926      	ldr	r1, [pc, #152]	; (8005194 <RTC_WeekDayNum+0xe8>)
 80050fc:	fba1 1303 	umull	r1, r3, r1, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	1ad2      	subs	r2, r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	3b01      	subs	r3, #1
 8005108:	4922      	ldr	r1, [pc, #136]	; (8005194 <RTC_WeekDayNum+0xe8>)
 800510a:	fba1 1303 	umull	r1, r3, r1, r3
 800510e:	09db      	lsrs	r3, r3, #7
 8005110:	4413      	add	r3, r2
 8005112:	1d1a      	adds	r2, r3, #4
 8005114:	4b20      	ldr	r3, [pc, #128]	; (8005198 <RTC_WeekDayNum+0xec>)
 8005116:	fba3 1302 	umull	r1, r3, r3, r2
 800511a:	1ad1      	subs	r1, r2, r3
 800511c:	0849      	lsrs	r1, r1, #1
 800511e:	440b      	add	r3, r1
 8005120:	0899      	lsrs	r1, r3, #2
 8005122:	460b      	mov	r3, r1
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	1a5b      	subs	r3, r3, r1
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e029      	b.n	8005182 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	4613      	mov	r3, r2
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	4413      	add	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	4a15      	ldr	r2, [pc, #84]	; (8005190 <RTC_WeekDayNum+0xe4>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	085a      	lsrs	r2, r3, #1
 8005142:	78bb      	ldrb	r3, [r7, #2]
 8005144:	441a      	add	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	441a      	add	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	089b      	lsrs	r3, r3, #2
 800514e:	441a      	add	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4910      	ldr	r1, [pc, #64]	; (8005194 <RTC_WeekDayNum+0xe8>)
 8005154:	fba1 1303 	umull	r1, r3, r1, r3
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	1ad2      	subs	r2, r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	490d      	ldr	r1, [pc, #52]	; (8005194 <RTC_WeekDayNum+0xe8>)
 8005160:	fba1 1303 	umull	r1, r3, r1, r3
 8005164:	09db      	lsrs	r3, r3, #7
 8005166:	4413      	add	r3, r2
 8005168:	1c9a      	adds	r2, r3, #2
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <RTC_WeekDayNum+0xec>)
 800516c:	fba3 1302 	umull	r1, r3, r3, r2
 8005170:	1ad1      	subs	r1, r2, r3
 8005172:	0849      	lsrs	r1, r1, #1
 8005174:	440b      	add	r3, r1
 8005176:	0899      	lsrs	r1, r3, #2
 8005178:	460b      	mov	r3, r1
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	1a5b      	subs	r3, r3, r1
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	b2db      	uxtb	r3, r3
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr
 8005190:	38e38e39 	.word	0x38e38e39
 8005194:	51eb851f 	.word	0x51eb851f
 8005198:	24924925 	.word	0x24924925

0800519c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 80051ac:	4b07      	ldr	r3, [pc, #28]	; (80051cc <HAL_RTCEx_BKUPWrite+0x30>)
 80051ae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4413      	add	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	b292      	uxth	r2, r2
 80051c0:	601a      	str	r2, [r3, #0]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	40006c00 	.word	0x40006c00

080051d0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <HAL_SRAM_Init+0x1c>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ea:	d101      	bne.n	80051f0 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e038      	b.n	8005262 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7fd fc29 	bl	8002a5c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3308      	adds	r3, #8
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f001 fc41 	bl	8006a9c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	461a      	mov	r2, r3
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	f001 fca3 	bl	8006b70 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6858      	ldr	r0, [r3, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	f001 fcce 	bl	8006bd8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	6892      	ldr	r2, [r2, #8]
 8005244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	6892      	ldr	r2, [r2, #8]
 8005250:	f041 0101 	orr.w	r1, r1, #1
 8005254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e041      	b.n	8005300 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fd facb 	bl	800282c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3304      	adds	r3, #4
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f000 fb31 	bl	8005910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e041      	b.n	800539e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f839 	bl	80053a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f000 fae2 	bl	8005910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <HAL_TIM_PWM_Start+0x24>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e022      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d109      	bne.n	80053f6 <HAL_TIM_PWM_Start+0x3e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	bf14      	ite	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	2300      	moveq	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e015      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d109      	bne.n	8005410 <HAL_TIM_PWM_Start+0x58>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e008      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e072      	b.n	8005510 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <HAL_TIM_PWM_Start+0x82>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005438:	e013      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d104      	bne.n	800544a <HAL_TIM_PWM_Start+0x92>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005448:	e00b      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d104      	bne.n	800545a <HAL_TIM_PWM_Start+0xa2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005458:	e003      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2201      	movs	r2, #1
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fd0c 	bl	8005e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a28      	ldr	r2, [pc, #160]	; (8005518 <HAL_TIM_PWM_Start+0x160>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIM_PWM_Start+0xcc>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a27      	ldr	r2, [pc, #156]	; (800551c <HAL_TIM_PWM_Start+0x164>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d101      	bne.n	8005488 <HAL_TIM_PWM_Start+0xd0>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <HAL_TIM_PWM_Start+0xd2>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_TIM_PWM_Start+0x160>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d018      	beq.n	80054da <HAL_TIM_PWM_Start+0x122>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1b      	ldr	r2, [pc, #108]	; (800551c <HAL_TIM_PWM_Start+0x164>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <HAL_TIM_PWM_Start+0x122>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d00e      	beq.n	80054da <HAL_TIM_PWM_Start+0x122>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a17      	ldr	r2, [pc, #92]	; (8005520 <HAL_TIM_PWM_Start+0x168>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_TIM_PWM_Start+0x122>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a16      	ldr	r2, [pc, #88]	; (8005524 <HAL_TIM_PWM_Start+0x16c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_TIM_PWM_Start+0x122>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a14      	ldr	r2, [pc, #80]	; (8005528 <HAL_TIM_PWM_Start+0x170>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d111      	bne.n	80054fe <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b06      	cmp	r3, #6
 80054ea:	d010      	beq.n	800550e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fc:	e007      	b.n	800550e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40013400 	.word	0x40013400
 8005520:	40000400 	.word	0x40000400
 8005524:	40000800 	.word	0x40000800
 8005528:	40000c00 	.word	0x40000c00

0800552c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2200      	movs	r2, #0
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fca2 	bl	8005e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2e      	ldr	r2, [pc, #184]	; (8005604 <HAL_TIM_PWM_Stop+0xd8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIM_PWM_Stop+0x2c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2d      	ldr	r2, [pc, #180]	; (8005608 <HAL_TIM_PWM_Stop+0xdc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d101      	bne.n	800555c <HAL_TIM_PWM_Stop+0x30>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <HAL_TIM_PWM_Stop+0x32>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d017      	beq.n	8005592 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	f241 1311 	movw	r3, #4369	; 0x1111
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10f      	bne.n	8005592 <HAL_TIM_PWM_Stop+0x66>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	f240 4344 	movw	r3, #1092	; 0x444
 800557c:	4013      	ands	r3, r2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <HAL_TIM_PWM_Stop+0x66>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005590:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a1a      	ldr	r2, [r3, #32]
 8005598:	f241 1311 	movw	r3, #4369	; 0x1111
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10f      	bne.n	80055c2 <HAL_TIM_PWM_Stop+0x96>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a1a      	ldr	r2, [r3, #32]
 80055a8:	f240 4344 	movw	r3, #1092	; 0x444
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d107      	bne.n	80055c2 <HAL_TIM_PWM_Stop+0x96>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_PWM_Stop+0xa6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d0:	e013      	b.n	80055fa <HAL_TIM_PWM_Stop+0xce>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_PWM_Stop+0xb6>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e0:	e00b      	b.n	80055fa <HAL_TIM_PWM_Stop+0xce>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_PWM_Stop+0xc6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f0:	e003      	b.n	80055fa <HAL_TIM_PWM_Stop+0xce>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40013400 	.word	0x40013400

0800560c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005622:	2302      	movs	r3, #2
 8005624:	e0ac      	b.n	8005780 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b0c      	cmp	r3, #12
 8005632:	f200 809f 	bhi.w	8005774 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	08005671 	.word	0x08005671
 8005640:	08005775 	.word	0x08005775
 8005644:	08005775 	.word	0x08005775
 8005648:	08005775 	.word	0x08005775
 800564c:	080056b1 	.word	0x080056b1
 8005650:	08005775 	.word	0x08005775
 8005654:	08005775 	.word	0x08005775
 8005658:	08005775 	.word	0x08005775
 800565c:	080056f3 	.word	0x080056f3
 8005660:	08005775 	.word	0x08005775
 8005664:	08005775 	.word	0x08005775
 8005668:	08005775 	.word	0x08005775
 800566c:	08005733 	.word	0x08005733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f9c4 	bl	8005a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0208 	orr.w	r2, r2, #8
 800568a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0204 	bic.w	r2, r2, #4
 800569a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6999      	ldr	r1, [r3, #24]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	619a      	str	r2, [r3, #24]
      break;
 80056ae:	e062      	b.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fa14 	bl	8005ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6999      	ldr	r1, [r3, #24]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	619a      	str	r2, [r3, #24]
      break;
 80056f0:	e041      	b.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fa67 	bl	8005bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0208 	orr.w	r2, r2, #8
 800570c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0204 	bic.w	r2, r2, #4
 800571c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69d9      	ldr	r1, [r3, #28]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	61da      	str	r2, [r3, #28]
      break;
 8005730:	e021      	b.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fabb 	bl	8005cb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800574c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69d9      	ldr	r1, [r3, #28]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	021a      	lsls	r2, r3, #8
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	61da      	str	r2, [r3, #28]
      break;
 8005772:	e000      	b.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_TIM_ConfigClockSource+0x18>
 800579c:	2302      	movs	r3, #2
 800579e:	e0b3      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x180>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d8:	d03e      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0xd0>
 80057da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057de:	f200 8087 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	f000 8085 	beq.w	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d87f      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 80057f0:	2b70      	cmp	r3, #112	; 0x70
 80057f2:	d01a      	beq.n	800582a <HAL_TIM_ConfigClockSource+0xa2>
 80057f4:	2b70      	cmp	r3, #112	; 0x70
 80057f6:	d87b      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 80057f8:	2b60      	cmp	r3, #96	; 0x60
 80057fa:	d050      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x116>
 80057fc:	2b60      	cmp	r3, #96	; 0x60
 80057fe:	d877      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 8005800:	2b50      	cmp	r3, #80	; 0x50
 8005802:	d03c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0xf6>
 8005804:	2b50      	cmp	r3, #80	; 0x50
 8005806:	d873      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d058      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x136>
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d86f      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 8005810:	2b30      	cmp	r3, #48	; 0x30
 8005812:	d064      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x156>
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d86b      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 8005818:	2b20      	cmp	r3, #32
 800581a:	d060      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x156>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d867      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d05c      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x156>
 8005824:	2b10      	cmp	r3, #16
 8005826:	d05a      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005828:	e062      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6899      	ldr	r1, [r3, #8]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f000 fb06 	bl	8005e4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800584c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	609a      	str	r2, [r3, #8]
      break;
 8005856:	e04e      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6899      	ldr	r1, [r3, #8]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f000 faef 	bl	8005e4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800587a:	609a      	str	r2, [r3, #8]
      break;
 800587c:	e03b      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	461a      	mov	r2, r3
 800588c:	f000 fa66 	bl	8005d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2150      	movs	r1, #80	; 0x50
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fabd 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 800589c:	e02b      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 fa84 	bl	8005db8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2160      	movs	r1, #96	; 0x60
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 faad 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 80058bc:	e01b      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6859      	ldr	r1, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 fa46 	bl	8005d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2140      	movs	r1, #64	; 0x40
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fa9d 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 80058dc:	e00b      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4619      	mov	r1, r3
 80058e8:	4610      	mov	r0, r2
 80058ea:	f000 fa94 	bl	8005e16 <TIM_ITRx_SetConfig>
        break;
 80058ee:	e002      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a33      	ldr	r2, [pc, #204]	; (80059f0 <TIM_Base_SetConfig+0xe0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d013      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a32      	ldr	r2, [pc, #200]	; (80059f4 <TIM_Base_SetConfig+0xe4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00f      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d00b      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a2f      	ldr	r2, [pc, #188]	; (80059f8 <TIM_Base_SetConfig+0xe8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a2e      	ldr	r2, [pc, #184]	; (80059fc <TIM_Base_SetConfig+0xec>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a2d      	ldr	r2, [pc, #180]	; (8005a00 <TIM_Base_SetConfig+0xf0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d108      	bne.n	8005962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <TIM_Base_SetConfig+0xe0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <TIM_Base_SetConfig+0x82>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a21      	ldr	r2, [pc, #132]	; (80059f4 <TIM_Base_SetConfig+0xe4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00f      	beq.n	8005992 <TIM_Base_SetConfig+0x82>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005978:	d00b      	beq.n	8005992 <TIM_Base_SetConfig+0x82>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a1e      	ldr	r2, [pc, #120]	; (80059f8 <TIM_Base_SetConfig+0xe8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <TIM_Base_SetConfig+0x82>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <TIM_Base_SetConfig+0xec>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_Base_SetConfig+0x82>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <TIM_Base_SetConfig+0xf0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d108      	bne.n	80059a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a09      	ldr	r2, [pc, #36]	; (80059f0 <TIM_Base_SetConfig+0xe0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_Base_SetConfig+0xc8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <TIM_Base_SetConfig+0xe4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d103      	bne.n	80059e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	615a      	str	r2, [r3, #20]
}
 80059e6:	bf00      	nop
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr
 80059f0:	40012c00 	.word	0x40012c00
 80059f4:	40013400 	.word	0x40013400
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40000c00 	.word	0x40000c00

08005a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f023 0201 	bic.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0302 	bic.w	r3, r3, #2
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a20      	ldr	r2, [pc, #128]	; (8005adc <TIM_OC1_SetConfig+0xd8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_OC1_SetConfig+0x64>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <TIM_OC1_SetConfig+0xdc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10c      	bne.n	8005a82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0308 	bic.w	r3, r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <TIM_OC1_SetConfig+0xd8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC1_SetConfig+0x8e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a14      	ldr	r2, [pc, #80]	; (8005ae0 <TIM_OC1_SetConfig+0xdc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d111      	bne.n	8005ab6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40013400 	.word	0x40013400

08005ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0210 	bic.w	r2, r3, #16
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0320 	bic.w	r3, r3, #32
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a21      	ldr	r2, [pc, #132]	; (8005bc4 <TIM_OC2_SetConfig+0xe0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_OC2_SetConfig+0x68>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <TIM_OC2_SetConfig+0xe4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d10d      	bne.n	8005b68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <TIM_OC2_SetConfig+0xe0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC2_SetConfig+0x94>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <TIM_OC2_SetConfig+0xe4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d113      	bne.n	8005ba0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40013400 	.word	0x40013400

08005bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <TIM_OC3_SetConfig+0xe0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_OC3_SetConfig+0x66>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a20      	ldr	r2, [pc, #128]	; (8005cb0 <TIM_OC3_SetConfig+0xe4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d10d      	bne.n	8005c4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a16      	ldr	r2, [pc, #88]	; (8005cac <TIM_OC3_SetConfig+0xe0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_OC3_SetConfig+0x92>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <TIM_OC3_SetConfig+0xe4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d113      	bne.n	8005c86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	621a      	str	r2, [r3, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40013400 	.word	0x40013400

08005cb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a11      	ldr	r2, [pc, #68]	; (8005d54 <TIM_OC4_SetConfig+0xa0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_OC4_SetConfig+0x68>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <TIM_OC4_SetConfig+0xa4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d109      	bne.n	8005d30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	019b      	lsls	r3, r3, #6
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40013400 	.word	0x40013400

08005d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0201 	bic.w	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f023 030a 	bic.w	r3, r3, #10
 8005d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f023 0210 	bic.w	r2, r3, #16
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	031b      	lsls	r3, r3, #12
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005df4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	621a      	str	r2, [r3, #32]
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr

08005e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f043 0307 	orr.w	r3, r3, #7
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	609a      	str	r2, [r3, #8]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	021a      	lsls	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	609a      	str	r2, [r3, #8]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr

08005e88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	401a      	ands	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a1a      	ldr	r2, [r3, #32]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e050      	b.n	8005f8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d018      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d00e      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a15      	ldr	r2, [pc, #84]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d009      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d004      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a12      	ldr	r2, [pc, #72]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d10c      	bne.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00

08005fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e03f      	b.n	800603a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fc fcac 	bl	800292c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2224      	movs	r2, #36	; 0x24
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fcc7 	bl	8006980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b08a      	sub	sp, #40	; 0x28
 8006046:	af02      	add	r7, sp, #8
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	603b      	str	r3, [r7, #0]
 800604e:	4613      	mov	r3, r2
 8006050:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b20      	cmp	r3, #32
 8006060:	d17c      	bne.n	800615c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_UART_Transmit+0x2c>
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e075      	b.n	800615e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_UART_Transmit+0x3e>
 800607c:	2302      	movs	r3, #2
 800607e:	e06e      	b.n	800615e <HAL_UART_Transmit+0x11c>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2221      	movs	r2, #33	; 0x21
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006096:	f7fc fec3 	bl	8002e20 <HAL_GetTick>
 800609a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b0:	d108      	bne.n	80060c4 <HAL_UART_Transmit+0x82>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	e003      	b.n	80060cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060d4:	e02a      	b.n	800612c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2200      	movs	r2, #0
 80060de:	2180      	movs	r1, #128	; 0x80
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fab3 	bl	800664c <UART_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e036      	b.n	800615e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	3302      	adds	r3, #2
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	e007      	b.n	800611e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	3301      	adds	r3, #1
 800611c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1cf      	bne.n	80060d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2200      	movs	r2, #0
 800613e:	2140      	movs	r1, #64	; 0x40
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fa83 	bl	800664c <UART_WaitOnFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e006      	b.n	800615e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800615c:	2302      	movs	r3, #2
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b08a      	sub	sp, #40	; 0x28
 800616a:	af02      	add	r7, sp, #8
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b20      	cmp	r3, #32
 8006184:	f040 808c 	bne.w	80062a0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_UART_Receive+0x2e>
 800618e:	88fb      	ldrh	r3, [r7, #6]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e084      	b.n	80062a2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_UART_Receive+0x40>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e07d      	b.n	80062a2 <HAL_UART_Receive+0x13c>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2222      	movs	r2, #34	; 0x22
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061c2:	f7fc fe2d 	bl	8002e20 <HAL_GetTick>
 80061c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	88fa      	ldrh	r2, [r7, #6]
 80061d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061dc:	d108      	bne.n	80061f0 <HAL_UART_Receive+0x8a>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d104      	bne.n	80061f0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	e003      	b.n	80061f8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006200:	e043      	b.n	800628a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2200      	movs	r2, #0
 800620a:	2120      	movs	r1, #32
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fa1d 	bl	800664c <UART_WaitOnFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e042      	b.n	80062a2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10c      	bne.n	800623c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622e:	b29a      	uxth	r2, r3
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	3302      	adds	r3, #2
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e01f      	b.n	800627c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006244:	d007      	beq.n	8006256 <HAL_UART_Receive+0xf0>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <HAL_UART_Receive+0xfe>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	e008      	b.n	8006276 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006270:	b2da      	uxtb	r2, r3
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3301      	adds	r3, #1
 800627a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800628e:	b29b      	uxth	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1b6      	bne.n	8006202 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	e000      	b.n	80062a2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
  }
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	; 0x28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10d      	bne.n	80062fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_UART_IRQHandler+0x52>
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa99 	bl	800682e <UART_Receive_IT>
      return;
 80062fc:	e17b      	b.n	80065f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80b1 	beq.w	8006468 <HAL_UART_IRQHandler+0x1bc>
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d105      	bne.n	800631c <HAL_UART_IRQHandler+0x70>
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 80a6 	beq.w	8006468 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_UART_IRQHandler+0x90>
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	f043 0201 	orr.w	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <HAL_UART_IRQHandler+0xb0>
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	f043 0202 	orr.w	r2, r3, #2
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_UART_IRQHandler+0xd0>
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	f043 0204 	orr.w	r2, r3, #4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00f      	beq.n	80063a6 <HAL_UART_IRQHandler+0xfa>
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <HAL_UART_IRQHandler+0xee>
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f043 0208 	orr.w	r2, r3, #8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 811e 	beq.w	80065ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_UART_IRQHandler+0x11e>
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fa32 	bl	800682e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d102      	bne.n	80063f2 <HAL_UART_IRQHandler+0x146>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d031      	beq.n	8006456 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f974 	bl	80066e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d023      	beq.n	800644e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006414:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	2b00      	cmp	r3, #0
 800641c:	d013      	beq.n	8006446 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	4a76      	ldr	r2, [pc, #472]	; (80065fc <HAL_UART_IRQHandler+0x350>)
 8006424:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	4618      	mov	r0, r3
 800642c:	f7fc fe6e 	bl	800310c <HAL_DMA_Abort_IT>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d016      	beq.n	8006464 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006440:	4610      	mov	r0, r2
 8006442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006444:	e00e      	b.n	8006464 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f8ec 	bl	8006624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644c:	e00a      	b.n	8006464 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8e8 	bl	8006624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006454:	e006      	b.n	8006464 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f8e4 	bl	8006624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006462:	e0c3      	b.n	80065ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	bf00      	nop
    return;
 8006466:	e0c1      	b.n	80065ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	2b01      	cmp	r3, #1
 800646e:	f040 80a1 	bne.w	80065b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 809b 	beq.w	80065b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8095 	beq.w	80065b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d04e      	beq.n	800654c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80064b8:	8a3b      	ldrh	r3, [r7, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 8098 	beq.w	80065f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064c4:	8a3a      	ldrh	r2, [r7, #16]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	f080 8092 	bcs.w	80065f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	8a3a      	ldrh	r2, [r7, #16]
 80064d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d02b      	beq.n	8006534 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695a      	ldr	r2, [r3, #20]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800650a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0210 	bic.w	r2, r2, #16
 8006528:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	4618      	mov	r0, r3
 8006530:	f7fc fdb1 	bl	8003096 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800653c:	b29b      	uxth	r3, r3
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	b29b      	uxth	r3, r3
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f876 	bl	8006636 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800654a:	e051      	b.n	80065f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006554:	b29b      	uxth	r3, r3
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d047      	beq.n	80065f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006564:	8a7b      	ldrh	r3, [r7, #18]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d044      	beq.n	80065f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006578:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695a      	ldr	r2, [r3, #20]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0201 	bic.w	r2, r2, #1
 8006588:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0210 	bic.w	r2, r2, #16
 80065a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065a8:	8a7b      	ldrh	r3, [r7, #18]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f842 	bl	8006636 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80065b2:	e01f      	b.n	80065f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_UART_IRQHandler+0x324>
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f8c9 	bl	8006760 <UART_Transmit_IT>
    return;
 80065ce:	e012      	b.n	80065f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00d      	beq.n	80065f6 <HAL_UART_IRQHandler+0x34a>
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d008      	beq.n	80065f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f90a 	bl	80067fe <UART_EndTransmit_IT>
    return;
 80065ea:	e004      	b.n	80065f6 <HAL_UART_IRQHandler+0x34a>
    return;
 80065ec:	bf00      	nop
 80065ee:	e002      	b.n	80065f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80065f0:	bf00      	nop
 80065f2:	e000      	b.n	80065f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80065f4:	bf00      	nop
  }
}
 80065f6:	3728      	adds	r7, #40	; 0x28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	08006739 	.word	0x08006739

08006600 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr

08006612 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr

08006636 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	4613      	mov	r3, r2
 800665a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800665c:	e02c      	b.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006664:	d028      	beq.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <UART_WaitOnFlagUntilTimeout+0x30>
 800666c:	f7fc fbd8 	bl	8002e20 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	429a      	cmp	r2, r3
 800667a:	d21d      	bcs.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800668a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695a      	ldr	r2, [r3, #20]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e00f      	b.n	80066d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4013      	ands	r3, r2
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	bf0c      	ite	eq
 80066c8:	2301      	moveq	r3, #1
 80066ca:	2300      	movne	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d0c3      	beq.n	800665e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	2b01      	cmp	r3, #1
 800670e:	d107      	bne.n	8006720 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0210 	bic.w	r2, r2, #16
 800671e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ff66 	bl	8006624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b21      	cmp	r3, #33	; 0x21
 8006772:	d13e      	bne.n	80067f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677c:	d114      	bne.n	80067a8 <UART_Transmit_IT+0x48>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d110      	bne.n	80067a8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800679a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	1c9a      	adds	r2, r3, #2
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	621a      	str	r2, [r3, #32]
 80067a6:	e008      	b.n	80067ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	1c59      	adds	r1, r3, #1
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6211      	str	r1, [r2, #32]
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	4619      	mov	r1, r3
 80067c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10f      	bne.n	80067ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067f2:	2302      	movs	r3, #2
  }
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bc80      	pop	{r7}
 80067fc:	4770      	bx	lr

080067fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff feee 	bl	8006600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b22      	cmp	r3, #34	; 0x22
 8006840:	f040 8099 	bne.w	8006976 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684c:	d117      	bne.n	800687e <UART_Receive_IT+0x50>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d113      	bne.n	800687e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686c:	b29a      	uxth	r2, r3
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	1c9a      	adds	r2, r3, #2
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
 800687c:	e026      	b.n	80068cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006884:	2300      	movs	r3, #0
 8006886:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006890:	d007      	beq.n	80068a2 <UART_Receive_IT+0x74>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <UART_Receive_IT+0x82>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e008      	b.n	80068c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4619      	mov	r1, r3
 80068da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d148      	bne.n	8006972 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0220 	bic.w	r2, r2, #32
 80068ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695a      	ldr	r2, [r3, #20]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	2b01      	cmp	r3, #1
 800691e:	d123      	bne.n	8006968 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0210 	bic.w	r2, r2, #16
 8006934:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0310 	and.w	r3, r3, #16
 8006940:	2b10      	cmp	r3, #16
 8006942:	d10a      	bne.n	800695a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fe68 	bl	8006636 <HAL_UARTEx_RxEventCallback>
 8006966:	e002      	b.n	800696e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff fe52 	bl	8006612 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	e002      	b.n	8006978 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	e000      	b.n	8006978 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006976:	2302      	movs	r3, #2
  }
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80069ba:	f023 030c 	bic.w	r3, r3, #12
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6812      	ldr	r2, [r2, #0]
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	430b      	orrs	r3, r1
 80069c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a2c      	ldr	r2, [pc, #176]	; (8006a94 <UART_SetConfig+0x114>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d103      	bne.n	80069f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069e8:	f7fd fa68 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	e002      	b.n	80069f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069f0:	f7fd fa50 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 80069f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	009a      	lsls	r2, r3, #2
 8006a00:	441a      	add	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	4a22      	ldr	r2, [pc, #136]	; (8006a98 <UART_SetConfig+0x118>)
 8006a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	0119      	lsls	r1, r3, #4
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009a      	lsls	r2, r3, #2
 8006a20:	441a      	add	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <UART_SetConfig+0x118>)
 8006a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	2064      	movs	r0, #100	; 0x64
 8006a36:	fb00 f303 	mul.w	r3, r0, r3
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	3332      	adds	r3, #50	; 0x32
 8006a40:	4a15      	ldr	r2, [pc, #84]	; (8006a98 <UART_SetConfig+0x118>)
 8006a42:	fba2 2303 	umull	r2, r3, r2, r3
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a4c:	4419      	add	r1, r3
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	009a      	lsls	r2, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a64:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <UART_SetConfig+0x118>)
 8006a66:	fba3 0302 	umull	r0, r3, r3, r2
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	2064      	movs	r0, #100	; 0x64
 8006a6e:	fb00 f303 	mul.w	r3, r0, r3
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	3332      	adds	r3, #50	; 0x32
 8006a78:	4a07      	ldr	r2, [pc, #28]	; (8006a98 <UART_SetConfig+0x118>)
 8006a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	f003 020f 	and.w	r2, r3, #15
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	440a      	add	r2, r1
 8006a8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a8c:	bf00      	nop
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40013800 	.word	0x40013800
 8006a98:	51eb851f 	.word	0x51eb851f

08006a9c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	6812      	ldr	r2, [r2, #0]
 8006ab4:	f023 0101 	bic.w	r1, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d102      	bne.n	8006acc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006ac6:	2340      	movs	r3, #64	; 0x40
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	e001      	b.n	8006ad0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006adc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006ae2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006ae8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006aee:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006af4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006afa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006b00:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8006b06:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8006b0c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8006b2a:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <FSMC_NORSRAM_Init+0xd0>)
 8006b2c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b34:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006b3c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	ea02 0103 	and.w	r1, r2, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	4319      	orrs	r1, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	0008fb7f 	.word	0x0008fb7f

08006b70 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b86:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	431a      	orrs	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	041b      	lsls	r3, r3, #16
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	051b      	lsls	r3, r3, #20
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	3b02      	subs	r3, #2
 8006bb6:	061b      	lsls	r3, r3, #24
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	3201      	adds	r2, #1
 8006bc4:	4319      	orrs	r1, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bec:	d11d      	bne.n	8006c2a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bf6:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	6811      	ldr	r1, [r2, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	6852      	ldr	r2, [r2, #4]
 8006c02:	0112      	lsls	r2, r2, #4
 8006c04:	4311      	orrs	r1, r2
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	6892      	ldr	r2, [r2, #8]
 8006c0a:	0212      	lsls	r2, r2, #8
 8006c0c:	4311      	orrs	r1, r2
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	6992      	ldr	r2, [r2, #24]
 8006c12:	4311      	orrs	r1, r2
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	68d2      	ldr	r2, [r2, #12]
 8006c18:	0412      	lsls	r2, r2, #16
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	ea43 0102 	orr.w	r1, r3, r2
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006c28:	e005      	b.n	8006c36 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	cff00000 	.word	0xcff00000

08006c48 <__errno>:
 8006c48:	4b01      	ldr	r3, [pc, #4]	; (8006c50 <__errno+0x8>)
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20000010 	.word	0x20000010

08006c54 <__libc_init_array>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	2600      	movs	r6, #0
 8006c58:	4d0c      	ldr	r5, [pc, #48]	; (8006c8c <__libc_init_array+0x38>)
 8006c5a:	4c0d      	ldr	r4, [pc, #52]	; (8006c90 <__libc_init_array+0x3c>)
 8006c5c:	1b64      	subs	r4, r4, r5
 8006c5e:	10a4      	asrs	r4, r4, #2
 8006c60:	42a6      	cmp	r6, r4
 8006c62:	d109      	bne.n	8006c78 <__libc_init_array+0x24>
 8006c64:	f002 ff0e 	bl	8009a84 <_init>
 8006c68:	2600      	movs	r6, #0
 8006c6a:	4d0a      	ldr	r5, [pc, #40]	; (8006c94 <__libc_init_array+0x40>)
 8006c6c:	4c0a      	ldr	r4, [pc, #40]	; (8006c98 <__libc_init_array+0x44>)
 8006c6e:	1b64      	subs	r4, r4, r5
 8006c70:	10a4      	asrs	r4, r4, #2
 8006c72:	42a6      	cmp	r6, r4
 8006c74:	d105      	bne.n	8006c82 <__libc_init_array+0x2e>
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7c:	4798      	blx	r3
 8006c7e:	3601      	adds	r6, #1
 8006c80:	e7ee      	b.n	8006c60 <__libc_init_array+0xc>
 8006c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c86:	4798      	blx	r3
 8006c88:	3601      	adds	r6, #1
 8006c8a:	e7f2      	b.n	8006c72 <__libc_init_array+0x1e>
 8006c8c:	0800a584 	.word	0x0800a584
 8006c90:	0800a584 	.word	0x0800a584
 8006c94:	0800a584 	.word	0x0800a584
 8006c98:	0800a588 	.word	0x0800a588

08006c9c <memcpy>:
 8006c9c:	440a      	add	r2, r1
 8006c9e:	4291      	cmp	r1, r2
 8006ca0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ca4:	d100      	bne.n	8006ca8 <memcpy+0xc>
 8006ca6:	4770      	bx	lr
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cae:	4291      	cmp	r1, r2
 8006cb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cb4:	d1f9      	bne.n	8006caa <memcpy+0xe>
 8006cb6:	bd10      	pop	{r4, pc}

08006cb8 <memset>:
 8006cb8:	4603      	mov	r3, r0
 8006cba:	4402      	add	r2, r0
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d100      	bne.n	8006cc2 <memset+0xa>
 8006cc0:	4770      	bx	lr
 8006cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cc6:	e7f9      	b.n	8006cbc <memset+0x4>

08006cc8 <__cvt>:
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cce:	461f      	mov	r7, r3
 8006cd0:	bfbb      	ittet	lt
 8006cd2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006cd6:	461f      	movlt	r7, r3
 8006cd8:	2300      	movge	r3, #0
 8006cda:	232d      	movlt	r3, #45	; 0x2d
 8006cdc:	b088      	sub	sp, #32
 8006cde:	4614      	mov	r4, r2
 8006ce0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ce2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006ce4:	7013      	strb	r3, [r2, #0]
 8006ce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ce8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006cec:	f023 0820 	bic.w	r8, r3, #32
 8006cf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cf4:	d005      	beq.n	8006d02 <__cvt+0x3a>
 8006cf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cfa:	d100      	bne.n	8006cfe <__cvt+0x36>
 8006cfc:	3501      	adds	r5, #1
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e000      	b.n	8006d04 <__cvt+0x3c>
 8006d02:	2303      	movs	r3, #3
 8006d04:	aa07      	add	r2, sp, #28
 8006d06:	9204      	str	r2, [sp, #16]
 8006d08:	aa06      	add	r2, sp, #24
 8006d0a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006d0e:	e9cd 3500 	strd	r3, r5, [sp]
 8006d12:	4622      	mov	r2, r4
 8006d14:	463b      	mov	r3, r7
 8006d16:	f000 fcf7 	bl	8007708 <_dtoa_r>
 8006d1a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d1e:	4606      	mov	r6, r0
 8006d20:	d102      	bne.n	8006d28 <__cvt+0x60>
 8006d22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d24:	07db      	lsls	r3, r3, #31
 8006d26:	d522      	bpl.n	8006d6e <__cvt+0xa6>
 8006d28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d2c:	eb06 0905 	add.w	r9, r6, r5
 8006d30:	d110      	bne.n	8006d54 <__cvt+0x8c>
 8006d32:	7833      	ldrb	r3, [r6, #0]
 8006d34:	2b30      	cmp	r3, #48	; 0x30
 8006d36:	d10a      	bne.n	8006d4e <__cvt+0x86>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 fea8 	bl	8000a94 <__aeabi_dcmpeq>
 8006d44:	b918      	cbnz	r0, 8006d4e <__cvt+0x86>
 8006d46:	f1c5 0501 	rsb	r5, r5, #1
 8006d4a:	f8ca 5000 	str.w	r5, [sl]
 8006d4e:	f8da 3000 	ldr.w	r3, [sl]
 8006d52:	4499      	add	r9, r3
 8006d54:	2200      	movs	r2, #0
 8006d56:	2300      	movs	r3, #0
 8006d58:	4620      	mov	r0, r4
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	f7f9 fe9a 	bl	8000a94 <__aeabi_dcmpeq>
 8006d60:	b108      	cbz	r0, 8006d66 <__cvt+0x9e>
 8006d62:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d66:	2230      	movs	r2, #48	; 0x30
 8006d68:	9b07      	ldr	r3, [sp, #28]
 8006d6a:	454b      	cmp	r3, r9
 8006d6c:	d307      	bcc.n	8006d7e <__cvt+0xb6>
 8006d6e:	4630      	mov	r0, r6
 8006d70:	9b07      	ldr	r3, [sp, #28]
 8006d72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d74:	1b9b      	subs	r3, r3, r6
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	b008      	add	sp, #32
 8006d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7e:	1c59      	adds	r1, r3, #1
 8006d80:	9107      	str	r1, [sp, #28]
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e7f0      	b.n	8006d68 <__cvt+0xa0>

08006d86 <__exponent>:
 8006d86:	4603      	mov	r3, r0
 8006d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d8a:	2900      	cmp	r1, #0
 8006d8c:	f803 2b02 	strb.w	r2, [r3], #2
 8006d90:	bfb6      	itet	lt
 8006d92:	222d      	movlt	r2, #45	; 0x2d
 8006d94:	222b      	movge	r2, #43	; 0x2b
 8006d96:	4249      	neglt	r1, r1
 8006d98:	2909      	cmp	r1, #9
 8006d9a:	7042      	strb	r2, [r0, #1]
 8006d9c:	dd2b      	ble.n	8006df6 <__exponent+0x70>
 8006d9e:	f10d 0407 	add.w	r4, sp, #7
 8006da2:	46a4      	mov	ip, r4
 8006da4:	270a      	movs	r7, #10
 8006da6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006daa:	460a      	mov	r2, r1
 8006dac:	46a6      	mov	lr, r4
 8006dae:	fb07 1516 	mls	r5, r7, r6, r1
 8006db2:	2a63      	cmp	r2, #99	; 0x63
 8006db4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006db8:	4631      	mov	r1, r6
 8006dba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006dbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006dc2:	dcf0      	bgt.n	8006da6 <__exponent+0x20>
 8006dc4:	3130      	adds	r1, #48	; 0x30
 8006dc6:	f1ae 0502 	sub.w	r5, lr, #2
 8006dca:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006dce:	4629      	mov	r1, r5
 8006dd0:	1c44      	adds	r4, r0, #1
 8006dd2:	4561      	cmp	r1, ip
 8006dd4:	d30a      	bcc.n	8006dec <__exponent+0x66>
 8006dd6:	f10d 0209 	add.w	r2, sp, #9
 8006dda:	eba2 020e 	sub.w	r2, r2, lr
 8006dde:	4565      	cmp	r5, ip
 8006de0:	bf88      	it	hi
 8006de2:	2200      	movhi	r2, #0
 8006de4:	4413      	add	r3, r2
 8006de6:	1a18      	subs	r0, r3, r0
 8006de8:	b003      	add	sp, #12
 8006dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006df0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006df4:	e7ed      	b.n	8006dd2 <__exponent+0x4c>
 8006df6:	2330      	movs	r3, #48	; 0x30
 8006df8:	3130      	adds	r1, #48	; 0x30
 8006dfa:	7083      	strb	r3, [r0, #2]
 8006dfc:	70c1      	strb	r1, [r0, #3]
 8006dfe:	1d03      	adds	r3, r0, #4
 8006e00:	e7f1      	b.n	8006de6 <__exponent+0x60>
	...

08006e04 <_printf_float>:
 8006e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	b091      	sub	sp, #68	; 0x44
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e10:	4616      	mov	r6, r2
 8006e12:	461f      	mov	r7, r3
 8006e14:	4605      	mov	r5, r0
 8006e16:	f001 fa65 	bl	80082e4 <_localeconv_r>
 8006e1a:	6803      	ldr	r3, [r0, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e20:	f7f9 fa0c 	bl	800023c <strlen>
 8006e24:	2300      	movs	r3, #0
 8006e26:	930e      	str	r3, [sp, #56]	; 0x38
 8006e28:	f8d8 3000 	ldr.w	r3, [r8]
 8006e2c:	900a      	str	r0, [sp, #40]	; 0x28
 8006e2e:	3307      	adds	r3, #7
 8006e30:	f023 0307 	bic.w	r3, r3, #7
 8006e34:	f103 0208 	add.w	r2, r3, #8
 8006e38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006e3c:	f8d4 b000 	ldr.w	fp, [r4]
 8006e40:	f8c8 2000 	str.w	r2, [r8]
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e4c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006e50:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006e54:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4b9c      	ldr	r3, [pc, #624]	; (80070d0 <_printf_float+0x2cc>)
 8006e5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e60:	f7f9 fe4a 	bl	8000af8 <__aeabi_dcmpun>
 8006e64:	bb70      	cbnz	r0, 8006ec4 <_printf_float+0xc0>
 8006e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	4b98      	ldr	r3, [pc, #608]	; (80070d0 <_printf_float+0x2cc>)
 8006e6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e70:	f7f9 fe24 	bl	8000abc <__aeabi_dcmple>
 8006e74:	bb30      	cbnz	r0, 8006ec4 <_printf_float+0xc0>
 8006e76:	2200      	movs	r2, #0
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	4651      	mov	r1, sl
 8006e7e:	f7f9 fe13 	bl	8000aa8 <__aeabi_dcmplt>
 8006e82:	b110      	cbz	r0, 8006e8a <_printf_float+0x86>
 8006e84:	232d      	movs	r3, #45	; 0x2d
 8006e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e8a:	4b92      	ldr	r3, [pc, #584]	; (80070d4 <_printf_float+0x2d0>)
 8006e8c:	4892      	ldr	r0, [pc, #584]	; (80070d8 <_printf_float+0x2d4>)
 8006e8e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006e92:	bf94      	ite	ls
 8006e94:	4698      	movls	r8, r3
 8006e96:	4680      	movhi	r8, r0
 8006e98:	2303      	movs	r3, #3
 8006e9a:	f04f 0a00 	mov.w	sl, #0
 8006e9e:	6123      	str	r3, [r4, #16]
 8006ea0:	f02b 0304 	bic.w	r3, fp, #4
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	4633      	mov	r3, r6
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4628      	mov	r0, r5
 8006eac:	9700      	str	r7, [sp, #0]
 8006eae:	aa0f      	add	r2, sp, #60	; 0x3c
 8006eb0:	f000 f9d4 	bl	800725c <_printf_common>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f040 8090 	bne.w	8006fda <_printf_float+0x1d6>
 8006eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ebe:	b011      	add	sp, #68	; 0x44
 8006ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	4653      	mov	r3, sl
 8006ec8:	4640      	mov	r0, r8
 8006eca:	4651      	mov	r1, sl
 8006ecc:	f7f9 fe14 	bl	8000af8 <__aeabi_dcmpun>
 8006ed0:	b148      	cbz	r0, 8006ee6 <_printf_float+0xe2>
 8006ed2:	f1ba 0f00 	cmp.w	sl, #0
 8006ed6:	bfb8      	it	lt
 8006ed8:	232d      	movlt	r3, #45	; 0x2d
 8006eda:	4880      	ldr	r0, [pc, #512]	; (80070dc <_printf_float+0x2d8>)
 8006edc:	bfb8      	it	lt
 8006ede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ee2:	4b7f      	ldr	r3, [pc, #508]	; (80070e0 <_printf_float+0x2dc>)
 8006ee4:	e7d3      	b.n	8006e8e <_printf_float+0x8a>
 8006ee6:	6863      	ldr	r3, [r4, #4]
 8006ee8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	d142      	bne.n	8006f76 <_printf_float+0x172>
 8006ef0:	2306      	movs	r3, #6
 8006ef2:	6063      	str	r3, [r4, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	9206      	str	r2, [sp, #24]
 8006ef8:	aa0e      	add	r2, sp, #56	; 0x38
 8006efa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006efe:	aa0d      	add	r2, sp, #52	; 0x34
 8006f00:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f04:	9203      	str	r2, [sp, #12]
 8006f06:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006f0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	6863      	ldr	r3, [r4, #4]
 8006f12:	4642      	mov	r2, r8
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	4628      	mov	r0, r5
 8006f18:	4653      	mov	r3, sl
 8006f1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f1c:	f7ff fed4 	bl	8006cc8 <__cvt>
 8006f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f22:	4680      	mov	r8, r0
 8006f24:	2947      	cmp	r1, #71	; 0x47
 8006f26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f28:	d108      	bne.n	8006f3c <_printf_float+0x138>
 8006f2a:	1cc8      	adds	r0, r1, #3
 8006f2c:	db02      	blt.n	8006f34 <_printf_float+0x130>
 8006f2e:	6863      	ldr	r3, [r4, #4]
 8006f30:	4299      	cmp	r1, r3
 8006f32:	dd40      	ble.n	8006fb6 <_printf_float+0x1b2>
 8006f34:	f1a9 0902 	sub.w	r9, r9, #2
 8006f38:	fa5f f989 	uxtb.w	r9, r9
 8006f3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f40:	d81f      	bhi.n	8006f82 <_printf_float+0x17e>
 8006f42:	464a      	mov	r2, r9
 8006f44:	3901      	subs	r1, #1
 8006f46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f4a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f4c:	f7ff ff1b 	bl	8006d86 <__exponent>
 8006f50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f52:	4682      	mov	sl, r0
 8006f54:	1813      	adds	r3, r2, r0
 8006f56:	2a01      	cmp	r2, #1
 8006f58:	6123      	str	r3, [r4, #16]
 8006f5a:	dc02      	bgt.n	8006f62 <_printf_float+0x15e>
 8006f5c:	6822      	ldr	r2, [r4, #0]
 8006f5e:	07d2      	lsls	r2, r2, #31
 8006f60:	d501      	bpl.n	8006f66 <_printf_float+0x162>
 8006f62:	3301      	adds	r3, #1
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d09b      	beq.n	8006ea6 <_printf_float+0xa2>
 8006f6e:	232d      	movs	r3, #45	; 0x2d
 8006f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f74:	e797      	b.n	8006ea6 <_printf_float+0xa2>
 8006f76:	2947      	cmp	r1, #71	; 0x47
 8006f78:	d1bc      	bne.n	8006ef4 <_printf_float+0xf0>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1ba      	bne.n	8006ef4 <_printf_float+0xf0>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e7b7      	b.n	8006ef2 <_printf_float+0xee>
 8006f82:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006f86:	d118      	bne.n	8006fba <_printf_float+0x1b6>
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	dd0b      	ble.n	8006fa6 <_printf_float+0x1a2>
 8006f8e:	6121      	str	r1, [r4, #16]
 8006f90:	b913      	cbnz	r3, 8006f98 <_printf_float+0x194>
 8006f92:	6822      	ldr	r2, [r4, #0]
 8006f94:	07d0      	lsls	r0, r2, #31
 8006f96:	d502      	bpl.n	8006f9e <_printf_float+0x19a>
 8006f98:	3301      	adds	r3, #1
 8006f9a:	440b      	add	r3, r1
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	f04f 0a00 	mov.w	sl, #0
 8006fa2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fa4:	e7df      	b.n	8006f66 <_printf_float+0x162>
 8006fa6:	b913      	cbnz	r3, 8006fae <_printf_float+0x1aa>
 8006fa8:	6822      	ldr	r2, [r4, #0]
 8006faa:	07d2      	lsls	r2, r2, #31
 8006fac:	d501      	bpl.n	8006fb2 <_printf_float+0x1ae>
 8006fae:	3302      	adds	r3, #2
 8006fb0:	e7f4      	b.n	8006f9c <_printf_float+0x198>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e7f2      	b.n	8006f9c <_printf_float+0x198>
 8006fb6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fbc:	4299      	cmp	r1, r3
 8006fbe:	db05      	blt.n	8006fcc <_printf_float+0x1c8>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	6121      	str	r1, [r4, #16]
 8006fc4:	07d8      	lsls	r0, r3, #31
 8006fc6:	d5ea      	bpl.n	8006f9e <_printf_float+0x19a>
 8006fc8:	1c4b      	adds	r3, r1, #1
 8006fca:	e7e7      	b.n	8006f9c <_printf_float+0x198>
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	bfcc      	ite	gt
 8006fd0:	2201      	movgt	r2, #1
 8006fd2:	f1c1 0202 	rsble	r2, r1, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	e7e0      	b.n	8006f9c <_printf_float+0x198>
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	055a      	lsls	r2, r3, #21
 8006fde:	d407      	bmi.n	8006ff0 <_printf_float+0x1ec>
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	4642      	mov	r2, r8
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	d12b      	bne.n	8007046 <_printf_float+0x242>
 8006fee:	e764      	b.n	8006eba <_printf_float+0xb6>
 8006ff0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ff4:	f240 80dd 	bls.w	80071b2 <_printf_float+0x3ae>
 8006ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2300      	movs	r3, #0
 8007000:	f7f9 fd48 	bl	8000a94 <__aeabi_dcmpeq>
 8007004:	2800      	cmp	r0, #0
 8007006:	d033      	beq.n	8007070 <_printf_float+0x26c>
 8007008:	2301      	movs	r3, #1
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	4a35      	ldr	r2, [pc, #212]	; (80070e4 <_printf_float+0x2e0>)
 8007010:	47b8      	blx	r7
 8007012:	3001      	adds	r0, #1
 8007014:	f43f af51 	beq.w	8006eba <_printf_float+0xb6>
 8007018:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800701c:	429a      	cmp	r2, r3
 800701e:	db02      	blt.n	8007026 <_printf_float+0x222>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	07d8      	lsls	r0, r3, #31
 8007024:	d50f      	bpl.n	8007046 <_printf_float+0x242>
 8007026:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800702a:	4631      	mov	r1, r6
 800702c:	4628      	mov	r0, r5
 800702e:	47b8      	blx	r7
 8007030:	3001      	adds	r0, #1
 8007032:	f43f af42 	beq.w	8006eba <_printf_float+0xb6>
 8007036:	f04f 0800 	mov.w	r8, #0
 800703a:	f104 091a 	add.w	r9, r4, #26
 800703e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007040:	3b01      	subs	r3, #1
 8007042:	4543      	cmp	r3, r8
 8007044:	dc09      	bgt.n	800705a <_printf_float+0x256>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	079b      	lsls	r3, r3, #30
 800704a:	f100 8102 	bmi.w	8007252 <_printf_float+0x44e>
 800704e:	68e0      	ldr	r0, [r4, #12]
 8007050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007052:	4298      	cmp	r0, r3
 8007054:	bfb8      	it	lt
 8007056:	4618      	movlt	r0, r3
 8007058:	e731      	b.n	8006ebe <_printf_float+0xba>
 800705a:	2301      	movs	r3, #1
 800705c:	464a      	mov	r2, r9
 800705e:	4631      	mov	r1, r6
 8007060:	4628      	mov	r0, r5
 8007062:	47b8      	blx	r7
 8007064:	3001      	adds	r0, #1
 8007066:	f43f af28 	beq.w	8006eba <_printf_float+0xb6>
 800706a:	f108 0801 	add.w	r8, r8, #1
 800706e:	e7e6      	b.n	800703e <_printf_float+0x23a>
 8007070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007072:	2b00      	cmp	r3, #0
 8007074:	dc38      	bgt.n	80070e8 <_printf_float+0x2e4>
 8007076:	2301      	movs	r3, #1
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <_printf_float+0x2e0>)
 800707e:	47b8      	blx	r7
 8007080:	3001      	adds	r0, #1
 8007082:	f43f af1a 	beq.w	8006eba <_printf_float+0xb6>
 8007086:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800708a:	4313      	orrs	r3, r2
 800708c:	d102      	bne.n	8007094 <_printf_float+0x290>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	07d9      	lsls	r1, r3, #31
 8007092:	d5d8      	bpl.n	8007046 <_printf_float+0x242>
 8007094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007098:	4631      	mov	r1, r6
 800709a:	4628      	mov	r0, r5
 800709c:	47b8      	blx	r7
 800709e:	3001      	adds	r0, #1
 80070a0:	f43f af0b 	beq.w	8006eba <_printf_float+0xb6>
 80070a4:	f04f 0900 	mov.w	r9, #0
 80070a8:	f104 0a1a 	add.w	sl, r4, #26
 80070ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ae:	425b      	negs	r3, r3
 80070b0:	454b      	cmp	r3, r9
 80070b2:	dc01      	bgt.n	80070b8 <_printf_float+0x2b4>
 80070b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b6:	e794      	b.n	8006fe2 <_printf_float+0x1de>
 80070b8:	2301      	movs	r3, #1
 80070ba:	4652      	mov	r2, sl
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	f43f aef9 	beq.w	8006eba <_printf_float+0xb6>
 80070c8:	f109 0901 	add.w	r9, r9, #1
 80070cc:	e7ee      	b.n	80070ac <_printf_float+0x2a8>
 80070ce:	bf00      	nop
 80070d0:	7fefffff 	.word	0x7fefffff
 80070d4:	0800a1ac 	.word	0x0800a1ac
 80070d8:	0800a1b0 	.word	0x0800a1b0
 80070dc:	0800a1b8 	.word	0x0800a1b8
 80070e0:	0800a1b4 	.word	0x0800a1b4
 80070e4:	0800a1bc 	.word	0x0800a1bc
 80070e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ec:	429a      	cmp	r2, r3
 80070ee:	bfa8      	it	ge
 80070f0:	461a      	movge	r2, r3
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	4691      	mov	r9, r2
 80070f6:	dc37      	bgt.n	8007168 <_printf_float+0x364>
 80070f8:	f04f 0b00 	mov.w	fp, #0
 80070fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007100:	f104 021a 	add.w	r2, r4, #26
 8007104:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007108:	ebaa 0309 	sub.w	r3, sl, r9
 800710c:	455b      	cmp	r3, fp
 800710e:	dc33      	bgt.n	8007178 <_printf_float+0x374>
 8007110:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007114:	429a      	cmp	r2, r3
 8007116:	db3b      	blt.n	8007190 <_printf_float+0x38c>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	07da      	lsls	r2, r3, #31
 800711c:	d438      	bmi.n	8007190 <_printf_float+0x38c>
 800711e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007120:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007122:	eba3 020a 	sub.w	r2, r3, sl
 8007126:	eba3 0901 	sub.w	r9, r3, r1
 800712a:	4591      	cmp	r9, r2
 800712c:	bfa8      	it	ge
 800712e:	4691      	movge	r9, r2
 8007130:	f1b9 0f00 	cmp.w	r9, #0
 8007134:	dc34      	bgt.n	80071a0 <_printf_float+0x39c>
 8007136:	f04f 0800 	mov.w	r8, #0
 800713a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800713e:	f104 0a1a 	add.w	sl, r4, #26
 8007142:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	eba3 0309 	sub.w	r3, r3, r9
 800714c:	4543      	cmp	r3, r8
 800714e:	f77f af7a 	ble.w	8007046 <_printf_float+0x242>
 8007152:	2301      	movs	r3, #1
 8007154:	4652      	mov	r2, sl
 8007156:	4631      	mov	r1, r6
 8007158:	4628      	mov	r0, r5
 800715a:	47b8      	blx	r7
 800715c:	3001      	adds	r0, #1
 800715e:	f43f aeac 	beq.w	8006eba <_printf_float+0xb6>
 8007162:	f108 0801 	add.w	r8, r8, #1
 8007166:	e7ec      	b.n	8007142 <_printf_float+0x33e>
 8007168:	4613      	mov	r3, r2
 800716a:	4631      	mov	r1, r6
 800716c:	4642      	mov	r2, r8
 800716e:	4628      	mov	r0, r5
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	d1c0      	bne.n	80070f8 <_printf_float+0x2f4>
 8007176:	e6a0      	b.n	8006eba <_printf_float+0xb6>
 8007178:	2301      	movs	r3, #1
 800717a:	4631      	mov	r1, r6
 800717c:	4628      	mov	r0, r5
 800717e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f ae99 	beq.w	8006eba <_printf_float+0xb6>
 8007188:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800718a:	f10b 0b01 	add.w	fp, fp, #1
 800718e:	e7b9      	b.n	8007104 <_printf_float+0x300>
 8007190:	4631      	mov	r1, r6
 8007192:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007196:	4628      	mov	r0, r5
 8007198:	47b8      	blx	r7
 800719a:	3001      	adds	r0, #1
 800719c:	d1bf      	bne.n	800711e <_printf_float+0x31a>
 800719e:	e68c      	b.n	8006eba <_printf_float+0xb6>
 80071a0:	464b      	mov	r3, r9
 80071a2:	4631      	mov	r1, r6
 80071a4:	4628      	mov	r0, r5
 80071a6:	eb08 020a 	add.w	r2, r8, sl
 80071aa:	47b8      	blx	r7
 80071ac:	3001      	adds	r0, #1
 80071ae:	d1c2      	bne.n	8007136 <_printf_float+0x332>
 80071b0:	e683      	b.n	8006eba <_printf_float+0xb6>
 80071b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071b4:	2a01      	cmp	r2, #1
 80071b6:	dc01      	bgt.n	80071bc <_printf_float+0x3b8>
 80071b8:	07db      	lsls	r3, r3, #31
 80071ba:	d537      	bpl.n	800722c <_printf_float+0x428>
 80071bc:	2301      	movs	r3, #1
 80071be:	4642      	mov	r2, r8
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f ae77 	beq.w	8006eba <_printf_float+0xb6>
 80071cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071d0:	4631      	mov	r1, r6
 80071d2:	4628      	mov	r0, r5
 80071d4:	47b8      	blx	r7
 80071d6:	3001      	adds	r0, #1
 80071d8:	f43f ae6f 	beq.w	8006eba <_printf_float+0xb6>
 80071dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071e0:	2200      	movs	r2, #0
 80071e2:	2300      	movs	r3, #0
 80071e4:	f7f9 fc56 	bl	8000a94 <__aeabi_dcmpeq>
 80071e8:	b9d8      	cbnz	r0, 8007222 <_printf_float+0x41e>
 80071ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ec:	f108 0201 	add.w	r2, r8, #1
 80071f0:	3b01      	subs	r3, #1
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	d10e      	bne.n	800721a <_printf_float+0x416>
 80071fc:	e65d      	b.n	8006eba <_printf_float+0xb6>
 80071fe:	2301      	movs	r3, #1
 8007200:	464a      	mov	r2, r9
 8007202:	4631      	mov	r1, r6
 8007204:	4628      	mov	r0, r5
 8007206:	47b8      	blx	r7
 8007208:	3001      	adds	r0, #1
 800720a:	f43f ae56 	beq.w	8006eba <_printf_float+0xb6>
 800720e:	f108 0801 	add.w	r8, r8, #1
 8007212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007214:	3b01      	subs	r3, #1
 8007216:	4543      	cmp	r3, r8
 8007218:	dcf1      	bgt.n	80071fe <_printf_float+0x3fa>
 800721a:	4653      	mov	r3, sl
 800721c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007220:	e6e0      	b.n	8006fe4 <_printf_float+0x1e0>
 8007222:	f04f 0800 	mov.w	r8, #0
 8007226:	f104 091a 	add.w	r9, r4, #26
 800722a:	e7f2      	b.n	8007212 <_printf_float+0x40e>
 800722c:	2301      	movs	r3, #1
 800722e:	4642      	mov	r2, r8
 8007230:	e7df      	b.n	80071f2 <_printf_float+0x3ee>
 8007232:	2301      	movs	r3, #1
 8007234:	464a      	mov	r2, r9
 8007236:	4631      	mov	r1, r6
 8007238:	4628      	mov	r0, r5
 800723a:	47b8      	blx	r7
 800723c:	3001      	adds	r0, #1
 800723e:	f43f ae3c 	beq.w	8006eba <_printf_float+0xb6>
 8007242:	f108 0801 	add.w	r8, r8, #1
 8007246:	68e3      	ldr	r3, [r4, #12]
 8007248:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800724a:	1a5b      	subs	r3, r3, r1
 800724c:	4543      	cmp	r3, r8
 800724e:	dcf0      	bgt.n	8007232 <_printf_float+0x42e>
 8007250:	e6fd      	b.n	800704e <_printf_float+0x24a>
 8007252:	f04f 0800 	mov.w	r8, #0
 8007256:	f104 0919 	add.w	r9, r4, #25
 800725a:	e7f4      	b.n	8007246 <_printf_float+0x442>

0800725c <_printf_common>:
 800725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007260:	4616      	mov	r6, r2
 8007262:	4699      	mov	r9, r3
 8007264:	688a      	ldr	r2, [r1, #8]
 8007266:	690b      	ldr	r3, [r1, #16]
 8007268:	4607      	mov	r7, r0
 800726a:	4293      	cmp	r3, r2
 800726c:	bfb8      	it	lt
 800726e:	4613      	movlt	r3, r2
 8007270:	6033      	str	r3, [r6, #0]
 8007272:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007276:	460c      	mov	r4, r1
 8007278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800727c:	b10a      	cbz	r2, 8007282 <_printf_common+0x26>
 800727e:	3301      	adds	r3, #1
 8007280:	6033      	str	r3, [r6, #0]
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	0699      	lsls	r1, r3, #26
 8007286:	bf42      	ittt	mi
 8007288:	6833      	ldrmi	r3, [r6, #0]
 800728a:	3302      	addmi	r3, #2
 800728c:	6033      	strmi	r3, [r6, #0]
 800728e:	6825      	ldr	r5, [r4, #0]
 8007290:	f015 0506 	ands.w	r5, r5, #6
 8007294:	d106      	bne.n	80072a4 <_printf_common+0x48>
 8007296:	f104 0a19 	add.w	sl, r4, #25
 800729a:	68e3      	ldr	r3, [r4, #12]
 800729c:	6832      	ldr	r2, [r6, #0]
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	42ab      	cmp	r3, r5
 80072a2:	dc28      	bgt.n	80072f6 <_printf_common+0x9a>
 80072a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072a8:	1e13      	subs	r3, r2, #0
 80072aa:	6822      	ldr	r2, [r4, #0]
 80072ac:	bf18      	it	ne
 80072ae:	2301      	movne	r3, #1
 80072b0:	0692      	lsls	r2, r2, #26
 80072b2:	d42d      	bmi.n	8007310 <_printf_common+0xb4>
 80072b4:	4649      	mov	r1, r9
 80072b6:	4638      	mov	r0, r7
 80072b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072bc:	47c0      	blx	r8
 80072be:	3001      	adds	r0, #1
 80072c0:	d020      	beq.n	8007304 <_printf_common+0xa8>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	68e5      	ldr	r5, [r4, #12]
 80072c6:	f003 0306 	and.w	r3, r3, #6
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	bf18      	it	ne
 80072ce:	2500      	movne	r5, #0
 80072d0:	6832      	ldr	r2, [r6, #0]
 80072d2:	f04f 0600 	mov.w	r6, #0
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	bf08      	it	eq
 80072da:	1aad      	subeq	r5, r5, r2
 80072dc:	6922      	ldr	r2, [r4, #16]
 80072de:	bf08      	it	eq
 80072e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072e4:	4293      	cmp	r3, r2
 80072e6:	bfc4      	itt	gt
 80072e8:	1a9b      	subgt	r3, r3, r2
 80072ea:	18ed      	addgt	r5, r5, r3
 80072ec:	341a      	adds	r4, #26
 80072ee:	42b5      	cmp	r5, r6
 80072f0:	d11a      	bne.n	8007328 <_printf_common+0xcc>
 80072f2:	2000      	movs	r0, #0
 80072f4:	e008      	b.n	8007308 <_printf_common+0xac>
 80072f6:	2301      	movs	r3, #1
 80072f8:	4652      	mov	r2, sl
 80072fa:	4649      	mov	r1, r9
 80072fc:	4638      	mov	r0, r7
 80072fe:	47c0      	blx	r8
 8007300:	3001      	adds	r0, #1
 8007302:	d103      	bne.n	800730c <_printf_common+0xb0>
 8007304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730c:	3501      	adds	r5, #1
 800730e:	e7c4      	b.n	800729a <_printf_common+0x3e>
 8007310:	2030      	movs	r0, #48	; 0x30
 8007312:	18e1      	adds	r1, r4, r3
 8007314:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800731e:	4422      	add	r2, r4
 8007320:	3302      	adds	r3, #2
 8007322:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007326:	e7c5      	b.n	80072b4 <_printf_common+0x58>
 8007328:	2301      	movs	r3, #1
 800732a:	4622      	mov	r2, r4
 800732c:	4649      	mov	r1, r9
 800732e:	4638      	mov	r0, r7
 8007330:	47c0      	blx	r8
 8007332:	3001      	adds	r0, #1
 8007334:	d0e6      	beq.n	8007304 <_printf_common+0xa8>
 8007336:	3601      	adds	r6, #1
 8007338:	e7d9      	b.n	80072ee <_printf_common+0x92>
	...

0800733c <_printf_i>:
 800733c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	7e0f      	ldrb	r7, [r1, #24]
 8007342:	4691      	mov	r9, r2
 8007344:	2f78      	cmp	r7, #120	; 0x78
 8007346:	4680      	mov	r8, r0
 8007348:	460c      	mov	r4, r1
 800734a:	469a      	mov	sl, r3
 800734c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800734e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007352:	d807      	bhi.n	8007364 <_printf_i+0x28>
 8007354:	2f62      	cmp	r7, #98	; 0x62
 8007356:	d80a      	bhi.n	800736e <_printf_i+0x32>
 8007358:	2f00      	cmp	r7, #0
 800735a:	f000 80d9 	beq.w	8007510 <_printf_i+0x1d4>
 800735e:	2f58      	cmp	r7, #88	; 0x58
 8007360:	f000 80a4 	beq.w	80074ac <_printf_i+0x170>
 8007364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800736c:	e03a      	b.n	80073e4 <_printf_i+0xa8>
 800736e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007372:	2b15      	cmp	r3, #21
 8007374:	d8f6      	bhi.n	8007364 <_printf_i+0x28>
 8007376:	a101      	add	r1, pc, #4	; (adr r1, 800737c <_printf_i+0x40>)
 8007378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800737c:	080073d5 	.word	0x080073d5
 8007380:	080073e9 	.word	0x080073e9
 8007384:	08007365 	.word	0x08007365
 8007388:	08007365 	.word	0x08007365
 800738c:	08007365 	.word	0x08007365
 8007390:	08007365 	.word	0x08007365
 8007394:	080073e9 	.word	0x080073e9
 8007398:	08007365 	.word	0x08007365
 800739c:	08007365 	.word	0x08007365
 80073a0:	08007365 	.word	0x08007365
 80073a4:	08007365 	.word	0x08007365
 80073a8:	080074f7 	.word	0x080074f7
 80073ac:	08007419 	.word	0x08007419
 80073b0:	080074d9 	.word	0x080074d9
 80073b4:	08007365 	.word	0x08007365
 80073b8:	08007365 	.word	0x08007365
 80073bc:	08007519 	.word	0x08007519
 80073c0:	08007365 	.word	0x08007365
 80073c4:	08007419 	.word	0x08007419
 80073c8:	08007365 	.word	0x08007365
 80073cc:	08007365 	.word	0x08007365
 80073d0:	080074e1 	.word	0x080074e1
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	1d1a      	adds	r2, r3, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	602a      	str	r2, [r5, #0]
 80073dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073e4:	2301      	movs	r3, #1
 80073e6:	e0a4      	b.n	8007532 <_printf_i+0x1f6>
 80073e8:	6820      	ldr	r0, [r4, #0]
 80073ea:	6829      	ldr	r1, [r5, #0]
 80073ec:	0606      	lsls	r6, r0, #24
 80073ee:	f101 0304 	add.w	r3, r1, #4
 80073f2:	d50a      	bpl.n	800740a <_printf_i+0xce>
 80073f4:	680e      	ldr	r6, [r1, #0]
 80073f6:	602b      	str	r3, [r5, #0]
 80073f8:	2e00      	cmp	r6, #0
 80073fa:	da03      	bge.n	8007404 <_printf_i+0xc8>
 80073fc:	232d      	movs	r3, #45	; 0x2d
 80073fe:	4276      	negs	r6, r6
 8007400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007404:	230a      	movs	r3, #10
 8007406:	485e      	ldr	r0, [pc, #376]	; (8007580 <_printf_i+0x244>)
 8007408:	e019      	b.n	800743e <_printf_i+0x102>
 800740a:	680e      	ldr	r6, [r1, #0]
 800740c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007410:	602b      	str	r3, [r5, #0]
 8007412:	bf18      	it	ne
 8007414:	b236      	sxthne	r6, r6
 8007416:	e7ef      	b.n	80073f8 <_printf_i+0xbc>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	6820      	ldr	r0, [r4, #0]
 800741c:	1d19      	adds	r1, r3, #4
 800741e:	6029      	str	r1, [r5, #0]
 8007420:	0601      	lsls	r1, r0, #24
 8007422:	d501      	bpl.n	8007428 <_printf_i+0xec>
 8007424:	681e      	ldr	r6, [r3, #0]
 8007426:	e002      	b.n	800742e <_printf_i+0xf2>
 8007428:	0646      	lsls	r6, r0, #25
 800742a:	d5fb      	bpl.n	8007424 <_printf_i+0xe8>
 800742c:	881e      	ldrh	r6, [r3, #0]
 800742e:	2f6f      	cmp	r7, #111	; 0x6f
 8007430:	bf0c      	ite	eq
 8007432:	2308      	moveq	r3, #8
 8007434:	230a      	movne	r3, #10
 8007436:	4852      	ldr	r0, [pc, #328]	; (8007580 <_printf_i+0x244>)
 8007438:	2100      	movs	r1, #0
 800743a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800743e:	6865      	ldr	r5, [r4, #4]
 8007440:	2d00      	cmp	r5, #0
 8007442:	bfa8      	it	ge
 8007444:	6821      	ldrge	r1, [r4, #0]
 8007446:	60a5      	str	r5, [r4, #8]
 8007448:	bfa4      	itt	ge
 800744a:	f021 0104 	bicge.w	r1, r1, #4
 800744e:	6021      	strge	r1, [r4, #0]
 8007450:	b90e      	cbnz	r6, 8007456 <_printf_i+0x11a>
 8007452:	2d00      	cmp	r5, #0
 8007454:	d04d      	beq.n	80074f2 <_printf_i+0x1b6>
 8007456:	4615      	mov	r5, r2
 8007458:	fbb6 f1f3 	udiv	r1, r6, r3
 800745c:	fb03 6711 	mls	r7, r3, r1, r6
 8007460:	5dc7      	ldrb	r7, [r0, r7]
 8007462:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007466:	4637      	mov	r7, r6
 8007468:	42bb      	cmp	r3, r7
 800746a:	460e      	mov	r6, r1
 800746c:	d9f4      	bls.n	8007458 <_printf_i+0x11c>
 800746e:	2b08      	cmp	r3, #8
 8007470:	d10b      	bne.n	800748a <_printf_i+0x14e>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	07de      	lsls	r6, r3, #31
 8007476:	d508      	bpl.n	800748a <_printf_i+0x14e>
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	6861      	ldr	r1, [r4, #4]
 800747c:	4299      	cmp	r1, r3
 800747e:	bfde      	ittt	le
 8007480:	2330      	movle	r3, #48	; 0x30
 8007482:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007486:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800748a:	1b52      	subs	r2, r2, r5
 800748c:	6122      	str	r2, [r4, #16]
 800748e:	464b      	mov	r3, r9
 8007490:	4621      	mov	r1, r4
 8007492:	4640      	mov	r0, r8
 8007494:	f8cd a000 	str.w	sl, [sp]
 8007498:	aa03      	add	r2, sp, #12
 800749a:	f7ff fedf 	bl	800725c <_printf_common>
 800749e:	3001      	adds	r0, #1
 80074a0:	d14c      	bne.n	800753c <_printf_i+0x200>
 80074a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074a6:	b004      	add	sp, #16
 80074a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ac:	4834      	ldr	r0, [pc, #208]	; (8007580 <_printf_i+0x244>)
 80074ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074b2:	6829      	ldr	r1, [r5, #0]
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80074ba:	6029      	str	r1, [r5, #0]
 80074bc:	061d      	lsls	r5, r3, #24
 80074be:	d514      	bpl.n	80074ea <_printf_i+0x1ae>
 80074c0:	07df      	lsls	r7, r3, #31
 80074c2:	bf44      	itt	mi
 80074c4:	f043 0320 	orrmi.w	r3, r3, #32
 80074c8:	6023      	strmi	r3, [r4, #0]
 80074ca:	b91e      	cbnz	r6, 80074d4 <_printf_i+0x198>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	f023 0320 	bic.w	r3, r3, #32
 80074d2:	6023      	str	r3, [r4, #0]
 80074d4:	2310      	movs	r3, #16
 80074d6:	e7af      	b.n	8007438 <_printf_i+0xfc>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	f043 0320 	orr.w	r3, r3, #32
 80074de:	6023      	str	r3, [r4, #0]
 80074e0:	2378      	movs	r3, #120	; 0x78
 80074e2:	4828      	ldr	r0, [pc, #160]	; (8007584 <_printf_i+0x248>)
 80074e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074e8:	e7e3      	b.n	80074b2 <_printf_i+0x176>
 80074ea:	0659      	lsls	r1, r3, #25
 80074ec:	bf48      	it	mi
 80074ee:	b2b6      	uxthmi	r6, r6
 80074f0:	e7e6      	b.n	80074c0 <_printf_i+0x184>
 80074f2:	4615      	mov	r5, r2
 80074f4:	e7bb      	b.n	800746e <_printf_i+0x132>
 80074f6:	682b      	ldr	r3, [r5, #0]
 80074f8:	6826      	ldr	r6, [r4, #0]
 80074fa:	1d18      	adds	r0, r3, #4
 80074fc:	6961      	ldr	r1, [r4, #20]
 80074fe:	6028      	str	r0, [r5, #0]
 8007500:	0635      	lsls	r5, r6, #24
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	d501      	bpl.n	800750a <_printf_i+0x1ce>
 8007506:	6019      	str	r1, [r3, #0]
 8007508:	e002      	b.n	8007510 <_printf_i+0x1d4>
 800750a:	0670      	lsls	r0, r6, #25
 800750c:	d5fb      	bpl.n	8007506 <_printf_i+0x1ca>
 800750e:	8019      	strh	r1, [r3, #0]
 8007510:	2300      	movs	r3, #0
 8007512:	4615      	mov	r5, r2
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	e7ba      	b.n	800748e <_printf_i+0x152>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	2100      	movs	r1, #0
 800751c:	1d1a      	adds	r2, r3, #4
 800751e:	602a      	str	r2, [r5, #0]
 8007520:	681d      	ldr	r5, [r3, #0]
 8007522:	6862      	ldr	r2, [r4, #4]
 8007524:	4628      	mov	r0, r5
 8007526:	f000 fee9 	bl	80082fc <memchr>
 800752a:	b108      	cbz	r0, 8007530 <_printf_i+0x1f4>
 800752c:	1b40      	subs	r0, r0, r5
 800752e:	6060      	str	r0, [r4, #4]
 8007530:	6863      	ldr	r3, [r4, #4]
 8007532:	6123      	str	r3, [r4, #16]
 8007534:	2300      	movs	r3, #0
 8007536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800753a:	e7a8      	b.n	800748e <_printf_i+0x152>
 800753c:	462a      	mov	r2, r5
 800753e:	4649      	mov	r1, r9
 8007540:	4640      	mov	r0, r8
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	47d0      	blx	sl
 8007546:	3001      	adds	r0, #1
 8007548:	d0ab      	beq.n	80074a2 <_printf_i+0x166>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	079b      	lsls	r3, r3, #30
 800754e:	d413      	bmi.n	8007578 <_printf_i+0x23c>
 8007550:	68e0      	ldr	r0, [r4, #12]
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	4298      	cmp	r0, r3
 8007556:	bfb8      	it	lt
 8007558:	4618      	movlt	r0, r3
 800755a:	e7a4      	b.n	80074a6 <_printf_i+0x16a>
 800755c:	2301      	movs	r3, #1
 800755e:	4632      	mov	r2, r6
 8007560:	4649      	mov	r1, r9
 8007562:	4640      	mov	r0, r8
 8007564:	47d0      	blx	sl
 8007566:	3001      	adds	r0, #1
 8007568:	d09b      	beq.n	80074a2 <_printf_i+0x166>
 800756a:	3501      	adds	r5, #1
 800756c:	68e3      	ldr	r3, [r4, #12]
 800756e:	9903      	ldr	r1, [sp, #12]
 8007570:	1a5b      	subs	r3, r3, r1
 8007572:	42ab      	cmp	r3, r5
 8007574:	dcf2      	bgt.n	800755c <_printf_i+0x220>
 8007576:	e7eb      	b.n	8007550 <_printf_i+0x214>
 8007578:	2500      	movs	r5, #0
 800757a:	f104 0619 	add.w	r6, r4, #25
 800757e:	e7f5      	b.n	800756c <_printf_i+0x230>
 8007580:	0800a1be 	.word	0x0800a1be
 8007584:	0800a1cf 	.word	0x0800a1cf

08007588 <siprintf>:
 8007588:	b40e      	push	{r1, r2, r3}
 800758a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800758e:	b500      	push	{lr}
 8007590:	b09c      	sub	sp, #112	; 0x70
 8007592:	ab1d      	add	r3, sp, #116	; 0x74
 8007594:	9002      	str	r0, [sp, #8]
 8007596:	9006      	str	r0, [sp, #24]
 8007598:	9107      	str	r1, [sp, #28]
 800759a:	9104      	str	r1, [sp, #16]
 800759c:	4808      	ldr	r0, [pc, #32]	; (80075c0 <siprintf+0x38>)
 800759e:	4909      	ldr	r1, [pc, #36]	; (80075c4 <siprintf+0x3c>)
 80075a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a4:	9105      	str	r1, [sp, #20]
 80075a6:	6800      	ldr	r0, [r0, #0]
 80075a8:	a902      	add	r1, sp, #8
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	f001 fb82 	bl	8008cb4 <_svfiprintf_r>
 80075b0:	2200      	movs	r2, #0
 80075b2:	9b02      	ldr	r3, [sp, #8]
 80075b4:	701a      	strb	r2, [r3, #0]
 80075b6:	b01c      	add	sp, #112	; 0x70
 80075b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075bc:	b003      	add	sp, #12
 80075be:	4770      	bx	lr
 80075c0:	20000010 	.word	0x20000010
 80075c4:	ffff0208 	.word	0xffff0208

080075c8 <strncmp>:
 80075c8:	4603      	mov	r3, r0
 80075ca:	b510      	push	{r4, lr}
 80075cc:	b172      	cbz	r2, 80075ec <strncmp+0x24>
 80075ce:	3901      	subs	r1, #1
 80075d0:	1884      	adds	r4, r0, r2
 80075d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80075d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80075da:	4290      	cmp	r0, r2
 80075dc:	d101      	bne.n	80075e2 <strncmp+0x1a>
 80075de:	42a3      	cmp	r3, r4
 80075e0:	d101      	bne.n	80075e6 <strncmp+0x1e>
 80075e2:	1a80      	subs	r0, r0, r2
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d1f3      	bne.n	80075d2 <strncmp+0xa>
 80075ea:	e7fa      	b.n	80075e2 <strncmp+0x1a>
 80075ec:	4610      	mov	r0, r2
 80075ee:	e7f9      	b.n	80075e4 <strncmp+0x1c>

080075f0 <quorem>:
 80075f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	6903      	ldr	r3, [r0, #16]
 80075f6:	690c      	ldr	r4, [r1, #16]
 80075f8:	4607      	mov	r7, r0
 80075fa:	42a3      	cmp	r3, r4
 80075fc:	f2c0 8082 	blt.w	8007704 <quorem+0x114>
 8007600:	3c01      	subs	r4, #1
 8007602:	f100 0514 	add.w	r5, r0, #20
 8007606:	f101 0814 	add.w	r8, r1, #20
 800760a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007614:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007618:	3301      	adds	r3, #1
 800761a:	429a      	cmp	r2, r3
 800761c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007620:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007624:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007628:	d331      	bcc.n	800768e <quorem+0x9e>
 800762a:	f04f 0e00 	mov.w	lr, #0
 800762e:	4640      	mov	r0, r8
 8007630:	46ac      	mov	ip, r5
 8007632:	46f2      	mov	sl, lr
 8007634:	f850 2b04 	ldr.w	r2, [r0], #4
 8007638:	b293      	uxth	r3, r2
 800763a:	fb06 e303 	mla	r3, r6, r3, lr
 800763e:	0c12      	lsrs	r2, r2, #16
 8007640:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007644:	b29b      	uxth	r3, r3
 8007646:	fb06 e202 	mla	r2, r6, r2, lr
 800764a:	ebaa 0303 	sub.w	r3, sl, r3
 800764e:	f8dc a000 	ldr.w	sl, [ip]
 8007652:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007656:	fa1f fa8a 	uxth.w	sl, sl
 800765a:	4453      	add	r3, sl
 800765c:	f8dc a000 	ldr.w	sl, [ip]
 8007660:	b292      	uxth	r2, r2
 8007662:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007666:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800766a:	b29b      	uxth	r3, r3
 800766c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007670:	4581      	cmp	r9, r0
 8007672:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007676:	f84c 3b04 	str.w	r3, [ip], #4
 800767a:	d2db      	bcs.n	8007634 <quorem+0x44>
 800767c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007680:	b92b      	cbnz	r3, 800768e <quorem+0x9e>
 8007682:	9b01      	ldr	r3, [sp, #4]
 8007684:	3b04      	subs	r3, #4
 8007686:	429d      	cmp	r5, r3
 8007688:	461a      	mov	r2, r3
 800768a:	d32f      	bcc.n	80076ec <quorem+0xfc>
 800768c:	613c      	str	r4, [r7, #16]
 800768e:	4638      	mov	r0, r7
 8007690:	f001 f8c0 	bl	8008814 <__mcmp>
 8007694:	2800      	cmp	r0, #0
 8007696:	db25      	blt.n	80076e4 <quorem+0xf4>
 8007698:	4628      	mov	r0, r5
 800769a:	f04f 0c00 	mov.w	ip, #0
 800769e:	3601      	adds	r6, #1
 80076a0:	f858 1b04 	ldr.w	r1, [r8], #4
 80076a4:	f8d0 e000 	ldr.w	lr, [r0]
 80076a8:	b28b      	uxth	r3, r1
 80076aa:	ebac 0303 	sub.w	r3, ip, r3
 80076ae:	fa1f f28e 	uxth.w	r2, lr
 80076b2:	4413      	add	r3, r2
 80076b4:	0c0a      	lsrs	r2, r1, #16
 80076b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076be:	b29b      	uxth	r3, r3
 80076c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c4:	45c1      	cmp	r9, r8
 80076c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076ca:	f840 3b04 	str.w	r3, [r0], #4
 80076ce:	d2e7      	bcs.n	80076a0 <quorem+0xb0>
 80076d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076d8:	b922      	cbnz	r2, 80076e4 <quorem+0xf4>
 80076da:	3b04      	subs	r3, #4
 80076dc:	429d      	cmp	r5, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	d30a      	bcc.n	80076f8 <quorem+0x108>
 80076e2:	613c      	str	r4, [r7, #16]
 80076e4:	4630      	mov	r0, r6
 80076e6:	b003      	add	sp, #12
 80076e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	3b04      	subs	r3, #4
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	d1cb      	bne.n	800768c <quorem+0x9c>
 80076f4:	3c01      	subs	r4, #1
 80076f6:	e7c6      	b.n	8007686 <quorem+0x96>
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	3b04      	subs	r3, #4
 80076fc:	2a00      	cmp	r2, #0
 80076fe:	d1f0      	bne.n	80076e2 <quorem+0xf2>
 8007700:	3c01      	subs	r4, #1
 8007702:	e7eb      	b.n	80076dc <quorem+0xec>
 8007704:	2000      	movs	r0, #0
 8007706:	e7ee      	b.n	80076e6 <quorem+0xf6>

08007708 <_dtoa_r>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	4616      	mov	r6, r2
 800770e:	461f      	mov	r7, r3
 8007710:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007712:	b099      	sub	sp, #100	; 0x64
 8007714:	4605      	mov	r5, r0
 8007716:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800771a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800771e:	b974      	cbnz	r4, 800773e <_dtoa_r+0x36>
 8007720:	2010      	movs	r0, #16
 8007722:	f000 fde3 	bl	80082ec <malloc>
 8007726:	4602      	mov	r2, r0
 8007728:	6268      	str	r0, [r5, #36]	; 0x24
 800772a:	b920      	cbnz	r0, 8007736 <_dtoa_r+0x2e>
 800772c:	21ea      	movs	r1, #234	; 0xea
 800772e:	4ba8      	ldr	r3, [pc, #672]	; (80079d0 <_dtoa_r+0x2c8>)
 8007730:	48a8      	ldr	r0, [pc, #672]	; (80079d4 <_dtoa_r+0x2cc>)
 8007732:	f001 fbcf 	bl	8008ed4 <__assert_func>
 8007736:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800773a:	6004      	str	r4, [r0, #0]
 800773c:	60c4      	str	r4, [r0, #12]
 800773e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007740:	6819      	ldr	r1, [r3, #0]
 8007742:	b151      	cbz	r1, 800775a <_dtoa_r+0x52>
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	2301      	movs	r3, #1
 8007748:	4093      	lsls	r3, r2
 800774a:	604a      	str	r2, [r1, #4]
 800774c:	608b      	str	r3, [r1, #8]
 800774e:	4628      	mov	r0, r5
 8007750:	f000 fe22 	bl	8008398 <_Bfree>
 8007754:	2200      	movs	r2, #0
 8007756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	1e3b      	subs	r3, r7, #0
 800775c:	bfaf      	iteee	ge
 800775e:	2300      	movge	r3, #0
 8007760:	2201      	movlt	r2, #1
 8007762:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007766:	9305      	strlt	r3, [sp, #20]
 8007768:	bfa8      	it	ge
 800776a:	f8c8 3000 	strge.w	r3, [r8]
 800776e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007772:	4b99      	ldr	r3, [pc, #612]	; (80079d8 <_dtoa_r+0x2d0>)
 8007774:	bfb8      	it	lt
 8007776:	f8c8 2000 	strlt.w	r2, [r8]
 800777a:	ea33 0309 	bics.w	r3, r3, r9
 800777e:	d119      	bne.n	80077b4 <_dtoa_r+0xac>
 8007780:	f242 730f 	movw	r3, #9999	; 0x270f
 8007784:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800778c:	4333      	orrs	r3, r6
 800778e:	f000 857f 	beq.w	8008290 <_dtoa_r+0xb88>
 8007792:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007794:	b953      	cbnz	r3, 80077ac <_dtoa_r+0xa4>
 8007796:	4b91      	ldr	r3, [pc, #580]	; (80079dc <_dtoa_r+0x2d4>)
 8007798:	e022      	b.n	80077e0 <_dtoa_r+0xd8>
 800779a:	4b91      	ldr	r3, [pc, #580]	; (80079e0 <_dtoa_r+0x2d8>)
 800779c:	9303      	str	r3, [sp, #12]
 800779e:	3308      	adds	r3, #8
 80077a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	9803      	ldr	r0, [sp, #12]
 80077a6:	b019      	add	sp, #100	; 0x64
 80077a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ac:	4b8b      	ldr	r3, [pc, #556]	; (80079dc <_dtoa_r+0x2d4>)
 80077ae:	9303      	str	r3, [sp, #12]
 80077b0:	3303      	adds	r3, #3
 80077b2:	e7f5      	b.n	80077a0 <_dtoa_r+0x98>
 80077b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80077b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80077bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077c0:	2200      	movs	r2, #0
 80077c2:	2300      	movs	r3, #0
 80077c4:	f7f9 f966 	bl	8000a94 <__aeabi_dcmpeq>
 80077c8:	4680      	mov	r8, r0
 80077ca:	b158      	cbz	r0, 80077e4 <_dtoa_r+0xdc>
 80077cc:	2301      	movs	r3, #1
 80077ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 8558 	beq.w	800828a <_dtoa_r+0xb82>
 80077da:	4882      	ldr	r0, [pc, #520]	; (80079e4 <_dtoa_r+0x2dc>)
 80077dc:	6018      	str	r0, [r3, #0]
 80077de:	1e43      	subs	r3, r0, #1
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	e7df      	b.n	80077a4 <_dtoa_r+0x9c>
 80077e4:	ab16      	add	r3, sp, #88	; 0x58
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	ab17      	add	r3, sp, #92	; 0x5c
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	4628      	mov	r0, r5
 80077ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077f2:	f001 f8b7 	bl	8008964 <__d2b>
 80077f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80077fa:	4683      	mov	fp, r0
 80077fc:	2c00      	cmp	r4, #0
 80077fe:	d07f      	beq.n	8007900 <_dtoa_r+0x1f8>
 8007800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007806:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800780a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800780e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007812:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007816:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800781a:	2200      	movs	r2, #0
 800781c:	4b72      	ldr	r3, [pc, #456]	; (80079e8 <_dtoa_r+0x2e0>)
 800781e:	f7f8 fd19 	bl	8000254 <__aeabi_dsub>
 8007822:	a365      	add	r3, pc, #404	; (adr r3, 80079b8 <_dtoa_r+0x2b0>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fecc 	bl	80005c4 <__aeabi_dmul>
 800782c:	a364      	add	r3, pc, #400	; (adr r3, 80079c0 <_dtoa_r+0x2b8>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f8 fd11 	bl	8000258 <__adddf3>
 8007836:	4606      	mov	r6, r0
 8007838:	4620      	mov	r0, r4
 800783a:	460f      	mov	r7, r1
 800783c:	f7f8 fe58 	bl	80004f0 <__aeabi_i2d>
 8007840:	a361      	add	r3, pc, #388	; (adr r3, 80079c8 <_dtoa_r+0x2c0>)
 8007842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007846:	f7f8 febd 	bl	80005c4 <__aeabi_dmul>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4630      	mov	r0, r6
 8007850:	4639      	mov	r1, r7
 8007852:	f7f8 fd01 	bl	8000258 <__adddf3>
 8007856:	4606      	mov	r6, r0
 8007858:	460f      	mov	r7, r1
 800785a:	f7f9 f963 	bl	8000b24 <__aeabi_d2iz>
 800785e:	2200      	movs	r2, #0
 8007860:	4682      	mov	sl, r0
 8007862:	2300      	movs	r3, #0
 8007864:	4630      	mov	r0, r6
 8007866:	4639      	mov	r1, r7
 8007868:	f7f9 f91e 	bl	8000aa8 <__aeabi_dcmplt>
 800786c:	b148      	cbz	r0, 8007882 <_dtoa_r+0x17a>
 800786e:	4650      	mov	r0, sl
 8007870:	f7f8 fe3e 	bl	80004f0 <__aeabi_i2d>
 8007874:	4632      	mov	r2, r6
 8007876:	463b      	mov	r3, r7
 8007878:	f7f9 f90c 	bl	8000a94 <__aeabi_dcmpeq>
 800787c:	b908      	cbnz	r0, 8007882 <_dtoa_r+0x17a>
 800787e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007882:	f1ba 0f16 	cmp.w	sl, #22
 8007886:	d858      	bhi.n	800793a <_dtoa_r+0x232>
 8007888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800788c:	4b57      	ldr	r3, [pc, #348]	; (80079ec <_dtoa_r+0x2e4>)
 800788e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f7f9 f907 	bl	8000aa8 <__aeabi_dcmplt>
 800789a:	2800      	cmp	r0, #0
 800789c:	d04f      	beq.n	800793e <_dtoa_r+0x236>
 800789e:	2300      	movs	r3, #0
 80078a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80078a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80078a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80078a8:	1b1c      	subs	r4, r3, r4
 80078aa:	1e63      	subs	r3, r4, #1
 80078ac:	9309      	str	r3, [sp, #36]	; 0x24
 80078ae:	bf49      	itett	mi
 80078b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80078b4:	2300      	movpl	r3, #0
 80078b6:	9306      	strmi	r3, [sp, #24]
 80078b8:	2300      	movmi	r3, #0
 80078ba:	bf54      	ite	pl
 80078bc:	9306      	strpl	r3, [sp, #24]
 80078be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80078c0:	f1ba 0f00 	cmp.w	sl, #0
 80078c4:	db3d      	blt.n	8007942 <_dtoa_r+0x23a>
 80078c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80078cc:	4453      	add	r3, sl
 80078ce:	9309      	str	r3, [sp, #36]	; 0x24
 80078d0:	2300      	movs	r3, #0
 80078d2:	930a      	str	r3, [sp, #40]	; 0x28
 80078d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078d6:	2b09      	cmp	r3, #9
 80078d8:	f200 808c 	bhi.w	80079f4 <_dtoa_r+0x2ec>
 80078dc:	2b05      	cmp	r3, #5
 80078de:	bfc4      	itt	gt
 80078e0:	3b04      	subgt	r3, #4
 80078e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80078e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078e6:	bfc8      	it	gt
 80078e8:	2400      	movgt	r4, #0
 80078ea:	f1a3 0302 	sub.w	r3, r3, #2
 80078ee:	bfd8      	it	le
 80078f0:	2401      	movle	r4, #1
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	f200 808a 	bhi.w	8007a0c <_dtoa_r+0x304>
 80078f8:	e8df f003 	tbb	[pc, r3]
 80078fc:	5b4d4f2d 	.word	0x5b4d4f2d
 8007900:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007904:	441c      	add	r4, r3
 8007906:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800790a:	2b20      	cmp	r3, #32
 800790c:	bfc3      	ittte	gt
 800790e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007912:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007916:	fa09 f303 	lslgt.w	r3, r9, r3
 800791a:	f1c3 0320 	rsble	r3, r3, #32
 800791e:	bfc6      	itte	gt
 8007920:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007924:	4318      	orrgt	r0, r3
 8007926:	fa06 f003 	lslle.w	r0, r6, r3
 800792a:	f7f8 fdd1 	bl	80004d0 <__aeabi_ui2d>
 800792e:	2301      	movs	r3, #1
 8007930:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007934:	3c01      	subs	r4, #1
 8007936:	9313      	str	r3, [sp, #76]	; 0x4c
 8007938:	e76f      	b.n	800781a <_dtoa_r+0x112>
 800793a:	2301      	movs	r3, #1
 800793c:	e7b2      	b.n	80078a4 <_dtoa_r+0x19c>
 800793e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007940:	e7b1      	b.n	80078a6 <_dtoa_r+0x19e>
 8007942:	9b06      	ldr	r3, [sp, #24]
 8007944:	eba3 030a 	sub.w	r3, r3, sl
 8007948:	9306      	str	r3, [sp, #24]
 800794a:	f1ca 0300 	rsb	r3, sl, #0
 800794e:	930a      	str	r3, [sp, #40]	; 0x28
 8007950:	2300      	movs	r3, #0
 8007952:	930e      	str	r3, [sp, #56]	; 0x38
 8007954:	e7be      	b.n	80078d4 <_dtoa_r+0x1cc>
 8007956:	2300      	movs	r3, #0
 8007958:	930b      	str	r3, [sp, #44]	; 0x2c
 800795a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800795c:	2b00      	cmp	r3, #0
 800795e:	dc58      	bgt.n	8007a12 <_dtoa_r+0x30a>
 8007960:	f04f 0901 	mov.w	r9, #1
 8007964:	464b      	mov	r3, r9
 8007966:	f8cd 9020 	str.w	r9, [sp, #32]
 800796a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800796e:	2200      	movs	r2, #0
 8007970:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007972:	6042      	str	r2, [r0, #4]
 8007974:	2204      	movs	r2, #4
 8007976:	f102 0614 	add.w	r6, r2, #20
 800797a:	429e      	cmp	r6, r3
 800797c:	6841      	ldr	r1, [r0, #4]
 800797e:	d94e      	bls.n	8007a1e <_dtoa_r+0x316>
 8007980:	4628      	mov	r0, r5
 8007982:	f000 fcc9 	bl	8008318 <_Balloc>
 8007986:	9003      	str	r0, [sp, #12]
 8007988:	2800      	cmp	r0, #0
 800798a:	d14c      	bne.n	8007a26 <_dtoa_r+0x31e>
 800798c:	4602      	mov	r2, r0
 800798e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007992:	4b17      	ldr	r3, [pc, #92]	; (80079f0 <_dtoa_r+0x2e8>)
 8007994:	e6cc      	b.n	8007730 <_dtoa_r+0x28>
 8007996:	2301      	movs	r3, #1
 8007998:	e7de      	b.n	8007958 <_dtoa_r+0x250>
 800799a:	2300      	movs	r3, #0
 800799c:	930b      	str	r3, [sp, #44]	; 0x2c
 800799e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079a0:	eb0a 0903 	add.w	r9, sl, r3
 80079a4:	f109 0301 	add.w	r3, r9, #1
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	9308      	str	r3, [sp, #32]
 80079ac:	bfb8      	it	lt
 80079ae:	2301      	movlt	r3, #1
 80079b0:	e7dd      	b.n	800796e <_dtoa_r+0x266>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e7f2      	b.n	800799c <_dtoa_r+0x294>
 80079b6:	bf00      	nop
 80079b8:	636f4361 	.word	0x636f4361
 80079bc:	3fd287a7 	.word	0x3fd287a7
 80079c0:	8b60c8b3 	.word	0x8b60c8b3
 80079c4:	3fc68a28 	.word	0x3fc68a28
 80079c8:	509f79fb 	.word	0x509f79fb
 80079cc:	3fd34413 	.word	0x3fd34413
 80079d0:	0800a1ed 	.word	0x0800a1ed
 80079d4:	0800a204 	.word	0x0800a204
 80079d8:	7ff00000 	.word	0x7ff00000
 80079dc:	0800a1e9 	.word	0x0800a1e9
 80079e0:	0800a1e0 	.word	0x0800a1e0
 80079e4:	0800a1bd 	.word	0x0800a1bd
 80079e8:	3ff80000 	.word	0x3ff80000
 80079ec:	0800a2f8 	.word	0x0800a2f8
 80079f0:	0800a25f 	.word	0x0800a25f
 80079f4:	2401      	movs	r4, #1
 80079f6:	2300      	movs	r3, #0
 80079f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80079fa:	9322      	str	r3, [sp, #136]	; 0x88
 80079fc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007a00:	2200      	movs	r2, #0
 8007a02:	2312      	movs	r3, #18
 8007a04:	f8cd 9020 	str.w	r9, [sp, #32]
 8007a08:	9223      	str	r2, [sp, #140]	; 0x8c
 8007a0a:	e7b0      	b.n	800796e <_dtoa_r+0x266>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a10:	e7f4      	b.n	80079fc <_dtoa_r+0x2f4>
 8007a12:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007a16:	464b      	mov	r3, r9
 8007a18:	f8cd 9020 	str.w	r9, [sp, #32]
 8007a1c:	e7a7      	b.n	800796e <_dtoa_r+0x266>
 8007a1e:	3101      	adds	r1, #1
 8007a20:	6041      	str	r1, [r0, #4]
 8007a22:	0052      	lsls	r2, r2, #1
 8007a24:	e7a7      	b.n	8007976 <_dtoa_r+0x26e>
 8007a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a28:	9a03      	ldr	r2, [sp, #12]
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	9b08      	ldr	r3, [sp, #32]
 8007a2e:	2b0e      	cmp	r3, #14
 8007a30:	f200 80a8 	bhi.w	8007b84 <_dtoa_r+0x47c>
 8007a34:	2c00      	cmp	r4, #0
 8007a36:	f000 80a5 	beq.w	8007b84 <_dtoa_r+0x47c>
 8007a3a:	f1ba 0f00 	cmp.w	sl, #0
 8007a3e:	dd34      	ble.n	8007aaa <_dtoa_r+0x3a2>
 8007a40:	4a9a      	ldr	r2, [pc, #616]	; (8007cac <_dtoa_r+0x5a4>)
 8007a42:	f00a 030f 	and.w	r3, sl, #15
 8007a46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a4a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007a4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a56:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007a5a:	d016      	beq.n	8007a8a <_dtoa_r+0x382>
 8007a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a60:	4b93      	ldr	r3, [pc, #588]	; (8007cb0 <_dtoa_r+0x5a8>)
 8007a62:	2703      	movs	r7, #3
 8007a64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a68:	f7f8 fed6 	bl	8000818 <__aeabi_ddiv>
 8007a6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a70:	f004 040f 	and.w	r4, r4, #15
 8007a74:	4e8e      	ldr	r6, [pc, #568]	; (8007cb0 <_dtoa_r+0x5a8>)
 8007a76:	b954      	cbnz	r4, 8007a8e <_dtoa_r+0x386>
 8007a78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a80:	f7f8 feca 	bl	8000818 <__aeabi_ddiv>
 8007a84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a88:	e029      	b.n	8007ade <_dtoa_r+0x3d6>
 8007a8a:	2702      	movs	r7, #2
 8007a8c:	e7f2      	b.n	8007a74 <_dtoa_r+0x36c>
 8007a8e:	07e1      	lsls	r1, r4, #31
 8007a90:	d508      	bpl.n	8007aa4 <_dtoa_r+0x39c>
 8007a92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a9a:	f7f8 fd93 	bl	80005c4 <__aeabi_dmul>
 8007a9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007aa2:	3701      	adds	r7, #1
 8007aa4:	1064      	asrs	r4, r4, #1
 8007aa6:	3608      	adds	r6, #8
 8007aa8:	e7e5      	b.n	8007a76 <_dtoa_r+0x36e>
 8007aaa:	f000 80a5 	beq.w	8007bf8 <_dtoa_r+0x4f0>
 8007aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ab2:	f1ca 0400 	rsb	r4, sl, #0
 8007ab6:	4b7d      	ldr	r3, [pc, #500]	; (8007cac <_dtoa_r+0x5a4>)
 8007ab8:	f004 020f 	and.w	r2, r4, #15
 8007abc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	f7f8 fd7e 	bl	80005c4 <__aeabi_dmul>
 8007ac8:	2702      	movs	r7, #2
 8007aca:	2300      	movs	r3, #0
 8007acc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ad0:	4e77      	ldr	r6, [pc, #476]	; (8007cb0 <_dtoa_r+0x5a8>)
 8007ad2:	1124      	asrs	r4, r4, #4
 8007ad4:	2c00      	cmp	r4, #0
 8007ad6:	f040 8084 	bne.w	8007be2 <_dtoa_r+0x4da>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1d2      	bne.n	8007a84 <_dtoa_r+0x37c>
 8007ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 808b 	beq.w	8007bfc <_dtoa_r+0x4f4>
 8007ae6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007aea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007aee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007af2:	2200      	movs	r2, #0
 8007af4:	4b6f      	ldr	r3, [pc, #444]	; (8007cb4 <_dtoa_r+0x5ac>)
 8007af6:	f7f8 ffd7 	bl	8000aa8 <__aeabi_dcmplt>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d07e      	beq.n	8007bfc <_dtoa_r+0x4f4>
 8007afe:	9b08      	ldr	r3, [sp, #32]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d07b      	beq.n	8007bfc <_dtoa_r+0x4f4>
 8007b04:	f1b9 0f00 	cmp.w	r9, #0
 8007b08:	dd38      	ble.n	8007b7c <_dtoa_r+0x474>
 8007b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b0e:	2200      	movs	r2, #0
 8007b10:	4b69      	ldr	r3, [pc, #420]	; (8007cb8 <_dtoa_r+0x5b0>)
 8007b12:	f7f8 fd57 	bl	80005c4 <__aeabi_dmul>
 8007b16:	464c      	mov	r4, r9
 8007b18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b1c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8007b20:	3701      	adds	r7, #1
 8007b22:	4638      	mov	r0, r7
 8007b24:	f7f8 fce4 	bl	80004f0 <__aeabi_i2d>
 8007b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b2c:	f7f8 fd4a 	bl	80005c4 <__aeabi_dmul>
 8007b30:	2200      	movs	r2, #0
 8007b32:	4b62      	ldr	r3, [pc, #392]	; (8007cbc <_dtoa_r+0x5b4>)
 8007b34:	f7f8 fb90 	bl	8000258 <__adddf3>
 8007b38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b40:	9611      	str	r6, [sp, #68]	; 0x44
 8007b42:	2c00      	cmp	r4, #0
 8007b44:	d15d      	bne.n	8007c02 <_dtoa_r+0x4fa>
 8007b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4b5c      	ldr	r3, [pc, #368]	; (8007cc0 <_dtoa_r+0x5b8>)
 8007b4e:	f7f8 fb81 	bl	8000254 <__aeabi_dsub>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b5a:	4633      	mov	r3, r6
 8007b5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b5e:	f7f8 ffc1 	bl	8000ae4 <__aeabi_dcmpgt>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f040 829c 	bne.w	80080a0 <_dtoa_r+0x998>
 8007b68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b6e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b72:	f7f8 ff99 	bl	8000aa8 <__aeabi_dcmplt>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f040 8290 	bne.w	800809c <_dtoa_r+0x994>
 8007b7c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007b80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f2c0 8152 	blt.w	8007e30 <_dtoa_r+0x728>
 8007b8c:	f1ba 0f0e 	cmp.w	sl, #14
 8007b90:	f300 814e 	bgt.w	8007e30 <_dtoa_r+0x728>
 8007b94:	4b45      	ldr	r3, [pc, #276]	; (8007cac <_dtoa_r+0x5a4>)
 8007b96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b9e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007ba2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f280 80db 	bge.w	8007d60 <_dtoa_r+0x658>
 8007baa:	9b08      	ldr	r3, [sp, #32]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f300 80d7 	bgt.w	8007d60 <_dtoa_r+0x658>
 8007bb2:	f040 8272 	bne.w	800809a <_dtoa_r+0x992>
 8007bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4b40      	ldr	r3, [pc, #256]	; (8007cc0 <_dtoa_r+0x5b8>)
 8007bbe:	f7f8 fd01 	bl	80005c4 <__aeabi_dmul>
 8007bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bc6:	f7f8 ff83 	bl	8000ad0 <__aeabi_dcmpge>
 8007bca:	9c08      	ldr	r4, [sp, #32]
 8007bcc:	4626      	mov	r6, r4
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f040 8248 	bne.w	8008064 <_dtoa_r+0x95c>
 8007bd4:	2331      	movs	r3, #49	; 0x31
 8007bd6:	9f03      	ldr	r7, [sp, #12]
 8007bd8:	f10a 0a01 	add.w	sl, sl, #1
 8007bdc:	f807 3b01 	strb.w	r3, [r7], #1
 8007be0:	e244      	b.n	800806c <_dtoa_r+0x964>
 8007be2:	07e2      	lsls	r2, r4, #31
 8007be4:	d505      	bpl.n	8007bf2 <_dtoa_r+0x4ea>
 8007be6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bea:	f7f8 fceb 	bl	80005c4 <__aeabi_dmul>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	3701      	adds	r7, #1
 8007bf2:	1064      	asrs	r4, r4, #1
 8007bf4:	3608      	adds	r6, #8
 8007bf6:	e76d      	b.n	8007ad4 <_dtoa_r+0x3cc>
 8007bf8:	2702      	movs	r7, #2
 8007bfa:	e770      	b.n	8007ade <_dtoa_r+0x3d6>
 8007bfc:	46d0      	mov	r8, sl
 8007bfe:	9c08      	ldr	r4, [sp, #32]
 8007c00:	e78f      	b.n	8007b22 <_dtoa_r+0x41a>
 8007c02:	9903      	ldr	r1, [sp, #12]
 8007c04:	4b29      	ldr	r3, [pc, #164]	; (8007cac <_dtoa_r+0x5a4>)
 8007c06:	4421      	add	r1, r4
 8007c08:	9112      	str	r1, [sp, #72]	; 0x48
 8007c0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c10:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007c14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	d055      	beq.n	8007cc8 <_dtoa_r+0x5c0>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	4929      	ldr	r1, [pc, #164]	; (8007cc4 <_dtoa_r+0x5bc>)
 8007c20:	f7f8 fdfa 	bl	8000818 <__aeabi_ddiv>
 8007c24:	463b      	mov	r3, r7
 8007c26:	4632      	mov	r2, r6
 8007c28:	f7f8 fb14 	bl	8000254 <__aeabi_dsub>
 8007c2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c30:	9f03      	ldr	r7, [sp, #12]
 8007c32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c36:	f7f8 ff75 	bl	8000b24 <__aeabi_d2iz>
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	f7f8 fc58 	bl	80004f0 <__aeabi_i2d>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c48:	f7f8 fb04 	bl	8000254 <__aeabi_dsub>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	3430      	adds	r4, #48	; 0x30
 8007c52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c5a:	f807 4b01 	strb.w	r4, [r7], #1
 8007c5e:	f7f8 ff23 	bl	8000aa8 <__aeabi_dcmplt>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d174      	bne.n	8007d50 <_dtoa_r+0x648>
 8007c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	4911      	ldr	r1, [pc, #68]	; (8007cb4 <_dtoa_r+0x5ac>)
 8007c6e:	f7f8 faf1 	bl	8000254 <__aeabi_dsub>
 8007c72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c76:	f7f8 ff17 	bl	8000aa8 <__aeabi_dcmplt>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	f040 80b7 	bne.w	8007dee <_dtoa_r+0x6e6>
 8007c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c82:	429f      	cmp	r7, r3
 8007c84:	f43f af7a 	beq.w	8007b7c <_dtoa_r+0x474>
 8007c88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <_dtoa_r+0x5b0>)
 8007c90:	f7f8 fc98 	bl	80005c4 <__aeabi_dmul>
 8007c94:	2200      	movs	r2, #0
 8007c96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c9e:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <_dtoa_r+0x5b0>)
 8007ca0:	f7f8 fc90 	bl	80005c4 <__aeabi_dmul>
 8007ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ca8:	e7c3      	b.n	8007c32 <_dtoa_r+0x52a>
 8007caa:	bf00      	nop
 8007cac:	0800a2f8 	.word	0x0800a2f8
 8007cb0:	0800a2d0 	.word	0x0800a2d0
 8007cb4:	3ff00000 	.word	0x3ff00000
 8007cb8:	40240000 	.word	0x40240000
 8007cbc:	401c0000 	.word	0x401c0000
 8007cc0:	40140000 	.word	0x40140000
 8007cc4:	3fe00000 	.word	0x3fe00000
 8007cc8:	4630      	mov	r0, r6
 8007cca:	4639      	mov	r1, r7
 8007ccc:	f7f8 fc7a 	bl	80005c4 <__aeabi_dmul>
 8007cd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007cd6:	9c03      	ldr	r4, [sp, #12]
 8007cd8:	9314      	str	r3, [sp, #80]	; 0x50
 8007cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cde:	f7f8 ff21 	bl	8000b24 <__aeabi_d2iz>
 8007ce2:	9015      	str	r0, [sp, #84]	; 0x54
 8007ce4:	f7f8 fc04 	bl	80004f0 <__aeabi_i2d>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cf0:	f7f8 fab0 	bl	8000254 <__aeabi_dsub>
 8007cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	3330      	adds	r3, #48	; 0x30
 8007cfa:	f804 3b01 	strb.w	r3, [r4], #1
 8007cfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d00:	460f      	mov	r7, r1
 8007d02:	429c      	cmp	r4, r3
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	d124      	bne.n	8007d54 <_dtoa_r+0x64c>
 8007d0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d0e:	4bb0      	ldr	r3, [pc, #704]	; (8007fd0 <_dtoa_r+0x8c8>)
 8007d10:	f7f8 faa2 	bl	8000258 <__adddf3>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4630      	mov	r0, r6
 8007d1a:	4639      	mov	r1, r7
 8007d1c:	f7f8 fee2 	bl	8000ae4 <__aeabi_dcmpgt>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d163      	bne.n	8007dec <_dtoa_r+0x6e4>
 8007d24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d28:	2000      	movs	r0, #0
 8007d2a:	49a9      	ldr	r1, [pc, #676]	; (8007fd0 <_dtoa_r+0x8c8>)
 8007d2c:	f7f8 fa92 	bl	8000254 <__aeabi_dsub>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4630      	mov	r0, r6
 8007d36:	4639      	mov	r1, r7
 8007d38:	f7f8 feb6 	bl	8000aa8 <__aeabi_dcmplt>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f43f af1d 	beq.w	8007b7c <_dtoa_r+0x474>
 8007d42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007d44:	1e7b      	subs	r3, r7, #1
 8007d46:	9314      	str	r3, [sp, #80]	; 0x50
 8007d48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007d4c:	2b30      	cmp	r3, #48	; 0x30
 8007d4e:	d0f8      	beq.n	8007d42 <_dtoa_r+0x63a>
 8007d50:	46c2      	mov	sl, r8
 8007d52:	e03b      	b.n	8007dcc <_dtoa_r+0x6c4>
 8007d54:	4b9f      	ldr	r3, [pc, #636]	; (8007fd4 <_dtoa_r+0x8cc>)
 8007d56:	f7f8 fc35 	bl	80005c4 <__aeabi_dmul>
 8007d5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d5e:	e7bc      	b.n	8007cda <_dtoa_r+0x5d2>
 8007d60:	9f03      	ldr	r7, [sp, #12]
 8007d62:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007d66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	f7f8 fd53 	bl	8000818 <__aeabi_ddiv>
 8007d72:	f7f8 fed7 	bl	8000b24 <__aeabi_d2iz>
 8007d76:	4604      	mov	r4, r0
 8007d78:	f7f8 fbba 	bl	80004f0 <__aeabi_i2d>
 8007d7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d80:	f7f8 fc20 	bl	80005c4 <__aeabi_dmul>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4640      	mov	r0, r8
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	f7f8 fa62 	bl	8000254 <__aeabi_dsub>
 8007d90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007d94:	f807 6b01 	strb.w	r6, [r7], #1
 8007d98:	9e03      	ldr	r6, [sp, #12]
 8007d9a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007d9e:	1bbe      	subs	r6, r7, r6
 8007da0:	45b4      	cmp	ip, r6
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	d136      	bne.n	8007e16 <_dtoa_r+0x70e>
 8007da8:	f7f8 fa56 	bl	8000258 <__adddf3>
 8007dac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007db0:	4680      	mov	r8, r0
 8007db2:	4689      	mov	r9, r1
 8007db4:	f7f8 fe96 	bl	8000ae4 <__aeabi_dcmpgt>
 8007db8:	bb58      	cbnz	r0, 8007e12 <_dtoa_r+0x70a>
 8007dba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	f7f8 fe67 	bl	8000a94 <__aeabi_dcmpeq>
 8007dc6:	b108      	cbz	r0, 8007dcc <_dtoa_r+0x6c4>
 8007dc8:	07e1      	lsls	r1, r4, #31
 8007dca:	d422      	bmi.n	8007e12 <_dtoa_r+0x70a>
 8007dcc:	4628      	mov	r0, r5
 8007dce:	4659      	mov	r1, fp
 8007dd0:	f000 fae2 	bl	8008398 <_Bfree>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	703b      	strb	r3, [r7, #0]
 8007dd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007dda:	f10a 0001 	add.w	r0, sl, #1
 8007dde:	6018      	str	r0, [r3, #0]
 8007de0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f43f acde 	beq.w	80077a4 <_dtoa_r+0x9c>
 8007de8:	601f      	str	r7, [r3, #0]
 8007dea:	e4db      	b.n	80077a4 <_dtoa_r+0x9c>
 8007dec:	4627      	mov	r7, r4
 8007dee:	463b      	mov	r3, r7
 8007df0:	461f      	mov	r7, r3
 8007df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007df6:	2a39      	cmp	r2, #57	; 0x39
 8007df8:	d107      	bne.n	8007e0a <_dtoa_r+0x702>
 8007dfa:	9a03      	ldr	r2, [sp, #12]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d1f7      	bne.n	8007df0 <_dtoa_r+0x6e8>
 8007e00:	2230      	movs	r2, #48	; 0x30
 8007e02:	9903      	ldr	r1, [sp, #12]
 8007e04:	f108 0801 	add.w	r8, r8, #1
 8007e08:	700a      	strb	r2, [r1, #0]
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	3201      	adds	r2, #1
 8007e0e:	701a      	strb	r2, [r3, #0]
 8007e10:	e79e      	b.n	8007d50 <_dtoa_r+0x648>
 8007e12:	46d0      	mov	r8, sl
 8007e14:	e7eb      	b.n	8007dee <_dtoa_r+0x6e6>
 8007e16:	2200      	movs	r2, #0
 8007e18:	4b6e      	ldr	r3, [pc, #440]	; (8007fd4 <_dtoa_r+0x8cc>)
 8007e1a:	f7f8 fbd3 	bl	80005c4 <__aeabi_dmul>
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2300      	movs	r3, #0
 8007e22:	4680      	mov	r8, r0
 8007e24:	4689      	mov	r9, r1
 8007e26:	f7f8 fe35 	bl	8000a94 <__aeabi_dcmpeq>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d09b      	beq.n	8007d66 <_dtoa_r+0x65e>
 8007e2e:	e7cd      	b.n	8007dcc <_dtoa_r+0x6c4>
 8007e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	f000 80d0 	beq.w	8007fd8 <_dtoa_r+0x8d0>
 8007e38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e3a:	2a01      	cmp	r2, #1
 8007e3c:	f300 80ae 	bgt.w	8007f9c <_dtoa_r+0x894>
 8007e40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e42:	2a00      	cmp	r2, #0
 8007e44:	f000 80a6 	beq.w	8007f94 <_dtoa_r+0x88c>
 8007e48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e4e:	9f06      	ldr	r7, [sp, #24]
 8007e50:	9a06      	ldr	r2, [sp, #24]
 8007e52:	2101      	movs	r1, #1
 8007e54:	441a      	add	r2, r3
 8007e56:	9206      	str	r2, [sp, #24]
 8007e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	441a      	add	r2, r3
 8007e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e60:	f000 fb50 	bl	8008504 <__i2b>
 8007e64:	4606      	mov	r6, r0
 8007e66:	2f00      	cmp	r7, #0
 8007e68:	dd0c      	ble.n	8007e84 <_dtoa_r+0x77c>
 8007e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd09      	ble.n	8007e84 <_dtoa_r+0x77c>
 8007e70:	42bb      	cmp	r3, r7
 8007e72:	bfa8      	it	ge
 8007e74:	463b      	movge	r3, r7
 8007e76:	9a06      	ldr	r2, [sp, #24]
 8007e78:	1aff      	subs	r7, r7, r3
 8007e7a:	1ad2      	subs	r2, r2, r3
 8007e7c:	9206      	str	r2, [sp, #24]
 8007e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	9309      	str	r3, [sp, #36]	; 0x24
 8007e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e86:	b1f3      	cbz	r3, 8007ec6 <_dtoa_r+0x7be>
 8007e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 80a8 	beq.w	8007fe0 <_dtoa_r+0x8d8>
 8007e90:	2c00      	cmp	r4, #0
 8007e92:	dd10      	ble.n	8007eb6 <_dtoa_r+0x7ae>
 8007e94:	4631      	mov	r1, r6
 8007e96:	4622      	mov	r2, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f000 fbf1 	bl	8008680 <__pow5mult>
 8007e9e:	465a      	mov	r2, fp
 8007ea0:	4601      	mov	r1, r0
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 fb43 	bl	8008530 <__multiply>
 8007eaa:	4680      	mov	r8, r0
 8007eac:	4659      	mov	r1, fp
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 fa72 	bl	8008398 <_Bfree>
 8007eb4:	46c3      	mov	fp, r8
 8007eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb8:	1b1a      	subs	r2, r3, r4
 8007eba:	d004      	beq.n	8007ec6 <_dtoa_r+0x7be>
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f000 fbde 	bl	8008680 <__pow5mult>
 8007ec4:	4683      	mov	fp, r0
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 fb1b 	bl	8008504 <__i2b>
 8007ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f340 8086 	ble.w	8007fe4 <_dtoa_r+0x8dc>
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4601      	mov	r1, r0
 8007edc:	4628      	mov	r0, r5
 8007ede:	f000 fbcf 	bl	8008680 <__pow5mult>
 8007ee2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	dd7f      	ble.n	8007fea <_dtoa_r+0x8e2>
 8007eea:	f04f 0800 	mov.w	r8, #0
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ef4:	6918      	ldr	r0, [r3, #16]
 8007ef6:	f000 fab7 	bl	8008468 <__hi0bits>
 8007efa:	f1c0 0020 	rsb	r0, r0, #32
 8007efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f00:	4418      	add	r0, r3
 8007f02:	f010 001f 	ands.w	r0, r0, #31
 8007f06:	f000 8092 	beq.w	800802e <_dtoa_r+0x926>
 8007f0a:	f1c0 0320 	rsb	r3, r0, #32
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	f340 808a 	ble.w	8008028 <_dtoa_r+0x920>
 8007f14:	f1c0 001c 	rsb	r0, r0, #28
 8007f18:	9b06      	ldr	r3, [sp, #24]
 8007f1a:	4407      	add	r7, r0
 8007f1c:	4403      	add	r3, r0
 8007f1e:	9306      	str	r3, [sp, #24]
 8007f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f22:	4403      	add	r3, r0
 8007f24:	9309      	str	r3, [sp, #36]	; 0x24
 8007f26:	9b06      	ldr	r3, [sp, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dd05      	ble.n	8007f38 <_dtoa_r+0x830>
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	461a      	mov	r2, r3
 8007f30:	4628      	mov	r0, r5
 8007f32:	f000 fbff 	bl	8008734 <__lshift>
 8007f36:	4683      	mov	fp, r0
 8007f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dd05      	ble.n	8007f4a <_dtoa_r+0x842>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	461a      	mov	r2, r3
 8007f42:	4628      	mov	r0, r5
 8007f44:	f000 fbf6 	bl	8008734 <__lshift>
 8007f48:	4604      	mov	r4, r0
 8007f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d070      	beq.n	8008032 <_dtoa_r+0x92a>
 8007f50:	4621      	mov	r1, r4
 8007f52:	4658      	mov	r0, fp
 8007f54:	f000 fc5e 	bl	8008814 <__mcmp>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	da6a      	bge.n	8008032 <_dtoa_r+0x92a>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4659      	mov	r1, fp
 8007f60:	220a      	movs	r2, #10
 8007f62:	4628      	mov	r0, r5
 8007f64:	f000 fa3a 	bl	80083dc <__multadd>
 8007f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6a:	4683      	mov	fp, r0
 8007f6c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8194 	beq.w	800829e <_dtoa_r+0xb96>
 8007f76:	4631      	mov	r1, r6
 8007f78:	2300      	movs	r3, #0
 8007f7a:	220a      	movs	r2, #10
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f000 fa2d 	bl	80083dc <__multadd>
 8007f82:	f1b9 0f00 	cmp.w	r9, #0
 8007f86:	4606      	mov	r6, r0
 8007f88:	f300 8093 	bgt.w	80080b2 <_dtoa_r+0x9aa>
 8007f8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	dc57      	bgt.n	8008042 <_dtoa_r+0x93a>
 8007f92:	e08e      	b.n	80080b2 <_dtoa_r+0x9aa>
 8007f94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f9a:	e757      	b.n	8007e4c <_dtoa_r+0x744>
 8007f9c:	9b08      	ldr	r3, [sp, #32]
 8007f9e:	1e5c      	subs	r4, r3, #1
 8007fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	bfb7      	itett	lt
 8007fa6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007fa8:	1b1c      	subge	r4, r3, r4
 8007faa:	1ae2      	sublt	r2, r4, r3
 8007fac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007fae:	bfbe      	ittt	lt
 8007fb0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007fb2:	189b      	addlt	r3, r3, r2
 8007fb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007fb6:	9b08      	ldr	r3, [sp, #32]
 8007fb8:	bfb8      	it	lt
 8007fba:	2400      	movlt	r4, #0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	bfbb      	ittet	lt
 8007fc0:	9b06      	ldrlt	r3, [sp, #24]
 8007fc2:	9a08      	ldrlt	r2, [sp, #32]
 8007fc4:	9f06      	ldrge	r7, [sp, #24]
 8007fc6:	1a9f      	sublt	r7, r3, r2
 8007fc8:	bfac      	ite	ge
 8007fca:	9b08      	ldrge	r3, [sp, #32]
 8007fcc:	2300      	movlt	r3, #0
 8007fce:	e73f      	b.n	8007e50 <_dtoa_r+0x748>
 8007fd0:	3fe00000 	.word	0x3fe00000
 8007fd4:	40240000 	.word	0x40240000
 8007fd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fda:	9f06      	ldr	r7, [sp, #24]
 8007fdc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007fde:	e742      	b.n	8007e66 <_dtoa_r+0x75e>
 8007fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fe2:	e76b      	b.n	8007ebc <_dtoa_r+0x7b4>
 8007fe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	dc19      	bgt.n	800801e <_dtoa_r+0x916>
 8007fea:	9b04      	ldr	r3, [sp, #16]
 8007fec:	b9bb      	cbnz	r3, 800801e <_dtoa_r+0x916>
 8007fee:	9b05      	ldr	r3, [sp, #20]
 8007ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ff4:	b99b      	cbnz	r3, 800801e <_dtoa_r+0x916>
 8007ff6:	9b05      	ldr	r3, [sp, #20]
 8007ff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ffc:	0d1b      	lsrs	r3, r3, #20
 8007ffe:	051b      	lsls	r3, r3, #20
 8008000:	b183      	cbz	r3, 8008024 <_dtoa_r+0x91c>
 8008002:	f04f 0801 	mov.w	r8, #1
 8008006:	9b06      	ldr	r3, [sp, #24]
 8008008:	3301      	adds	r3, #1
 800800a:	9306      	str	r3, [sp, #24]
 800800c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800e:	3301      	adds	r3, #1
 8008010:	9309      	str	r3, [sp, #36]	; 0x24
 8008012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008014:	2b00      	cmp	r3, #0
 8008016:	f47f af6a 	bne.w	8007eee <_dtoa_r+0x7e6>
 800801a:	2001      	movs	r0, #1
 800801c:	e76f      	b.n	8007efe <_dtoa_r+0x7f6>
 800801e:	f04f 0800 	mov.w	r8, #0
 8008022:	e7f6      	b.n	8008012 <_dtoa_r+0x90a>
 8008024:	4698      	mov	r8, r3
 8008026:	e7f4      	b.n	8008012 <_dtoa_r+0x90a>
 8008028:	f43f af7d 	beq.w	8007f26 <_dtoa_r+0x81e>
 800802c:	4618      	mov	r0, r3
 800802e:	301c      	adds	r0, #28
 8008030:	e772      	b.n	8007f18 <_dtoa_r+0x810>
 8008032:	9b08      	ldr	r3, [sp, #32]
 8008034:	2b00      	cmp	r3, #0
 8008036:	dc36      	bgt.n	80080a6 <_dtoa_r+0x99e>
 8008038:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800803a:	2b02      	cmp	r3, #2
 800803c:	dd33      	ble.n	80080a6 <_dtoa_r+0x99e>
 800803e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008042:	f1b9 0f00 	cmp.w	r9, #0
 8008046:	d10d      	bne.n	8008064 <_dtoa_r+0x95c>
 8008048:	4621      	mov	r1, r4
 800804a:	464b      	mov	r3, r9
 800804c:	2205      	movs	r2, #5
 800804e:	4628      	mov	r0, r5
 8008050:	f000 f9c4 	bl	80083dc <__multadd>
 8008054:	4601      	mov	r1, r0
 8008056:	4604      	mov	r4, r0
 8008058:	4658      	mov	r0, fp
 800805a:	f000 fbdb 	bl	8008814 <__mcmp>
 800805e:	2800      	cmp	r0, #0
 8008060:	f73f adb8 	bgt.w	8007bd4 <_dtoa_r+0x4cc>
 8008064:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008066:	9f03      	ldr	r7, [sp, #12]
 8008068:	ea6f 0a03 	mvn.w	sl, r3
 800806c:	f04f 0800 	mov.w	r8, #0
 8008070:	4621      	mov	r1, r4
 8008072:	4628      	mov	r0, r5
 8008074:	f000 f990 	bl	8008398 <_Bfree>
 8008078:	2e00      	cmp	r6, #0
 800807a:	f43f aea7 	beq.w	8007dcc <_dtoa_r+0x6c4>
 800807e:	f1b8 0f00 	cmp.w	r8, #0
 8008082:	d005      	beq.n	8008090 <_dtoa_r+0x988>
 8008084:	45b0      	cmp	r8, r6
 8008086:	d003      	beq.n	8008090 <_dtoa_r+0x988>
 8008088:	4641      	mov	r1, r8
 800808a:	4628      	mov	r0, r5
 800808c:	f000 f984 	bl	8008398 <_Bfree>
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	f000 f980 	bl	8008398 <_Bfree>
 8008098:	e698      	b.n	8007dcc <_dtoa_r+0x6c4>
 800809a:	2400      	movs	r4, #0
 800809c:	4626      	mov	r6, r4
 800809e:	e7e1      	b.n	8008064 <_dtoa_r+0x95c>
 80080a0:	46c2      	mov	sl, r8
 80080a2:	4626      	mov	r6, r4
 80080a4:	e596      	b.n	8007bd4 <_dtoa_r+0x4cc>
 80080a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 80fd 	beq.w	80082ac <_dtoa_r+0xba4>
 80080b2:	2f00      	cmp	r7, #0
 80080b4:	dd05      	ble.n	80080c2 <_dtoa_r+0x9ba>
 80080b6:	4631      	mov	r1, r6
 80080b8:	463a      	mov	r2, r7
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 fb3a 	bl	8008734 <__lshift>
 80080c0:	4606      	mov	r6, r0
 80080c2:	f1b8 0f00 	cmp.w	r8, #0
 80080c6:	d05c      	beq.n	8008182 <_dtoa_r+0xa7a>
 80080c8:	4628      	mov	r0, r5
 80080ca:	6871      	ldr	r1, [r6, #4]
 80080cc:	f000 f924 	bl	8008318 <_Balloc>
 80080d0:	4607      	mov	r7, r0
 80080d2:	b928      	cbnz	r0, 80080e0 <_dtoa_r+0x9d8>
 80080d4:	4602      	mov	r2, r0
 80080d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080da:	4b7f      	ldr	r3, [pc, #508]	; (80082d8 <_dtoa_r+0xbd0>)
 80080dc:	f7ff bb28 	b.w	8007730 <_dtoa_r+0x28>
 80080e0:	6932      	ldr	r2, [r6, #16]
 80080e2:	f106 010c 	add.w	r1, r6, #12
 80080e6:	3202      	adds	r2, #2
 80080e8:	0092      	lsls	r2, r2, #2
 80080ea:	300c      	adds	r0, #12
 80080ec:	f7fe fdd6 	bl	8006c9c <memcpy>
 80080f0:	2201      	movs	r2, #1
 80080f2:	4639      	mov	r1, r7
 80080f4:	4628      	mov	r0, r5
 80080f6:	f000 fb1d 	bl	8008734 <__lshift>
 80080fa:	46b0      	mov	r8, r6
 80080fc:	4606      	mov	r6, r0
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	9308      	str	r3, [sp, #32]
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	444b      	add	r3, r9
 8008108:	930a      	str	r3, [sp, #40]	; 0x28
 800810a:	9b04      	ldr	r3, [sp, #16]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	9309      	str	r3, [sp, #36]	; 0x24
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	4621      	mov	r1, r4
 8008116:	3b01      	subs	r3, #1
 8008118:	4658      	mov	r0, fp
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	f7ff fa68 	bl	80075f0 <quorem>
 8008120:	4603      	mov	r3, r0
 8008122:	4641      	mov	r1, r8
 8008124:	3330      	adds	r3, #48	; 0x30
 8008126:	9006      	str	r0, [sp, #24]
 8008128:	4658      	mov	r0, fp
 800812a:	930b      	str	r3, [sp, #44]	; 0x2c
 800812c:	f000 fb72 	bl	8008814 <__mcmp>
 8008130:	4632      	mov	r2, r6
 8008132:	4681      	mov	r9, r0
 8008134:	4621      	mov	r1, r4
 8008136:	4628      	mov	r0, r5
 8008138:	f000 fb88 	bl	800884c <__mdiff>
 800813c:	68c2      	ldr	r2, [r0, #12]
 800813e:	4607      	mov	r7, r0
 8008140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008142:	bb02      	cbnz	r2, 8008186 <_dtoa_r+0xa7e>
 8008144:	4601      	mov	r1, r0
 8008146:	4658      	mov	r0, fp
 8008148:	f000 fb64 	bl	8008814 <__mcmp>
 800814c:	4602      	mov	r2, r0
 800814e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008150:	4639      	mov	r1, r7
 8008152:	4628      	mov	r0, r5
 8008154:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008158:	f000 f91e 	bl	8008398 <_Bfree>
 800815c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800815e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008160:	9f08      	ldr	r7, [sp, #32]
 8008162:	ea43 0102 	orr.w	r1, r3, r2
 8008166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008168:	430b      	orrs	r3, r1
 800816a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800816c:	d10d      	bne.n	800818a <_dtoa_r+0xa82>
 800816e:	2b39      	cmp	r3, #57	; 0x39
 8008170:	d029      	beq.n	80081c6 <_dtoa_r+0xabe>
 8008172:	f1b9 0f00 	cmp.w	r9, #0
 8008176:	dd01      	ble.n	800817c <_dtoa_r+0xa74>
 8008178:	9b06      	ldr	r3, [sp, #24]
 800817a:	3331      	adds	r3, #49	; 0x31
 800817c:	9a04      	ldr	r2, [sp, #16]
 800817e:	7013      	strb	r3, [r2, #0]
 8008180:	e776      	b.n	8008070 <_dtoa_r+0x968>
 8008182:	4630      	mov	r0, r6
 8008184:	e7b9      	b.n	80080fa <_dtoa_r+0x9f2>
 8008186:	2201      	movs	r2, #1
 8008188:	e7e2      	b.n	8008150 <_dtoa_r+0xa48>
 800818a:	f1b9 0f00 	cmp.w	r9, #0
 800818e:	db06      	blt.n	800819e <_dtoa_r+0xa96>
 8008190:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008192:	ea41 0909 	orr.w	r9, r1, r9
 8008196:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008198:	ea59 0101 	orrs.w	r1, r9, r1
 800819c:	d120      	bne.n	80081e0 <_dtoa_r+0xad8>
 800819e:	2a00      	cmp	r2, #0
 80081a0:	ddec      	ble.n	800817c <_dtoa_r+0xa74>
 80081a2:	4659      	mov	r1, fp
 80081a4:	2201      	movs	r2, #1
 80081a6:	4628      	mov	r0, r5
 80081a8:	9308      	str	r3, [sp, #32]
 80081aa:	f000 fac3 	bl	8008734 <__lshift>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4683      	mov	fp, r0
 80081b2:	f000 fb2f 	bl	8008814 <__mcmp>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	9b08      	ldr	r3, [sp, #32]
 80081ba:	dc02      	bgt.n	80081c2 <_dtoa_r+0xaba>
 80081bc:	d1de      	bne.n	800817c <_dtoa_r+0xa74>
 80081be:	07da      	lsls	r2, r3, #31
 80081c0:	d5dc      	bpl.n	800817c <_dtoa_r+0xa74>
 80081c2:	2b39      	cmp	r3, #57	; 0x39
 80081c4:	d1d8      	bne.n	8008178 <_dtoa_r+0xa70>
 80081c6:	2339      	movs	r3, #57	; 0x39
 80081c8:	9a04      	ldr	r2, [sp, #16]
 80081ca:	7013      	strb	r3, [r2, #0]
 80081cc:	463b      	mov	r3, r7
 80081ce:	461f      	mov	r7, r3
 80081d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	2a39      	cmp	r2, #57	; 0x39
 80081d8:	d050      	beq.n	800827c <_dtoa_r+0xb74>
 80081da:	3201      	adds	r2, #1
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	e747      	b.n	8008070 <_dtoa_r+0x968>
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	dd03      	ble.n	80081ec <_dtoa_r+0xae4>
 80081e4:	2b39      	cmp	r3, #57	; 0x39
 80081e6:	d0ee      	beq.n	80081c6 <_dtoa_r+0xabe>
 80081e8:	3301      	adds	r3, #1
 80081ea:	e7c7      	b.n	800817c <_dtoa_r+0xa74>
 80081ec:	9a08      	ldr	r2, [sp, #32]
 80081ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081f4:	428a      	cmp	r2, r1
 80081f6:	d02a      	beq.n	800824e <_dtoa_r+0xb46>
 80081f8:	4659      	mov	r1, fp
 80081fa:	2300      	movs	r3, #0
 80081fc:	220a      	movs	r2, #10
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 f8ec 	bl	80083dc <__multadd>
 8008204:	45b0      	cmp	r8, r6
 8008206:	4683      	mov	fp, r0
 8008208:	f04f 0300 	mov.w	r3, #0
 800820c:	f04f 020a 	mov.w	r2, #10
 8008210:	4641      	mov	r1, r8
 8008212:	4628      	mov	r0, r5
 8008214:	d107      	bne.n	8008226 <_dtoa_r+0xb1e>
 8008216:	f000 f8e1 	bl	80083dc <__multadd>
 800821a:	4680      	mov	r8, r0
 800821c:	4606      	mov	r6, r0
 800821e:	9b08      	ldr	r3, [sp, #32]
 8008220:	3301      	adds	r3, #1
 8008222:	9308      	str	r3, [sp, #32]
 8008224:	e775      	b.n	8008112 <_dtoa_r+0xa0a>
 8008226:	f000 f8d9 	bl	80083dc <__multadd>
 800822a:	4631      	mov	r1, r6
 800822c:	4680      	mov	r8, r0
 800822e:	2300      	movs	r3, #0
 8008230:	220a      	movs	r2, #10
 8008232:	4628      	mov	r0, r5
 8008234:	f000 f8d2 	bl	80083dc <__multadd>
 8008238:	4606      	mov	r6, r0
 800823a:	e7f0      	b.n	800821e <_dtoa_r+0xb16>
 800823c:	f1b9 0f00 	cmp.w	r9, #0
 8008240:	bfcc      	ite	gt
 8008242:	464f      	movgt	r7, r9
 8008244:	2701      	movle	r7, #1
 8008246:	f04f 0800 	mov.w	r8, #0
 800824a:	9a03      	ldr	r2, [sp, #12]
 800824c:	4417      	add	r7, r2
 800824e:	4659      	mov	r1, fp
 8008250:	2201      	movs	r2, #1
 8008252:	4628      	mov	r0, r5
 8008254:	9308      	str	r3, [sp, #32]
 8008256:	f000 fa6d 	bl	8008734 <__lshift>
 800825a:	4621      	mov	r1, r4
 800825c:	4683      	mov	fp, r0
 800825e:	f000 fad9 	bl	8008814 <__mcmp>
 8008262:	2800      	cmp	r0, #0
 8008264:	dcb2      	bgt.n	80081cc <_dtoa_r+0xac4>
 8008266:	d102      	bne.n	800826e <_dtoa_r+0xb66>
 8008268:	9b08      	ldr	r3, [sp, #32]
 800826a:	07db      	lsls	r3, r3, #31
 800826c:	d4ae      	bmi.n	80081cc <_dtoa_r+0xac4>
 800826e:	463b      	mov	r3, r7
 8008270:	461f      	mov	r7, r3
 8008272:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008276:	2a30      	cmp	r2, #48	; 0x30
 8008278:	d0fa      	beq.n	8008270 <_dtoa_r+0xb68>
 800827a:	e6f9      	b.n	8008070 <_dtoa_r+0x968>
 800827c:	9a03      	ldr	r2, [sp, #12]
 800827e:	429a      	cmp	r2, r3
 8008280:	d1a5      	bne.n	80081ce <_dtoa_r+0xac6>
 8008282:	2331      	movs	r3, #49	; 0x31
 8008284:	f10a 0a01 	add.w	sl, sl, #1
 8008288:	e779      	b.n	800817e <_dtoa_r+0xa76>
 800828a:	4b14      	ldr	r3, [pc, #80]	; (80082dc <_dtoa_r+0xbd4>)
 800828c:	f7ff baa8 	b.w	80077e0 <_dtoa_r+0xd8>
 8008290:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008292:	2b00      	cmp	r3, #0
 8008294:	f47f aa81 	bne.w	800779a <_dtoa_r+0x92>
 8008298:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <_dtoa_r+0xbd8>)
 800829a:	f7ff baa1 	b.w	80077e0 <_dtoa_r+0xd8>
 800829e:	f1b9 0f00 	cmp.w	r9, #0
 80082a2:	dc03      	bgt.n	80082ac <_dtoa_r+0xba4>
 80082a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	f73f aecb 	bgt.w	8008042 <_dtoa_r+0x93a>
 80082ac:	9f03      	ldr	r7, [sp, #12]
 80082ae:	4621      	mov	r1, r4
 80082b0:	4658      	mov	r0, fp
 80082b2:	f7ff f99d 	bl	80075f0 <quorem>
 80082b6:	9a03      	ldr	r2, [sp, #12]
 80082b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80082bc:	f807 3b01 	strb.w	r3, [r7], #1
 80082c0:	1aba      	subs	r2, r7, r2
 80082c2:	4591      	cmp	r9, r2
 80082c4:	ddba      	ble.n	800823c <_dtoa_r+0xb34>
 80082c6:	4659      	mov	r1, fp
 80082c8:	2300      	movs	r3, #0
 80082ca:	220a      	movs	r2, #10
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 f885 	bl	80083dc <__multadd>
 80082d2:	4683      	mov	fp, r0
 80082d4:	e7eb      	b.n	80082ae <_dtoa_r+0xba6>
 80082d6:	bf00      	nop
 80082d8:	0800a25f 	.word	0x0800a25f
 80082dc:	0800a1bc 	.word	0x0800a1bc
 80082e0:	0800a1e0 	.word	0x0800a1e0

080082e4 <_localeconv_r>:
 80082e4:	4800      	ldr	r0, [pc, #0]	; (80082e8 <_localeconv_r+0x4>)
 80082e6:	4770      	bx	lr
 80082e8:	20000164 	.word	0x20000164

080082ec <malloc>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <malloc+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f000 bc0f 	b.w	8008b14 <_malloc_r>
 80082f6:	bf00      	nop
 80082f8:	20000010 	.word	0x20000010

080082fc <memchr>:
 80082fc:	4603      	mov	r3, r0
 80082fe:	b510      	push	{r4, lr}
 8008300:	b2c9      	uxtb	r1, r1
 8008302:	4402      	add	r2, r0
 8008304:	4293      	cmp	r3, r2
 8008306:	4618      	mov	r0, r3
 8008308:	d101      	bne.n	800830e <memchr+0x12>
 800830a:	2000      	movs	r0, #0
 800830c:	e003      	b.n	8008316 <memchr+0x1a>
 800830e:	7804      	ldrb	r4, [r0, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	428c      	cmp	r4, r1
 8008314:	d1f6      	bne.n	8008304 <memchr+0x8>
 8008316:	bd10      	pop	{r4, pc}

08008318 <_Balloc>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800831c:	4604      	mov	r4, r0
 800831e:	460d      	mov	r5, r1
 8008320:	b976      	cbnz	r6, 8008340 <_Balloc+0x28>
 8008322:	2010      	movs	r0, #16
 8008324:	f7ff ffe2 	bl	80082ec <malloc>
 8008328:	4602      	mov	r2, r0
 800832a:	6260      	str	r0, [r4, #36]	; 0x24
 800832c:	b920      	cbnz	r0, 8008338 <_Balloc+0x20>
 800832e:	2166      	movs	r1, #102	; 0x66
 8008330:	4b17      	ldr	r3, [pc, #92]	; (8008390 <_Balloc+0x78>)
 8008332:	4818      	ldr	r0, [pc, #96]	; (8008394 <_Balloc+0x7c>)
 8008334:	f000 fdce 	bl	8008ed4 <__assert_func>
 8008338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800833c:	6006      	str	r6, [r0, #0]
 800833e:	60c6      	str	r6, [r0, #12]
 8008340:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008342:	68f3      	ldr	r3, [r6, #12]
 8008344:	b183      	cbz	r3, 8008368 <_Balloc+0x50>
 8008346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800834e:	b9b8      	cbnz	r0, 8008380 <_Balloc+0x68>
 8008350:	2101      	movs	r1, #1
 8008352:	fa01 f605 	lsl.w	r6, r1, r5
 8008356:	1d72      	adds	r2, r6, #5
 8008358:	4620      	mov	r0, r4
 800835a:	0092      	lsls	r2, r2, #2
 800835c:	f000 fb5e 	bl	8008a1c <_calloc_r>
 8008360:	b160      	cbz	r0, 800837c <_Balloc+0x64>
 8008362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008366:	e00e      	b.n	8008386 <_Balloc+0x6e>
 8008368:	2221      	movs	r2, #33	; 0x21
 800836a:	2104      	movs	r1, #4
 800836c:	4620      	mov	r0, r4
 800836e:	f000 fb55 	bl	8008a1c <_calloc_r>
 8008372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008374:	60f0      	str	r0, [r6, #12]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e4      	bne.n	8008346 <_Balloc+0x2e>
 800837c:	2000      	movs	r0, #0
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	6802      	ldr	r2, [r0, #0]
 8008382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008386:	2300      	movs	r3, #0
 8008388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800838c:	e7f7      	b.n	800837e <_Balloc+0x66>
 800838e:	bf00      	nop
 8008390:	0800a1ed 	.word	0x0800a1ed
 8008394:	0800a270 	.word	0x0800a270

08008398 <_Bfree>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800839c:	4605      	mov	r5, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	b976      	cbnz	r6, 80083c0 <_Bfree+0x28>
 80083a2:	2010      	movs	r0, #16
 80083a4:	f7ff ffa2 	bl	80082ec <malloc>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6268      	str	r0, [r5, #36]	; 0x24
 80083ac:	b920      	cbnz	r0, 80083b8 <_Bfree+0x20>
 80083ae:	218a      	movs	r1, #138	; 0x8a
 80083b0:	4b08      	ldr	r3, [pc, #32]	; (80083d4 <_Bfree+0x3c>)
 80083b2:	4809      	ldr	r0, [pc, #36]	; (80083d8 <_Bfree+0x40>)
 80083b4:	f000 fd8e 	bl	8008ed4 <__assert_func>
 80083b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083bc:	6006      	str	r6, [r0, #0]
 80083be:	60c6      	str	r6, [r0, #12]
 80083c0:	b13c      	cbz	r4, 80083d2 <_Bfree+0x3a>
 80083c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083c4:	6862      	ldr	r2, [r4, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083cc:	6021      	str	r1, [r4, #0]
 80083ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	0800a1ed 	.word	0x0800a1ed
 80083d8:	0800a270 	.word	0x0800a270

080083dc <__multadd>:
 80083dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e0:	4607      	mov	r7, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	461e      	mov	r6, r3
 80083e6:	2000      	movs	r0, #0
 80083e8:	690d      	ldr	r5, [r1, #16]
 80083ea:	f101 0c14 	add.w	ip, r1, #20
 80083ee:	f8dc 3000 	ldr.w	r3, [ip]
 80083f2:	3001      	adds	r0, #1
 80083f4:	b299      	uxth	r1, r3
 80083f6:	fb02 6101 	mla	r1, r2, r1, r6
 80083fa:	0c1e      	lsrs	r6, r3, #16
 80083fc:	0c0b      	lsrs	r3, r1, #16
 80083fe:	fb02 3306 	mla	r3, r2, r6, r3
 8008402:	b289      	uxth	r1, r1
 8008404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008408:	4285      	cmp	r5, r0
 800840a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800840e:	f84c 1b04 	str.w	r1, [ip], #4
 8008412:	dcec      	bgt.n	80083ee <__multadd+0x12>
 8008414:	b30e      	cbz	r6, 800845a <__multadd+0x7e>
 8008416:	68a3      	ldr	r3, [r4, #8]
 8008418:	42ab      	cmp	r3, r5
 800841a:	dc19      	bgt.n	8008450 <__multadd+0x74>
 800841c:	6861      	ldr	r1, [r4, #4]
 800841e:	4638      	mov	r0, r7
 8008420:	3101      	adds	r1, #1
 8008422:	f7ff ff79 	bl	8008318 <_Balloc>
 8008426:	4680      	mov	r8, r0
 8008428:	b928      	cbnz	r0, 8008436 <__multadd+0x5a>
 800842a:	4602      	mov	r2, r0
 800842c:	21b5      	movs	r1, #181	; 0xb5
 800842e:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <__multadd+0x84>)
 8008430:	480c      	ldr	r0, [pc, #48]	; (8008464 <__multadd+0x88>)
 8008432:	f000 fd4f 	bl	8008ed4 <__assert_func>
 8008436:	6922      	ldr	r2, [r4, #16]
 8008438:	f104 010c 	add.w	r1, r4, #12
 800843c:	3202      	adds	r2, #2
 800843e:	0092      	lsls	r2, r2, #2
 8008440:	300c      	adds	r0, #12
 8008442:	f7fe fc2b 	bl	8006c9c <memcpy>
 8008446:	4621      	mov	r1, r4
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff ffa5 	bl	8008398 <_Bfree>
 800844e:	4644      	mov	r4, r8
 8008450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008454:	3501      	adds	r5, #1
 8008456:	615e      	str	r6, [r3, #20]
 8008458:	6125      	str	r5, [r4, #16]
 800845a:	4620      	mov	r0, r4
 800845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008460:	0800a25f 	.word	0x0800a25f
 8008464:	0800a270 	.word	0x0800a270

08008468 <__hi0bits>:
 8008468:	0c02      	lsrs	r2, r0, #16
 800846a:	0412      	lsls	r2, r2, #16
 800846c:	4603      	mov	r3, r0
 800846e:	b9ca      	cbnz	r2, 80084a4 <__hi0bits+0x3c>
 8008470:	0403      	lsls	r3, r0, #16
 8008472:	2010      	movs	r0, #16
 8008474:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008478:	bf04      	itt	eq
 800847a:	021b      	lsleq	r3, r3, #8
 800847c:	3008      	addeq	r0, #8
 800847e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008482:	bf04      	itt	eq
 8008484:	011b      	lsleq	r3, r3, #4
 8008486:	3004      	addeq	r0, #4
 8008488:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800848c:	bf04      	itt	eq
 800848e:	009b      	lsleq	r3, r3, #2
 8008490:	3002      	addeq	r0, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	db05      	blt.n	80084a2 <__hi0bits+0x3a>
 8008496:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800849a:	f100 0001 	add.w	r0, r0, #1
 800849e:	bf08      	it	eq
 80084a0:	2020      	moveq	r0, #32
 80084a2:	4770      	bx	lr
 80084a4:	2000      	movs	r0, #0
 80084a6:	e7e5      	b.n	8008474 <__hi0bits+0xc>

080084a8 <__lo0bits>:
 80084a8:	6803      	ldr	r3, [r0, #0]
 80084aa:	4602      	mov	r2, r0
 80084ac:	f013 0007 	ands.w	r0, r3, #7
 80084b0:	d00b      	beq.n	80084ca <__lo0bits+0x22>
 80084b2:	07d9      	lsls	r1, r3, #31
 80084b4:	d421      	bmi.n	80084fa <__lo0bits+0x52>
 80084b6:	0798      	lsls	r0, r3, #30
 80084b8:	bf49      	itett	mi
 80084ba:	085b      	lsrmi	r3, r3, #1
 80084bc:	089b      	lsrpl	r3, r3, #2
 80084be:	2001      	movmi	r0, #1
 80084c0:	6013      	strmi	r3, [r2, #0]
 80084c2:	bf5c      	itt	pl
 80084c4:	2002      	movpl	r0, #2
 80084c6:	6013      	strpl	r3, [r2, #0]
 80084c8:	4770      	bx	lr
 80084ca:	b299      	uxth	r1, r3
 80084cc:	b909      	cbnz	r1, 80084d2 <__lo0bits+0x2a>
 80084ce:	2010      	movs	r0, #16
 80084d0:	0c1b      	lsrs	r3, r3, #16
 80084d2:	b2d9      	uxtb	r1, r3
 80084d4:	b909      	cbnz	r1, 80084da <__lo0bits+0x32>
 80084d6:	3008      	adds	r0, #8
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	0719      	lsls	r1, r3, #28
 80084dc:	bf04      	itt	eq
 80084de:	091b      	lsreq	r3, r3, #4
 80084e0:	3004      	addeq	r0, #4
 80084e2:	0799      	lsls	r1, r3, #30
 80084e4:	bf04      	itt	eq
 80084e6:	089b      	lsreq	r3, r3, #2
 80084e8:	3002      	addeq	r0, #2
 80084ea:	07d9      	lsls	r1, r3, #31
 80084ec:	d403      	bmi.n	80084f6 <__lo0bits+0x4e>
 80084ee:	085b      	lsrs	r3, r3, #1
 80084f0:	f100 0001 	add.w	r0, r0, #1
 80084f4:	d003      	beq.n	80084fe <__lo0bits+0x56>
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	4770      	bx	lr
 80084fa:	2000      	movs	r0, #0
 80084fc:	4770      	bx	lr
 80084fe:	2020      	movs	r0, #32
 8008500:	4770      	bx	lr
	...

08008504 <__i2b>:
 8008504:	b510      	push	{r4, lr}
 8008506:	460c      	mov	r4, r1
 8008508:	2101      	movs	r1, #1
 800850a:	f7ff ff05 	bl	8008318 <_Balloc>
 800850e:	4602      	mov	r2, r0
 8008510:	b928      	cbnz	r0, 800851e <__i2b+0x1a>
 8008512:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008516:	4b04      	ldr	r3, [pc, #16]	; (8008528 <__i2b+0x24>)
 8008518:	4804      	ldr	r0, [pc, #16]	; (800852c <__i2b+0x28>)
 800851a:	f000 fcdb 	bl	8008ed4 <__assert_func>
 800851e:	2301      	movs	r3, #1
 8008520:	6144      	str	r4, [r0, #20]
 8008522:	6103      	str	r3, [r0, #16]
 8008524:	bd10      	pop	{r4, pc}
 8008526:	bf00      	nop
 8008528:	0800a25f 	.word	0x0800a25f
 800852c:	0800a270 	.word	0x0800a270

08008530 <__multiply>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	4691      	mov	r9, r2
 8008536:	690a      	ldr	r2, [r1, #16]
 8008538:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800853c:	460c      	mov	r4, r1
 800853e:	429a      	cmp	r2, r3
 8008540:	bfbe      	ittt	lt
 8008542:	460b      	movlt	r3, r1
 8008544:	464c      	movlt	r4, r9
 8008546:	4699      	movlt	r9, r3
 8008548:	6927      	ldr	r7, [r4, #16]
 800854a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800854e:	68a3      	ldr	r3, [r4, #8]
 8008550:	6861      	ldr	r1, [r4, #4]
 8008552:	eb07 060a 	add.w	r6, r7, sl
 8008556:	42b3      	cmp	r3, r6
 8008558:	b085      	sub	sp, #20
 800855a:	bfb8      	it	lt
 800855c:	3101      	addlt	r1, #1
 800855e:	f7ff fedb 	bl	8008318 <_Balloc>
 8008562:	b930      	cbnz	r0, 8008572 <__multiply+0x42>
 8008564:	4602      	mov	r2, r0
 8008566:	f240 115d 	movw	r1, #349	; 0x15d
 800856a:	4b43      	ldr	r3, [pc, #268]	; (8008678 <__multiply+0x148>)
 800856c:	4843      	ldr	r0, [pc, #268]	; (800867c <__multiply+0x14c>)
 800856e:	f000 fcb1 	bl	8008ed4 <__assert_func>
 8008572:	f100 0514 	add.w	r5, r0, #20
 8008576:	462b      	mov	r3, r5
 8008578:	2200      	movs	r2, #0
 800857a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800857e:	4543      	cmp	r3, r8
 8008580:	d321      	bcc.n	80085c6 <__multiply+0x96>
 8008582:	f104 0314 	add.w	r3, r4, #20
 8008586:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800858a:	f109 0314 	add.w	r3, r9, #20
 800858e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008592:	9202      	str	r2, [sp, #8]
 8008594:	1b3a      	subs	r2, r7, r4
 8008596:	3a15      	subs	r2, #21
 8008598:	f022 0203 	bic.w	r2, r2, #3
 800859c:	3204      	adds	r2, #4
 800859e:	f104 0115 	add.w	r1, r4, #21
 80085a2:	428f      	cmp	r7, r1
 80085a4:	bf38      	it	cc
 80085a6:	2204      	movcc	r2, #4
 80085a8:	9201      	str	r2, [sp, #4]
 80085aa:	9a02      	ldr	r2, [sp, #8]
 80085ac:	9303      	str	r3, [sp, #12]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d80c      	bhi.n	80085cc <__multiply+0x9c>
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	dd03      	ble.n	80085be <__multiply+0x8e>
 80085b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d059      	beq.n	8008672 <__multiply+0x142>
 80085be:	6106      	str	r6, [r0, #16]
 80085c0:	b005      	add	sp, #20
 80085c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c6:	f843 2b04 	str.w	r2, [r3], #4
 80085ca:	e7d8      	b.n	800857e <__multiply+0x4e>
 80085cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80085d0:	f1ba 0f00 	cmp.w	sl, #0
 80085d4:	d023      	beq.n	800861e <__multiply+0xee>
 80085d6:	46a9      	mov	r9, r5
 80085d8:	f04f 0c00 	mov.w	ip, #0
 80085dc:	f104 0e14 	add.w	lr, r4, #20
 80085e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085e4:	f8d9 1000 	ldr.w	r1, [r9]
 80085e8:	fa1f fb82 	uxth.w	fp, r2
 80085ec:	b289      	uxth	r1, r1
 80085ee:	fb0a 110b 	mla	r1, sl, fp, r1
 80085f2:	4461      	add	r1, ip
 80085f4:	f8d9 c000 	ldr.w	ip, [r9]
 80085f8:	0c12      	lsrs	r2, r2, #16
 80085fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80085fe:	fb0a c202 	mla	r2, sl, r2, ip
 8008602:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008606:	b289      	uxth	r1, r1
 8008608:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800860c:	4577      	cmp	r7, lr
 800860e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008612:	f849 1b04 	str.w	r1, [r9], #4
 8008616:	d8e3      	bhi.n	80085e0 <__multiply+0xb0>
 8008618:	9a01      	ldr	r2, [sp, #4]
 800861a:	f845 c002 	str.w	ip, [r5, r2]
 800861e:	9a03      	ldr	r2, [sp, #12]
 8008620:	3304      	adds	r3, #4
 8008622:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008626:	f1b9 0f00 	cmp.w	r9, #0
 800862a:	d020      	beq.n	800866e <__multiply+0x13e>
 800862c:	46ae      	mov	lr, r5
 800862e:	f04f 0a00 	mov.w	sl, #0
 8008632:	6829      	ldr	r1, [r5, #0]
 8008634:	f104 0c14 	add.w	ip, r4, #20
 8008638:	f8bc b000 	ldrh.w	fp, [ip]
 800863c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008640:	b289      	uxth	r1, r1
 8008642:	fb09 220b 	mla	r2, r9, fp, r2
 8008646:	4492      	add	sl, r2
 8008648:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800864c:	f84e 1b04 	str.w	r1, [lr], #4
 8008650:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008654:	f8be 1000 	ldrh.w	r1, [lr]
 8008658:	0c12      	lsrs	r2, r2, #16
 800865a:	fb09 1102 	mla	r1, r9, r2, r1
 800865e:	4567      	cmp	r7, ip
 8008660:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008664:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008668:	d8e6      	bhi.n	8008638 <__multiply+0x108>
 800866a:	9a01      	ldr	r2, [sp, #4]
 800866c:	50a9      	str	r1, [r5, r2]
 800866e:	3504      	adds	r5, #4
 8008670:	e79b      	b.n	80085aa <__multiply+0x7a>
 8008672:	3e01      	subs	r6, #1
 8008674:	e79d      	b.n	80085b2 <__multiply+0x82>
 8008676:	bf00      	nop
 8008678:	0800a25f 	.word	0x0800a25f
 800867c:	0800a270 	.word	0x0800a270

08008680 <__pow5mult>:
 8008680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008684:	4615      	mov	r5, r2
 8008686:	f012 0203 	ands.w	r2, r2, #3
 800868a:	4606      	mov	r6, r0
 800868c:	460f      	mov	r7, r1
 800868e:	d007      	beq.n	80086a0 <__pow5mult+0x20>
 8008690:	4c25      	ldr	r4, [pc, #148]	; (8008728 <__pow5mult+0xa8>)
 8008692:	3a01      	subs	r2, #1
 8008694:	2300      	movs	r3, #0
 8008696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800869a:	f7ff fe9f 	bl	80083dc <__multadd>
 800869e:	4607      	mov	r7, r0
 80086a0:	10ad      	asrs	r5, r5, #2
 80086a2:	d03d      	beq.n	8008720 <__pow5mult+0xa0>
 80086a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086a6:	b97c      	cbnz	r4, 80086c8 <__pow5mult+0x48>
 80086a8:	2010      	movs	r0, #16
 80086aa:	f7ff fe1f 	bl	80082ec <malloc>
 80086ae:	4602      	mov	r2, r0
 80086b0:	6270      	str	r0, [r6, #36]	; 0x24
 80086b2:	b928      	cbnz	r0, 80086c0 <__pow5mult+0x40>
 80086b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086b8:	4b1c      	ldr	r3, [pc, #112]	; (800872c <__pow5mult+0xac>)
 80086ba:	481d      	ldr	r0, [pc, #116]	; (8008730 <__pow5mult+0xb0>)
 80086bc:	f000 fc0a 	bl	8008ed4 <__assert_func>
 80086c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086c4:	6004      	str	r4, [r0, #0]
 80086c6:	60c4      	str	r4, [r0, #12]
 80086c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086d0:	b94c      	cbnz	r4, 80086e6 <__pow5mult+0x66>
 80086d2:	f240 2171 	movw	r1, #625	; 0x271
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7ff ff14 	bl	8008504 <__i2b>
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80086e4:	6003      	str	r3, [r0, #0]
 80086e6:	f04f 0900 	mov.w	r9, #0
 80086ea:	07eb      	lsls	r3, r5, #31
 80086ec:	d50a      	bpl.n	8008704 <__pow5mult+0x84>
 80086ee:	4639      	mov	r1, r7
 80086f0:	4622      	mov	r2, r4
 80086f2:	4630      	mov	r0, r6
 80086f4:	f7ff ff1c 	bl	8008530 <__multiply>
 80086f8:	4680      	mov	r8, r0
 80086fa:	4639      	mov	r1, r7
 80086fc:	4630      	mov	r0, r6
 80086fe:	f7ff fe4b 	bl	8008398 <_Bfree>
 8008702:	4647      	mov	r7, r8
 8008704:	106d      	asrs	r5, r5, #1
 8008706:	d00b      	beq.n	8008720 <__pow5mult+0xa0>
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	b938      	cbnz	r0, 800871c <__pow5mult+0x9c>
 800870c:	4622      	mov	r2, r4
 800870e:	4621      	mov	r1, r4
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ff0d 	bl	8008530 <__multiply>
 8008716:	6020      	str	r0, [r4, #0]
 8008718:	f8c0 9000 	str.w	r9, [r0]
 800871c:	4604      	mov	r4, r0
 800871e:	e7e4      	b.n	80086ea <__pow5mult+0x6a>
 8008720:	4638      	mov	r0, r7
 8008722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008726:	bf00      	nop
 8008728:	0800a3c0 	.word	0x0800a3c0
 800872c:	0800a1ed 	.word	0x0800a1ed
 8008730:	0800a270 	.word	0x0800a270

08008734 <__lshift>:
 8008734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008738:	460c      	mov	r4, r1
 800873a:	4607      	mov	r7, r0
 800873c:	4691      	mov	r9, r2
 800873e:	6923      	ldr	r3, [r4, #16]
 8008740:	6849      	ldr	r1, [r1, #4]
 8008742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008746:	68a3      	ldr	r3, [r4, #8]
 8008748:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800874c:	f108 0601 	add.w	r6, r8, #1
 8008750:	42b3      	cmp	r3, r6
 8008752:	db0b      	blt.n	800876c <__lshift+0x38>
 8008754:	4638      	mov	r0, r7
 8008756:	f7ff fddf 	bl	8008318 <_Balloc>
 800875a:	4605      	mov	r5, r0
 800875c:	b948      	cbnz	r0, 8008772 <__lshift+0x3e>
 800875e:	4602      	mov	r2, r0
 8008760:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008764:	4b29      	ldr	r3, [pc, #164]	; (800880c <__lshift+0xd8>)
 8008766:	482a      	ldr	r0, [pc, #168]	; (8008810 <__lshift+0xdc>)
 8008768:	f000 fbb4 	bl	8008ed4 <__assert_func>
 800876c:	3101      	adds	r1, #1
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	e7ee      	b.n	8008750 <__lshift+0x1c>
 8008772:	2300      	movs	r3, #0
 8008774:	f100 0114 	add.w	r1, r0, #20
 8008778:	f100 0210 	add.w	r2, r0, #16
 800877c:	4618      	mov	r0, r3
 800877e:	4553      	cmp	r3, sl
 8008780:	db37      	blt.n	80087f2 <__lshift+0xbe>
 8008782:	6920      	ldr	r0, [r4, #16]
 8008784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008788:	f104 0314 	add.w	r3, r4, #20
 800878c:	f019 091f 	ands.w	r9, r9, #31
 8008790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008794:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008798:	d02f      	beq.n	80087fa <__lshift+0xc6>
 800879a:	468a      	mov	sl, r1
 800879c:	f04f 0c00 	mov.w	ip, #0
 80087a0:	f1c9 0e20 	rsb	lr, r9, #32
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	fa02 f209 	lsl.w	r2, r2, r9
 80087aa:	ea42 020c 	orr.w	r2, r2, ip
 80087ae:	f84a 2b04 	str.w	r2, [sl], #4
 80087b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b6:	4298      	cmp	r0, r3
 80087b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80087bc:	d8f2      	bhi.n	80087a4 <__lshift+0x70>
 80087be:	1b03      	subs	r3, r0, r4
 80087c0:	3b15      	subs	r3, #21
 80087c2:	f023 0303 	bic.w	r3, r3, #3
 80087c6:	3304      	adds	r3, #4
 80087c8:	f104 0215 	add.w	r2, r4, #21
 80087cc:	4290      	cmp	r0, r2
 80087ce:	bf38      	it	cc
 80087d0:	2304      	movcc	r3, #4
 80087d2:	f841 c003 	str.w	ip, [r1, r3]
 80087d6:	f1bc 0f00 	cmp.w	ip, #0
 80087da:	d001      	beq.n	80087e0 <__lshift+0xac>
 80087dc:	f108 0602 	add.w	r6, r8, #2
 80087e0:	3e01      	subs	r6, #1
 80087e2:	4638      	mov	r0, r7
 80087e4:	4621      	mov	r1, r4
 80087e6:	612e      	str	r6, [r5, #16]
 80087e8:	f7ff fdd6 	bl	8008398 <_Bfree>
 80087ec:	4628      	mov	r0, r5
 80087ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80087f6:	3301      	adds	r3, #1
 80087f8:	e7c1      	b.n	800877e <__lshift+0x4a>
 80087fa:	3904      	subs	r1, #4
 80087fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008800:	4298      	cmp	r0, r3
 8008802:	f841 2f04 	str.w	r2, [r1, #4]!
 8008806:	d8f9      	bhi.n	80087fc <__lshift+0xc8>
 8008808:	e7ea      	b.n	80087e0 <__lshift+0xac>
 800880a:	bf00      	nop
 800880c:	0800a25f 	.word	0x0800a25f
 8008810:	0800a270 	.word	0x0800a270

08008814 <__mcmp>:
 8008814:	4603      	mov	r3, r0
 8008816:	690a      	ldr	r2, [r1, #16]
 8008818:	6900      	ldr	r0, [r0, #16]
 800881a:	b530      	push	{r4, r5, lr}
 800881c:	1a80      	subs	r0, r0, r2
 800881e:	d10d      	bne.n	800883c <__mcmp+0x28>
 8008820:	3314      	adds	r3, #20
 8008822:	3114      	adds	r1, #20
 8008824:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008828:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800882c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008830:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008834:	4295      	cmp	r5, r2
 8008836:	d002      	beq.n	800883e <__mcmp+0x2a>
 8008838:	d304      	bcc.n	8008844 <__mcmp+0x30>
 800883a:	2001      	movs	r0, #1
 800883c:	bd30      	pop	{r4, r5, pc}
 800883e:	42a3      	cmp	r3, r4
 8008840:	d3f4      	bcc.n	800882c <__mcmp+0x18>
 8008842:	e7fb      	b.n	800883c <__mcmp+0x28>
 8008844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008848:	e7f8      	b.n	800883c <__mcmp+0x28>
	...

0800884c <__mdiff>:
 800884c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	460d      	mov	r5, r1
 8008852:	4607      	mov	r7, r0
 8008854:	4611      	mov	r1, r2
 8008856:	4628      	mov	r0, r5
 8008858:	4614      	mov	r4, r2
 800885a:	f7ff ffdb 	bl	8008814 <__mcmp>
 800885e:	1e06      	subs	r6, r0, #0
 8008860:	d111      	bne.n	8008886 <__mdiff+0x3a>
 8008862:	4631      	mov	r1, r6
 8008864:	4638      	mov	r0, r7
 8008866:	f7ff fd57 	bl	8008318 <_Balloc>
 800886a:	4602      	mov	r2, r0
 800886c:	b928      	cbnz	r0, 800887a <__mdiff+0x2e>
 800886e:	f240 2132 	movw	r1, #562	; 0x232
 8008872:	4b3a      	ldr	r3, [pc, #232]	; (800895c <__mdiff+0x110>)
 8008874:	483a      	ldr	r0, [pc, #232]	; (8008960 <__mdiff+0x114>)
 8008876:	f000 fb2d 	bl	8008ed4 <__assert_func>
 800887a:	2301      	movs	r3, #1
 800887c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008880:	4610      	mov	r0, r2
 8008882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008886:	bfa4      	itt	ge
 8008888:	4623      	movge	r3, r4
 800888a:	462c      	movge	r4, r5
 800888c:	4638      	mov	r0, r7
 800888e:	6861      	ldr	r1, [r4, #4]
 8008890:	bfa6      	itte	ge
 8008892:	461d      	movge	r5, r3
 8008894:	2600      	movge	r6, #0
 8008896:	2601      	movlt	r6, #1
 8008898:	f7ff fd3e 	bl	8008318 <_Balloc>
 800889c:	4602      	mov	r2, r0
 800889e:	b918      	cbnz	r0, 80088a8 <__mdiff+0x5c>
 80088a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088a4:	4b2d      	ldr	r3, [pc, #180]	; (800895c <__mdiff+0x110>)
 80088a6:	e7e5      	b.n	8008874 <__mdiff+0x28>
 80088a8:	f102 0814 	add.w	r8, r2, #20
 80088ac:	46c2      	mov	sl, r8
 80088ae:	f04f 0c00 	mov.w	ip, #0
 80088b2:	6927      	ldr	r7, [r4, #16]
 80088b4:	60c6      	str	r6, [r0, #12]
 80088b6:	692e      	ldr	r6, [r5, #16]
 80088b8:	f104 0014 	add.w	r0, r4, #20
 80088bc:	f105 0914 	add.w	r9, r5, #20
 80088c0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80088c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088c8:	3410      	adds	r4, #16
 80088ca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80088ce:	f859 3b04 	ldr.w	r3, [r9], #4
 80088d2:	fa1f f18b 	uxth.w	r1, fp
 80088d6:	448c      	add	ip, r1
 80088d8:	b299      	uxth	r1, r3
 80088da:	0c1b      	lsrs	r3, r3, #16
 80088dc:	ebac 0101 	sub.w	r1, ip, r1
 80088e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088e4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80088e8:	b289      	uxth	r1, r1
 80088ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80088ee:	454e      	cmp	r6, r9
 80088f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80088f4:	f84a 3b04 	str.w	r3, [sl], #4
 80088f8:	d8e7      	bhi.n	80088ca <__mdiff+0x7e>
 80088fa:	1b73      	subs	r3, r6, r5
 80088fc:	3b15      	subs	r3, #21
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	3515      	adds	r5, #21
 8008904:	3304      	adds	r3, #4
 8008906:	42ae      	cmp	r6, r5
 8008908:	bf38      	it	cc
 800890a:	2304      	movcc	r3, #4
 800890c:	4418      	add	r0, r3
 800890e:	4443      	add	r3, r8
 8008910:	461e      	mov	r6, r3
 8008912:	4605      	mov	r5, r0
 8008914:	4575      	cmp	r5, lr
 8008916:	d30e      	bcc.n	8008936 <__mdiff+0xea>
 8008918:	f10e 0103 	add.w	r1, lr, #3
 800891c:	1a09      	subs	r1, r1, r0
 800891e:	f021 0103 	bic.w	r1, r1, #3
 8008922:	3803      	subs	r0, #3
 8008924:	4586      	cmp	lr, r0
 8008926:	bf38      	it	cc
 8008928:	2100      	movcc	r1, #0
 800892a:	4419      	add	r1, r3
 800892c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008930:	b18b      	cbz	r3, 8008956 <__mdiff+0x10a>
 8008932:	6117      	str	r7, [r2, #16]
 8008934:	e7a4      	b.n	8008880 <__mdiff+0x34>
 8008936:	f855 8b04 	ldr.w	r8, [r5], #4
 800893a:	fa1f f188 	uxth.w	r1, r8
 800893e:	4461      	add	r1, ip
 8008940:	140c      	asrs	r4, r1, #16
 8008942:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008946:	b289      	uxth	r1, r1
 8008948:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800894c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008950:	f846 1b04 	str.w	r1, [r6], #4
 8008954:	e7de      	b.n	8008914 <__mdiff+0xc8>
 8008956:	3f01      	subs	r7, #1
 8008958:	e7e8      	b.n	800892c <__mdiff+0xe0>
 800895a:	bf00      	nop
 800895c:	0800a25f 	.word	0x0800a25f
 8008960:	0800a270 	.word	0x0800a270

08008964 <__d2b>:
 8008964:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008968:	2101      	movs	r1, #1
 800896a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800896e:	4690      	mov	r8, r2
 8008970:	461d      	mov	r5, r3
 8008972:	f7ff fcd1 	bl	8008318 <_Balloc>
 8008976:	4604      	mov	r4, r0
 8008978:	b930      	cbnz	r0, 8008988 <__d2b+0x24>
 800897a:	4602      	mov	r2, r0
 800897c:	f240 310a 	movw	r1, #778	; 0x30a
 8008980:	4b24      	ldr	r3, [pc, #144]	; (8008a14 <__d2b+0xb0>)
 8008982:	4825      	ldr	r0, [pc, #148]	; (8008a18 <__d2b+0xb4>)
 8008984:	f000 faa6 	bl	8008ed4 <__assert_func>
 8008988:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800898c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008990:	bb2d      	cbnz	r5, 80089de <__d2b+0x7a>
 8008992:	9301      	str	r3, [sp, #4]
 8008994:	f1b8 0300 	subs.w	r3, r8, #0
 8008998:	d026      	beq.n	80089e8 <__d2b+0x84>
 800899a:	4668      	mov	r0, sp
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	f7ff fd83 	bl	80084a8 <__lo0bits>
 80089a2:	9900      	ldr	r1, [sp, #0]
 80089a4:	b1f0      	cbz	r0, 80089e4 <__d2b+0x80>
 80089a6:	9a01      	ldr	r2, [sp, #4]
 80089a8:	f1c0 0320 	rsb	r3, r0, #32
 80089ac:	fa02 f303 	lsl.w	r3, r2, r3
 80089b0:	430b      	orrs	r3, r1
 80089b2:	40c2      	lsrs	r2, r0
 80089b4:	6163      	str	r3, [r4, #20]
 80089b6:	9201      	str	r2, [sp, #4]
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	bf14      	ite	ne
 80089be:	2102      	movne	r1, #2
 80089c0:	2101      	moveq	r1, #1
 80089c2:	61a3      	str	r3, [r4, #24]
 80089c4:	6121      	str	r1, [r4, #16]
 80089c6:	b1c5      	cbz	r5, 80089fa <__d2b+0x96>
 80089c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089cc:	4405      	add	r5, r0
 80089ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089d2:	603d      	str	r5, [r7, #0]
 80089d4:	6030      	str	r0, [r6, #0]
 80089d6:	4620      	mov	r0, r4
 80089d8:	b002      	add	sp, #8
 80089da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089e2:	e7d6      	b.n	8008992 <__d2b+0x2e>
 80089e4:	6161      	str	r1, [r4, #20]
 80089e6:	e7e7      	b.n	80089b8 <__d2b+0x54>
 80089e8:	a801      	add	r0, sp, #4
 80089ea:	f7ff fd5d 	bl	80084a8 <__lo0bits>
 80089ee:	2101      	movs	r1, #1
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	6121      	str	r1, [r4, #16]
 80089f4:	6163      	str	r3, [r4, #20]
 80089f6:	3020      	adds	r0, #32
 80089f8:	e7e5      	b.n	80089c6 <__d2b+0x62>
 80089fa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80089fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a02:	6038      	str	r0, [r7, #0]
 8008a04:	6918      	ldr	r0, [r3, #16]
 8008a06:	f7ff fd2f 	bl	8008468 <__hi0bits>
 8008a0a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008a0e:	6031      	str	r1, [r6, #0]
 8008a10:	e7e1      	b.n	80089d6 <__d2b+0x72>
 8008a12:	bf00      	nop
 8008a14:	0800a25f 	.word	0x0800a25f
 8008a18:	0800a270 	.word	0x0800a270

08008a1c <_calloc_r>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	fba1 5402 	umull	r5, r4, r1, r2
 8008a22:	b934      	cbnz	r4, 8008a32 <_calloc_r+0x16>
 8008a24:	4629      	mov	r1, r5
 8008a26:	f000 f875 	bl	8008b14 <_malloc_r>
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	b928      	cbnz	r0, 8008a3a <_calloc_r+0x1e>
 8008a2e:	4630      	mov	r0, r6
 8008a30:	bd70      	pop	{r4, r5, r6, pc}
 8008a32:	220c      	movs	r2, #12
 8008a34:	2600      	movs	r6, #0
 8008a36:	6002      	str	r2, [r0, #0]
 8008a38:	e7f9      	b.n	8008a2e <_calloc_r+0x12>
 8008a3a:	462a      	mov	r2, r5
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	f7fe f93b 	bl	8006cb8 <memset>
 8008a42:	e7f4      	b.n	8008a2e <_calloc_r+0x12>

08008a44 <_free_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4605      	mov	r5, r0
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	d040      	beq.n	8008ace <_free_r+0x8a>
 8008a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a50:	1f0c      	subs	r4, r1, #4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bfb8      	it	lt
 8008a56:	18e4      	addlt	r4, r4, r3
 8008a58:	f000 fa98 	bl	8008f8c <__malloc_lock>
 8008a5c:	4a1c      	ldr	r2, [pc, #112]	; (8008ad0 <_free_r+0x8c>)
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	b933      	cbnz	r3, 8008a70 <_free_r+0x2c>
 8008a62:	6063      	str	r3, [r4, #4]
 8008a64:	6014      	str	r4, [r2, #0]
 8008a66:	4628      	mov	r0, r5
 8008a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a6c:	f000 ba94 	b.w	8008f98 <__malloc_unlock>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d908      	bls.n	8008a86 <_free_r+0x42>
 8008a74:	6820      	ldr	r0, [r4, #0]
 8008a76:	1821      	adds	r1, r4, r0
 8008a78:	428b      	cmp	r3, r1
 8008a7a:	bf01      	itttt	eq
 8008a7c:	6819      	ldreq	r1, [r3, #0]
 8008a7e:	685b      	ldreq	r3, [r3, #4]
 8008a80:	1809      	addeq	r1, r1, r0
 8008a82:	6021      	streq	r1, [r4, #0]
 8008a84:	e7ed      	b.n	8008a62 <_free_r+0x1e>
 8008a86:	461a      	mov	r2, r3
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	b10b      	cbz	r3, 8008a90 <_free_r+0x4c>
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	d9fa      	bls.n	8008a86 <_free_r+0x42>
 8008a90:	6811      	ldr	r1, [r2, #0]
 8008a92:	1850      	adds	r0, r2, r1
 8008a94:	42a0      	cmp	r0, r4
 8008a96:	d10b      	bne.n	8008ab0 <_free_r+0x6c>
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	4401      	add	r1, r0
 8008a9c:	1850      	adds	r0, r2, r1
 8008a9e:	4283      	cmp	r3, r0
 8008aa0:	6011      	str	r1, [r2, #0]
 8008aa2:	d1e0      	bne.n	8008a66 <_free_r+0x22>
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	4401      	add	r1, r0
 8008aaa:	6011      	str	r1, [r2, #0]
 8008aac:	6053      	str	r3, [r2, #4]
 8008aae:	e7da      	b.n	8008a66 <_free_r+0x22>
 8008ab0:	d902      	bls.n	8008ab8 <_free_r+0x74>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	602b      	str	r3, [r5, #0]
 8008ab6:	e7d6      	b.n	8008a66 <_free_r+0x22>
 8008ab8:	6820      	ldr	r0, [r4, #0]
 8008aba:	1821      	adds	r1, r4, r0
 8008abc:	428b      	cmp	r3, r1
 8008abe:	bf01      	itttt	eq
 8008ac0:	6819      	ldreq	r1, [r3, #0]
 8008ac2:	685b      	ldreq	r3, [r3, #4]
 8008ac4:	1809      	addeq	r1, r1, r0
 8008ac6:	6021      	streq	r1, [r4, #0]
 8008ac8:	6063      	str	r3, [r4, #4]
 8008aca:	6054      	str	r4, [r2, #4]
 8008acc:	e7cb      	b.n	8008a66 <_free_r+0x22>
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	200003b8 	.word	0x200003b8

08008ad4 <sbrk_aligned>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	4e0e      	ldr	r6, [pc, #56]	; (8008b10 <sbrk_aligned+0x3c>)
 8008ad8:	460c      	mov	r4, r1
 8008ada:	6831      	ldr	r1, [r6, #0]
 8008adc:	4605      	mov	r5, r0
 8008ade:	b911      	cbnz	r1, 8008ae6 <sbrk_aligned+0x12>
 8008ae0:	f000 f9e8 	bl	8008eb4 <_sbrk_r>
 8008ae4:	6030      	str	r0, [r6, #0]
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 f9e3 	bl	8008eb4 <_sbrk_r>
 8008aee:	1c43      	adds	r3, r0, #1
 8008af0:	d00a      	beq.n	8008b08 <sbrk_aligned+0x34>
 8008af2:	1cc4      	adds	r4, r0, #3
 8008af4:	f024 0403 	bic.w	r4, r4, #3
 8008af8:	42a0      	cmp	r0, r4
 8008afa:	d007      	beq.n	8008b0c <sbrk_aligned+0x38>
 8008afc:	1a21      	subs	r1, r4, r0
 8008afe:	4628      	mov	r0, r5
 8008b00:	f000 f9d8 	bl	8008eb4 <_sbrk_r>
 8008b04:	3001      	adds	r0, #1
 8008b06:	d101      	bne.n	8008b0c <sbrk_aligned+0x38>
 8008b08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	200003bc 	.word	0x200003bc

08008b14 <_malloc_r>:
 8008b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b18:	1ccd      	adds	r5, r1, #3
 8008b1a:	f025 0503 	bic.w	r5, r5, #3
 8008b1e:	3508      	adds	r5, #8
 8008b20:	2d0c      	cmp	r5, #12
 8008b22:	bf38      	it	cc
 8008b24:	250c      	movcc	r5, #12
 8008b26:	2d00      	cmp	r5, #0
 8008b28:	4607      	mov	r7, r0
 8008b2a:	db01      	blt.n	8008b30 <_malloc_r+0x1c>
 8008b2c:	42a9      	cmp	r1, r5
 8008b2e:	d905      	bls.n	8008b3c <_malloc_r+0x28>
 8008b30:	230c      	movs	r3, #12
 8008b32:	2600      	movs	r6, #0
 8008b34:	603b      	str	r3, [r7, #0]
 8008b36:	4630      	mov	r0, r6
 8008b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3c:	4e2e      	ldr	r6, [pc, #184]	; (8008bf8 <_malloc_r+0xe4>)
 8008b3e:	f000 fa25 	bl	8008f8c <__malloc_lock>
 8008b42:	6833      	ldr	r3, [r6, #0]
 8008b44:	461c      	mov	r4, r3
 8008b46:	bb34      	cbnz	r4, 8008b96 <_malloc_r+0x82>
 8008b48:	4629      	mov	r1, r5
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	f7ff ffc2 	bl	8008ad4 <sbrk_aligned>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	4604      	mov	r4, r0
 8008b54:	d14d      	bne.n	8008bf2 <_malloc_r+0xde>
 8008b56:	6834      	ldr	r4, [r6, #0]
 8008b58:	4626      	mov	r6, r4
 8008b5a:	2e00      	cmp	r6, #0
 8008b5c:	d140      	bne.n	8008be0 <_malloc_r+0xcc>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	4631      	mov	r1, r6
 8008b62:	4638      	mov	r0, r7
 8008b64:	eb04 0803 	add.w	r8, r4, r3
 8008b68:	f000 f9a4 	bl	8008eb4 <_sbrk_r>
 8008b6c:	4580      	cmp	r8, r0
 8008b6e:	d13a      	bne.n	8008be6 <_malloc_r+0xd2>
 8008b70:	6821      	ldr	r1, [r4, #0]
 8008b72:	3503      	adds	r5, #3
 8008b74:	1a6d      	subs	r5, r5, r1
 8008b76:	f025 0503 	bic.w	r5, r5, #3
 8008b7a:	3508      	adds	r5, #8
 8008b7c:	2d0c      	cmp	r5, #12
 8008b7e:	bf38      	it	cc
 8008b80:	250c      	movcc	r5, #12
 8008b82:	4638      	mov	r0, r7
 8008b84:	4629      	mov	r1, r5
 8008b86:	f7ff ffa5 	bl	8008ad4 <sbrk_aligned>
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	d02b      	beq.n	8008be6 <_malloc_r+0xd2>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	442b      	add	r3, r5
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	e00e      	b.n	8008bb4 <_malloc_r+0xa0>
 8008b96:	6822      	ldr	r2, [r4, #0]
 8008b98:	1b52      	subs	r2, r2, r5
 8008b9a:	d41e      	bmi.n	8008bda <_malloc_r+0xc6>
 8008b9c:	2a0b      	cmp	r2, #11
 8008b9e:	d916      	bls.n	8008bce <_malloc_r+0xba>
 8008ba0:	1961      	adds	r1, r4, r5
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	6025      	str	r5, [r4, #0]
 8008ba6:	bf18      	it	ne
 8008ba8:	6059      	strne	r1, [r3, #4]
 8008baa:	6863      	ldr	r3, [r4, #4]
 8008bac:	bf08      	it	eq
 8008bae:	6031      	streq	r1, [r6, #0]
 8008bb0:	5162      	str	r2, [r4, r5]
 8008bb2:	604b      	str	r3, [r1, #4]
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f104 060b 	add.w	r6, r4, #11
 8008bba:	f000 f9ed 	bl	8008f98 <__malloc_unlock>
 8008bbe:	f026 0607 	bic.w	r6, r6, #7
 8008bc2:	1d23      	adds	r3, r4, #4
 8008bc4:	1af2      	subs	r2, r6, r3
 8008bc6:	d0b6      	beq.n	8008b36 <_malloc_r+0x22>
 8008bc8:	1b9b      	subs	r3, r3, r6
 8008bca:	50a3      	str	r3, [r4, r2]
 8008bcc:	e7b3      	b.n	8008b36 <_malloc_r+0x22>
 8008bce:	6862      	ldr	r2, [r4, #4]
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	bf0c      	ite	eq
 8008bd4:	6032      	streq	r2, [r6, #0]
 8008bd6:	605a      	strne	r2, [r3, #4]
 8008bd8:	e7ec      	b.n	8008bb4 <_malloc_r+0xa0>
 8008bda:	4623      	mov	r3, r4
 8008bdc:	6864      	ldr	r4, [r4, #4]
 8008bde:	e7b2      	b.n	8008b46 <_malloc_r+0x32>
 8008be0:	4634      	mov	r4, r6
 8008be2:	6876      	ldr	r6, [r6, #4]
 8008be4:	e7b9      	b.n	8008b5a <_malloc_r+0x46>
 8008be6:	230c      	movs	r3, #12
 8008be8:	4638      	mov	r0, r7
 8008bea:	603b      	str	r3, [r7, #0]
 8008bec:	f000 f9d4 	bl	8008f98 <__malloc_unlock>
 8008bf0:	e7a1      	b.n	8008b36 <_malloc_r+0x22>
 8008bf2:	6025      	str	r5, [r4, #0]
 8008bf4:	e7de      	b.n	8008bb4 <_malloc_r+0xa0>
 8008bf6:	bf00      	nop
 8008bf8:	200003b8 	.word	0x200003b8

08008bfc <__ssputs_r>:
 8008bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c00:	688e      	ldr	r6, [r1, #8]
 8008c02:	4682      	mov	sl, r0
 8008c04:	429e      	cmp	r6, r3
 8008c06:	460c      	mov	r4, r1
 8008c08:	4690      	mov	r8, r2
 8008c0a:	461f      	mov	r7, r3
 8008c0c:	d838      	bhi.n	8008c80 <__ssputs_r+0x84>
 8008c0e:	898a      	ldrh	r2, [r1, #12]
 8008c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c14:	d032      	beq.n	8008c7c <__ssputs_r+0x80>
 8008c16:	6825      	ldr	r5, [r4, #0]
 8008c18:	6909      	ldr	r1, [r1, #16]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	eba5 0901 	sub.w	r9, r5, r1
 8008c20:	6965      	ldr	r5, [r4, #20]
 8008c22:	444b      	add	r3, r9
 8008c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c2c:	106d      	asrs	r5, r5, #1
 8008c2e:	429d      	cmp	r5, r3
 8008c30:	bf38      	it	cc
 8008c32:	461d      	movcc	r5, r3
 8008c34:	0553      	lsls	r3, r2, #21
 8008c36:	d531      	bpl.n	8008c9c <__ssputs_r+0xa0>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	f7ff ff6b 	bl	8008b14 <_malloc_r>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	b950      	cbnz	r0, 8008c58 <__ssputs_r+0x5c>
 8008c42:	230c      	movs	r3, #12
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c48:	f8ca 3000 	str.w	r3, [sl]
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c58:	464a      	mov	r2, r9
 8008c5a:	6921      	ldr	r1, [r4, #16]
 8008c5c:	f7fe f81e 	bl	8006c9c <memcpy>
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6a:	81a3      	strh	r3, [r4, #12]
 8008c6c:	6126      	str	r6, [r4, #16]
 8008c6e:	444e      	add	r6, r9
 8008c70:	6026      	str	r6, [r4, #0]
 8008c72:	463e      	mov	r6, r7
 8008c74:	6165      	str	r5, [r4, #20]
 8008c76:	eba5 0509 	sub.w	r5, r5, r9
 8008c7a:	60a5      	str	r5, [r4, #8]
 8008c7c:	42be      	cmp	r6, r7
 8008c7e:	d900      	bls.n	8008c82 <__ssputs_r+0x86>
 8008c80:	463e      	mov	r6, r7
 8008c82:	4632      	mov	r2, r6
 8008c84:	4641      	mov	r1, r8
 8008c86:	6820      	ldr	r0, [r4, #0]
 8008c88:	f000 f966 	bl	8008f58 <memmove>
 8008c8c:	68a3      	ldr	r3, [r4, #8]
 8008c8e:	2000      	movs	r0, #0
 8008c90:	1b9b      	subs	r3, r3, r6
 8008c92:	60a3      	str	r3, [r4, #8]
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	4433      	add	r3, r6
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	e7db      	b.n	8008c54 <__ssputs_r+0x58>
 8008c9c:	462a      	mov	r2, r5
 8008c9e:	f000 f981 	bl	8008fa4 <_realloc_r>
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d1e1      	bne.n	8008c6c <__ssputs_r+0x70>
 8008ca8:	4650      	mov	r0, sl
 8008caa:	6921      	ldr	r1, [r4, #16]
 8008cac:	f7ff feca 	bl	8008a44 <_free_r>
 8008cb0:	e7c7      	b.n	8008c42 <__ssputs_r+0x46>
	...

08008cb4 <_svfiprintf_r>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	4698      	mov	r8, r3
 8008cba:	898b      	ldrh	r3, [r1, #12]
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	061b      	lsls	r3, r3, #24
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	b09d      	sub	sp, #116	; 0x74
 8008cc6:	d50e      	bpl.n	8008ce6 <_svfiprintf_r+0x32>
 8008cc8:	690b      	ldr	r3, [r1, #16]
 8008cca:	b963      	cbnz	r3, 8008ce6 <_svfiprintf_r+0x32>
 8008ccc:	2140      	movs	r1, #64	; 0x40
 8008cce:	f7ff ff21 	bl	8008b14 <_malloc_r>
 8008cd2:	6028      	str	r0, [r5, #0]
 8008cd4:	6128      	str	r0, [r5, #16]
 8008cd6:	b920      	cbnz	r0, 8008ce2 <_svfiprintf_r+0x2e>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ce0:	e0d1      	b.n	8008e86 <_svfiprintf_r+0x1d2>
 8008ce2:	2340      	movs	r3, #64	; 0x40
 8008ce4:	616b      	str	r3, [r5, #20]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cea:	2320      	movs	r3, #32
 8008cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cf0:	2330      	movs	r3, #48	; 0x30
 8008cf2:	f04f 0901 	mov.w	r9, #1
 8008cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ea0 <_svfiprintf_r+0x1ec>
 8008cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d02:	4623      	mov	r3, r4
 8008d04:	469a      	mov	sl, r3
 8008d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0a:	b10a      	cbz	r2, 8008d10 <_svfiprintf_r+0x5c>
 8008d0c:	2a25      	cmp	r2, #37	; 0x25
 8008d0e:	d1f9      	bne.n	8008d04 <_svfiprintf_r+0x50>
 8008d10:	ebba 0b04 	subs.w	fp, sl, r4
 8008d14:	d00b      	beq.n	8008d2e <_svfiprintf_r+0x7a>
 8008d16:	465b      	mov	r3, fp
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff ff6d 	bl	8008bfc <__ssputs_r>
 8008d22:	3001      	adds	r0, #1
 8008d24:	f000 80aa 	beq.w	8008e7c <_svfiprintf_r+0x1c8>
 8008d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d2a:	445a      	add	r2, fp
 8008d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80a2 	beq.w	8008e7c <_svfiprintf_r+0x1c8>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d42:	f10a 0a01 	add.w	sl, sl, #1
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d50:	4654      	mov	r4, sl
 8008d52:	2205      	movs	r2, #5
 8008d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d58:	4851      	ldr	r0, [pc, #324]	; (8008ea0 <_svfiprintf_r+0x1ec>)
 8008d5a:	f7ff facf 	bl	80082fc <memchr>
 8008d5e:	9a04      	ldr	r2, [sp, #16]
 8008d60:	b9d8      	cbnz	r0, 8008d9a <_svfiprintf_r+0xe6>
 8008d62:	06d0      	lsls	r0, r2, #27
 8008d64:	bf44      	itt	mi
 8008d66:	2320      	movmi	r3, #32
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d6c:	0711      	lsls	r1, r2, #28
 8008d6e:	bf44      	itt	mi
 8008d70:	232b      	movmi	r3, #43	; 0x2b
 8008d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d76:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d7c:	d015      	beq.n	8008daa <_svfiprintf_r+0xf6>
 8008d7e:	4654      	mov	r4, sl
 8008d80:	2000      	movs	r0, #0
 8008d82:	f04f 0c0a 	mov.w	ip, #10
 8008d86:	9a07      	ldr	r2, [sp, #28]
 8008d88:	4621      	mov	r1, r4
 8008d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8e:	3b30      	subs	r3, #48	; 0x30
 8008d90:	2b09      	cmp	r3, #9
 8008d92:	d94e      	bls.n	8008e32 <_svfiprintf_r+0x17e>
 8008d94:	b1b0      	cbz	r0, 8008dc4 <_svfiprintf_r+0x110>
 8008d96:	9207      	str	r2, [sp, #28]
 8008d98:	e014      	b.n	8008dc4 <_svfiprintf_r+0x110>
 8008d9a:	eba0 0308 	sub.w	r3, r0, r8
 8008d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	46a2      	mov	sl, r4
 8008da6:	9304      	str	r3, [sp, #16]
 8008da8:	e7d2      	b.n	8008d50 <_svfiprintf_r+0x9c>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	1d19      	adds	r1, r3, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	9103      	str	r1, [sp, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bfbb      	ittet	lt
 8008db6:	425b      	neglt	r3, r3
 8008db8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dbc:	9307      	strge	r3, [sp, #28]
 8008dbe:	9307      	strlt	r3, [sp, #28]
 8008dc0:	bfb8      	it	lt
 8008dc2:	9204      	strlt	r2, [sp, #16]
 8008dc4:	7823      	ldrb	r3, [r4, #0]
 8008dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc8:	d10c      	bne.n	8008de4 <_svfiprintf_r+0x130>
 8008dca:	7863      	ldrb	r3, [r4, #1]
 8008dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dce:	d135      	bne.n	8008e3c <_svfiprintf_r+0x188>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	3402      	adds	r4, #2
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	9203      	str	r2, [sp, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfb8      	it	lt
 8008dde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008ea4 <_svfiprintf_r+0x1f0>
 8008de8:	2203      	movs	r2, #3
 8008dea:	4650      	mov	r0, sl
 8008dec:	7821      	ldrb	r1, [r4, #0]
 8008dee:	f7ff fa85 	bl	80082fc <memchr>
 8008df2:	b140      	cbz	r0, 8008e06 <_svfiprintf_r+0x152>
 8008df4:	2340      	movs	r3, #64	; 0x40
 8008df6:	eba0 000a 	sub.w	r0, r0, sl
 8008dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8008dfe:	9b04      	ldr	r3, [sp, #16]
 8008e00:	3401      	adds	r4, #1
 8008e02:	4303      	orrs	r3, r0
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0a:	2206      	movs	r2, #6
 8008e0c:	4826      	ldr	r0, [pc, #152]	; (8008ea8 <_svfiprintf_r+0x1f4>)
 8008e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e12:	f7ff fa73 	bl	80082fc <memchr>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d038      	beq.n	8008e8c <_svfiprintf_r+0x1d8>
 8008e1a:	4b24      	ldr	r3, [pc, #144]	; (8008eac <_svfiprintf_r+0x1f8>)
 8008e1c:	bb1b      	cbnz	r3, 8008e66 <_svfiprintf_r+0x1b2>
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	3307      	adds	r3, #7
 8008e22:	f023 0307 	bic.w	r3, r3, #7
 8008e26:	3308      	adds	r3, #8
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2c:	4433      	add	r3, r6
 8008e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e30:	e767      	b.n	8008d02 <_svfiprintf_r+0x4e>
 8008e32:	460c      	mov	r4, r1
 8008e34:	2001      	movs	r0, #1
 8008e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e3a:	e7a5      	b.n	8008d88 <_svfiprintf_r+0xd4>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f04f 0c0a 	mov.w	ip, #10
 8008e42:	4619      	mov	r1, r3
 8008e44:	3401      	adds	r4, #1
 8008e46:	9305      	str	r3, [sp, #20]
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4e:	3a30      	subs	r2, #48	; 0x30
 8008e50:	2a09      	cmp	r2, #9
 8008e52:	d903      	bls.n	8008e5c <_svfiprintf_r+0x1a8>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0c5      	beq.n	8008de4 <_svfiprintf_r+0x130>
 8008e58:	9105      	str	r1, [sp, #20]
 8008e5a:	e7c3      	b.n	8008de4 <_svfiprintf_r+0x130>
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	2301      	movs	r3, #1
 8008e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e64:	e7f0      	b.n	8008e48 <_svfiprintf_r+0x194>
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <_svfiprintf_r+0x1fc>)
 8008e70:	a904      	add	r1, sp, #16
 8008e72:	f7fd ffc7 	bl	8006e04 <_printf_float>
 8008e76:	1c42      	adds	r2, r0, #1
 8008e78:	4606      	mov	r6, r0
 8008e7a:	d1d6      	bne.n	8008e2a <_svfiprintf_r+0x176>
 8008e7c:	89ab      	ldrh	r3, [r5, #12]
 8008e7e:	065b      	lsls	r3, r3, #25
 8008e80:	f53f af2c 	bmi.w	8008cdc <_svfiprintf_r+0x28>
 8008e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e86:	b01d      	add	sp, #116	; 0x74
 8008e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8c:	ab03      	add	r3, sp, #12
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	462a      	mov	r2, r5
 8008e92:	4638      	mov	r0, r7
 8008e94:	4b06      	ldr	r3, [pc, #24]	; (8008eb0 <_svfiprintf_r+0x1fc>)
 8008e96:	a904      	add	r1, sp, #16
 8008e98:	f7fe fa50 	bl	800733c <_printf_i>
 8008e9c:	e7eb      	b.n	8008e76 <_svfiprintf_r+0x1c2>
 8008e9e:	bf00      	nop
 8008ea0:	0800a3cc 	.word	0x0800a3cc
 8008ea4:	0800a3d2 	.word	0x0800a3d2
 8008ea8:	0800a3d6 	.word	0x0800a3d6
 8008eac:	08006e05 	.word	0x08006e05
 8008eb0:	08008bfd 	.word	0x08008bfd

08008eb4 <_sbrk_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	4d05      	ldr	r5, [pc, #20]	; (8008ed0 <_sbrk_r+0x1c>)
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	f7f9 fe9c 	bl	8002bfc <_sbrk>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_sbrk_r+0x1a>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_sbrk_r+0x1a>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	200003c0 	.word	0x200003c0

08008ed4 <__assert_func>:
 8008ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ed6:	4614      	mov	r4, r2
 8008ed8:	461a      	mov	r2, r3
 8008eda:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <__assert_func+0x2c>)
 8008edc:	4605      	mov	r5, r0
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68d8      	ldr	r0, [r3, #12]
 8008ee2:	b14c      	cbz	r4, 8008ef8 <__assert_func+0x24>
 8008ee4:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <__assert_func+0x30>)
 8008ee6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008eea:	9100      	str	r1, [sp, #0]
 8008eec:	462b      	mov	r3, r5
 8008eee:	4906      	ldr	r1, [pc, #24]	; (8008f08 <__assert_func+0x34>)
 8008ef0:	f000 f80e 	bl	8008f10 <fiprintf>
 8008ef4:	f000 faaa 	bl	800944c <abort>
 8008ef8:	4b04      	ldr	r3, [pc, #16]	; (8008f0c <__assert_func+0x38>)
 8008efa:	461c      	mov	r4, r3
 8008efc:	e7f3      	b.n	8008ee6 <__assert_func+0x12>
 8008efe:	bf00      	nop
 8008f00:	20000010 	.word	0x20000010
 8008f04:	0800a3dd 	.word	0x0800a3dd
 8008f08:	0800a3ea 	.word	0x0800a3ea
 8008f0c:	0800a418 	.word	0x0800a418

08008f10 <fiprintf>:
 8008f10:	b40e      	push	{r1, r2, r3}
 8008f12:	b503      	push	{r0, r1, lr}
 8008f14:	4601      	mov	r1, r0
 8008f16:	ab03      	add	r3, sp, #12
 8008f18:	4805      	ldr	r0, [pc, #20]	; (8008f30 <fiprintf+0x20>)
 8008f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f1e:	6800      	ldr	r0, [r0, #0]
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	f000 f895 	bl	8009050 <_vfiprintf_r>
 8008f26:	b002      	add	sp, #8
 8008f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f2c:	b003      	add	sp, #12
 8008f2e:	4770      	bx	lr
 8008f30:	20000010 	.word	0x20000010

08008f34 <__ascii_mbtowc>:
 8008f34:	b082      	sub	sp, #8
 8008f36:	b901      	cbnz	r1, 8008f3a <__ascii_mbtowc+0x6>
 8008f38:	a901      	add	r1, sp, #4
 8008f3a:	b142      	cbz	r2, 8008f4e <__ascii_mbtowc+0x1a>
 8008f3c:	b14b      	cbz	r3, 8008f52 <__ascii_mbtowc+0x1e>
 8008f3e:	7813      	ldrb	r3, [r2, #0]
 8008f40:	600b      	str	r3, [r1, #0]
 8008f42:	7812      	ldrb	r2, [r2, #0]
 8008f44:	1e10      	subs	r0, r2, #0
 8008f46:	bf18      	it	ne
 8008f48:	2001      	movne	r0, #1
 8008f4a:	b002      	add	sp, #8
 8008f4c:	4770      	bx	lr
 8008f4e:	4610      	mov	r0, r2
 8008f50:	e7fb      	b.n	8008f4a <__ascii_mbtowc+0x16>
 8008f52:	f06f 0001 	mvn.w	r0, #1
 8008f56:	e7f8      	b.n	8008f4a <__ascii_mbtowc+0x16>

08008f58 <memmove>:
 8008f58:	4288      	cmp	r0, r1
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	eb01 0402 	add.w	r4, r1, r2
 8008f60:	d902      	bls.n	8008f68 <memmove+0x10>
 8008f62:	4284      	cmp	r4, r0
 8008f64:	4623      	mov	r3, r4
 8008f66:	d807      	bhi.n	8008f78 <memmove+0x20>
 8008f68:	1e43      	subs	r3, r0, #1
 8008f6a:	42a1      	cmp	r1, r4
 8008f6c:	d008      	beq.n	8008f80 <memmove+0x28>
 8008f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f76:	e7f8      	b.n	8008f6a <memmove+0x12>
 8008f78:	4601      	mov	r1, r0
 8008f7a:	4402      	add	r2, r0
 8008f7c:	428a      	cmp	r2, r1
 8008f7e:	d100      	bne.n	8008f82 <memmove+0x2a>
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f8a:	e7f7      	b.n	8008f7c <memmove+0x24>

08008f8c <__malloc_lock>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__malloc_lock+0x8>)
 8008f8e:	f000 bc19 	b.w	80097c4 <__retarget_lock_acquire_recursive>
 8008f92:	bf00      	nop
 8008f94:	200003c4 	.word	0x200003c4

08008f98 <__malloc_unlock>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__malloc_unlock+0x8>)
 8008f9a:	f000 bc14 	b.w	80097c6 <__retarget_lock_release_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	200003c4 	.word	0x200003c4

08008fa4 <_realloc_r>:
 8008fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa8:	4680      	mov	r8, r0
 8008faa:	4614      	mov	r4, r2
 8008fac:	460e      	mov	r6, r1
 8008fae:	b921      	cbnz	r1, 8008fba <_realloc_r+0x16>
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb6:	f7ff bdad 	b.w	8008b14 <_malloc_r>
 8008fba:	b92a      	cbnz	r2, 8008fc8 <_realloc_r+0x24>
 8008fbc:	f7ff fd42 	bl	8008a44 <_free_r>
 8008fc0:	4625      	mov	r5, r4
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc8:	f000 fc64 	bl	8009894 <_malloc_usable_size_r>
 8008fcc:	4284      	cmp	r4, r0
 8008fce:	4607      	mov	r7, r0
 8008fd0:	d802      	bhi.n	8008fd8 <_realloc_r+0x34>
 8008fd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fd6:	d812      	bhi.n	8008ffe <_realloc_r+0x5a>
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7ff fd9a 	bl	8008b14 <_malloc_r>
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d0ed      	beq.n	8008fc2 <_realloc_r+0x1e>
 8008fe6:	42bc      	cmp	r4, r7
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4631      	mov	r1, r6
 8008fec:	bf28      	it	cs
 8008fee:	463a      	movcs	r2, r7
 8008ff0:	f7fd fe54 	bl	8006c9c <memcpy>
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	f7ff fd24 	bl	8008a44 <_free_r>
 8008ffc:	e7e1      	b.n	8008fc2 <_realloc_r+0x1e>
 8008ffe:	4635      	mov	r5, r6
 8009000:	e7df      	b.n	8008fc2 <_realloc_r+0x1e>

08009002 <__sfputc_r>:
 8009002:	6893      	ldr	r3, [r2, #8]
 8009004:	b410      	push	{r4}
 8009006:	3b01      	subs	r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	6093      	str	r3, [r2, #8]
 800900c:	da07      	bge.n	800901e <__sfputc_r+0x1c>
 800900e:	6994      	ldr	r4, [r2, #24]
 8009010:	42a3      	cmp	r3, r4
 8009012:	db01      	blt.n	8009018 <__sfputc_r+0x16>
 8009014:	290a      	cmp	r1, #10
 8009016:	d102      	bne.n	800901e <__sfputc_r+0x1c>
 8009018:	bc10      	pop	{r4}
 800901a:	f000 b949 	b.w	80092b0 <__swbuf_r>
 800901e:	6813      	ldr	r3, [r2, #0]
 8009020:	1c58      	adds	r0, r3, #1
 8009022:	6010      	str	r0, [r2, #0]
 8009024:	7019      	strb	r1, [r3, #0]
 8009026:	4608      	mov	r0, r1
 8009028:	bc10      	pop	{r4}
 800902a:	4770      	bx	lr

0800902c <__sfputs_r>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	4606      	mov	r6, r0
 8009030:	460f      	mov	r7, r1
 8009032:	4614      	mov	r4, r2
 8009034:	18d5      	adds	r5, r2, r3
 8009036:	42ac      	cmp	r4, r5
 8009038:	d101      	bne.n	800903e <__sfputs_r+0x12>
 800903a:	2000      	movs	r0, #0
 800903c:	e007      	b.n	800904e <__sfputs_r+0x22>
 800903e:	463a      	mov	r2, r7
 8009040:	4630      	mov	r0, r6
 8009042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009046:	f7ff ffdc 	bl	8009002 <__sfputc_r>
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	d1f3      	bne.n	8009036 <__sfputs_r+0xa>
 800904e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009050 <_vfiprintf_r>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	460d      	mov	r5, r1
 8009056:	4614      	mov	r4, r2
 8009058:	4698      	mov	r8, r3
 800905a:	4606      	mov	r6, r0
 800905c:	b09d      	sub	sp, #116	; 0x74
 800905e:	b118      	cbz	r0, 8009068 <_vfiprintf_r+0x18>
 8009060:	6983      	ldr	r3, [r0, #24]
 8009062:	b90b      	cbnz	r3, 8009068 <_vfiprintf_r+0x18>
 8009064:	f000 fb10 	bl	8009688 <__sinit>
 8009068:	4b89      	ldr	r3, [pc, #548]	; (8009290 <_vfiprintf_r+0x240>)
 800906a:	429d      	cmp	r5, r3
 800906c:	d11b      	bne.n	80090a6 <_vfiprintf_r+0x56>
 800906e:	6875      	ldr	r5, [r6, #4]
 8009070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009072:	07d9      	lsls	r1, r3, #31
 8009074:	d405      	bmi.n	8009082 <_vfiprintf_r+0x32>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	059a      	lsls	r2, r3, #22
 800907a:	d402      	bmi.n	8009082 <_vfiprintf_r+0x32>
 800907c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800907e:	f000 fba1 	bl	80097c4 <__retarget_lock_acquire_recursive>
 8009082:	89ab      	ldrh	r3, [r5, #12]
 8009084:	071b      	lsls	r3, r3, #28
 8009086:	d501      	bpl.n	800908c <_vfiprintf_r+0x3c>
 8009088:	692b      	ldr	r3, [r5, #16]
 800908a:	b9eb      	cbnz	r3, 80090c8 <_vfiprintf_r+0x78>
 800908c:	4629      	mov	r1, r5
 800908e:	4630      	mov	r0, r6
 8009090:	f000 f96e 	bl	8009370 <__swsetup_r>
 8009094:	b1c0      	cbz	r0, 80090c8 <_vfiprintf_r+0x78>
 8009096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009098:	07dc      	lsls	r4, r3, #31
 800909a:	d50e      	bpl.n	80090ba <_vfiprintf_r+0x6a>
 800909c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a0:	b01d      	add	sp, #116	; 0x74
 80090a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a6:	4b7b      	ldr	r3, [pc, #492]	; (8009294 <_vfiprintf_r+0x244>)
 80090a8:	429d      	cmp	r5, r3
 80090aa:	d101      	bne.n	80090b0 <_vfiprintf_r+0x60>
 80090ac:	68b5      	ldr	r5, [r6, #8]
 80090ae:	e7df      	b.n	8009070 <_vfiprintf_r+0x20>
 80090b0:	4b79      	ldr	r3, [pc, #484]	; (8009298 <_vfiprintf_r+0x248>)
 80090b2:	429d      	cmp	r5, r3
 80090b4:	bf08      	it	eq
 80090b6:	68f5      	ldreq	r5, [r6, #12]
 80090b8:	e7da      	b.n	8009070 <_vfiprintf_r+0x20>
 80090ba:	89ab      	ldrh	r3, [r5, #12]
 80090bc:	0598      	lsls	r0, r3, #22
 80090be:	d4ed      	bmi.n	800909c <_vfiprintf_r+0x4c>
 80090c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090c2:	f000 fb80 	bl	80097c6 <__retarget_lock_release_recursive>
 80090c6:	e7e9      	b.n	800909c <_vfiprintf_r+0x4c>
 80090c8:	2300      	movs	r3, #0
 80090ca:	9309      	str	r3, [sp, #36]	; 0x24
 80090cc:	2320      	movs	r3, #32
 80090ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090d2:	2330      	movs	r3, #48	; 0x30
 80090d4:	f04f 0901 	mov.w	r9, #1
 80090d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80090dc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800929c <_vfiprintf_r+0x24c>
 80090e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090e4:	4623      	mov	r3, r4
 80090e6:	469a      	mov	sl, r3
 80090e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ec:	b10a      	cbz	r2, 80090f2 <_vfiprintf_r+0xa2>
 80090ee:	2a25      	cmp	r2, #37	; 0x25
 80090f0:	d1f9      	bne.n	80090e6 <_vfiprintf_r+0x96>
 80090f2:	ebba 0b04 	subs.w	fp, sl, r4
 80090f6:	d00b      	beq.n	8009110 <_vfiprintf_r+0xc0>
 80090f8:	465b      	mov	r3, fp
 80090fa:	4622      	mov	r2, r4
 80090fc:	4629      	mov	r1, r5
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff ff94 	bl	800902c <__sfputs_r>
 8009104:	3001      	adds	r0, #1
 8009106:	f000 80aa 	beq.w	800925e <_vfiprintf_r+0x20e>
 800910a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800910c:	445a      	add	r2, fp
 800910e:	9209      	str	r2, [sp, #36]	; 0x24
 8009110:	f89a 3000 	ldrb.w	r3, [sl]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 80a2 	beq.w	800925e <_vfiprintf_r+0x20e>
 800911a:	2300      	movs	r3, #0
 800911c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009124:	f10a 0a01 	add.w	sl, sl, #1
 8009128:	9304      	str	r3, [sp, #16]
 800912a:	9307      	str	r3, [sp, #28]
 800912c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009130:	931a      	str	r3, [sp, #104]	; 0x68
 8009132:	4654      	mov	r4, sl
 8009134:	2205      	movs	r2, #5
 8009136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913a:	4858      	ldr	r0, [pc, #352]	; (800929c <_vfiprintf_r+0x24c>)
 800913c:	f7ff f8de 	bl	80082fc <memchr>
 8009140:	9a04      	ldr	r2, [sp, #16]
 8009142:	b9d8      	cbnz	r0, 800917c <_vfiprintf_r+0x12c>
 8009144:	06d1      	lsls	r1, r2, #27
 8009146:	bf44      	itt	mi
 8009148:	2320      	movmi	r3, #32
 800914a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800914e:	0713      	lsls	r3, r2, #28
 8009150:	bf44      	itt	mi
 8009152:	232b      	movmi	r3, #43	; 0x2b
 8009154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009158:	f89a 3000 	ldrb.w	r3, [sl]
 800915c:	2b2a      	cmp	r3, #42	; 0x2a
 800915e:	d015      	beq.n	800918c <_vfiprintf_r+0x13c>
 8009160:	4654      	mov	r4, sl
 8009162:	2000      	movs	r0, #0
 8009164:	f04f 0c0a 	mov.w	ip, #10
 8009168:	9a07      	ldr	r2, [sp, #28]
 800916a:	4621      	mov	r1, r4
 800916c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009170:	3b30      	subs	r3, #48	; 0x30
 8009172:	2b09      	cmp	r3, #9
 8009174:	d94e      	bls.n	8009214 <_vfiprintf_r+0x1c4>
 8009176:	b1b0      	cbz	r0, 80091a6 <_vfiprintf_r+0x156>
 8009178:	9207      	str	r2, [sp, #28]
 800917a:	e014      	b.n	80091a6 <_vfiprintf_r+0x156>
 800917c:	eba0 0308 	sub.w	r3, r0, r8
 8009180:	fa09 f303 	lsl.w	r3, r9, r3
 8009184:	4313      	orrs	r3, r2
 8009186:	46a2      	mov	sl, r4
 8009188:	9304      	str	r3, [sp, #16]
 800918a:	e7d2      	b.n	8009132 <_vfiprintf_r+0xe2>
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	1d19      	adds	r1, r3, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	9103      	str	r1, [sp, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	bfbb      	ittet	lt
 8009198:	425b      	neglt	r3, r3
 800919a:	f042 0202 	orrlt.w	r2, r2, #2
 800919e:	9307      	strge	r3, [sp, #28]
 80091a0:	9307      	strlt	r3, [sp, #28]
 80091a2:	bfb8      	it	lt
 80091a4:	9204      	strlt	r2, [sp, #16]
 80091a6:	7823      	ldrb	r3, [r4, #0]
 80091a8:	2b2e      	cmp	r3, #46	; 0x2e
 80091aa:	d10c      	bne.n	80091c6 <_vfiprintf_r+0x176>
 80091ac:	7863      	ldrb	r3, [r4, #1]
 80091ae:	2b2a      	cmp	r3, #42	; 0x2a
 80091b0:	d135      	bne.n	800921e <_vfiprintf_r+0x1ce>
 80091b2:	9b03      	ldr	r3, [sp, #12]
 80091b4:	3402      	adds	r4, #2
 80091b6:	1d1a      	adds	r2, r3, #4
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	9203      	str	r2, [sp, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	bfb8      	it	lt
 80091c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80091c4:	9305      	str	r3, [sp, #20]
 80091c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80092a0 <_vfiprintf_r+0x250>
 80091ca:	2203      	movs	r2, #3
 80091cc:	4650      	mov	r0, sl
 80091ce:	7821      	ldrb	r1, [r4, #0]
 80091d0:	f7ff f894 	bl	80082fc <memchr>
 80091d4:	b140      	cbz	r0, 80091e8 <_vfiprintf_r+0x198>
 80091d6:	2340      	movs	r3, #64	; 0x40
 80091d8:	eba0 000a 	sub.w	r0, r0, sl
 80091dc:	fa03 f000 	lsl.w	r0, r3, r0
 80091e0:	9b04      	ldr	r3, [sp, #16]
 80091e2:	3401      	adds	r4, #1
 80091e4:	4303      	orrs	r3, r0
 80091e6:	9304      	str	r3, [sp, #16]
 80091e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ec:	2206      	movs	r2, #6
 80091ee:	482d      	ldr	r0, [pc, #180]	; (80092a4 <_vfiprintf_r+0x254>)
 80091f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091f4:	f7ff f882 	bl	80082fc <memchr>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d03f      	beq.n	800927c <_vfiprintf_r+0x22c>
 80091fc:	4b2a      	ldr	r3, [pc, #168]	; (80092a8 <_vfiprintf_r+0x258>)
 80091fe:	bb1b      	cbnz	r3, 8009248 <_vfiprintf_r+0x1f8>
 8009200:	9b03      	ldr	r3, [sp, #12]
 8009202:	3307      	adds	r3, #7
 8009204:	f023 0307 	bic.w	r3, r3, #7
 8009208:	3308      	adds	r3, #8
 800920a:	9303      	str	r3, [sp, #12]
 800920c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800920e:	443b      	add	r3, r7
 8009210:	9309      	str	r3, [sp, #36]	; 0x24
 8009212:	e767      	b.n	80090e4 <_vfiprintf_r+0x94>
 8009214:	460c      	mov	r4, r1
 8009216:	2001      	movs	r0, #1
 8009218:	fb0c 3202 	mla	r2, ip, r2, r3
 800921c:	e7a5      	b.n	800916a <_vfiprintf_r+0x11a>
 800921e:	2300      	movs	r3, #0
 8009220:	f04f 0c0a 	mov.w	ip, #10
 8009224:	4619      	mov	r1, r3
 8009226:	3401      	adds	r4, #1
 8009228:	9305      	str	r3, [sp, #20]
 800922a:	4620      	mov	r0, r4
 800922c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009230:	3a30      	subs	r2, #48	; 0x30
 8009232:	2a09      	cmp	r2, #9
 8009234:	d903      	bls.n	800923e <_vfiprintf_r+0x1ee>
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0c5      	beq.n	80091c6 <_vfiprintf_r+0x176>
 800923a:	9105      	str	r1, [sp, #20]
 800923c:	e7c3      	b.n	80091c6 <_vfiprintf_r+0x176>
 800923e:	4604      	mov	r4, r0
 8009240:	2301      	movs	r3, #1
 8009242:	fb0c 2101 	mla	r1, ip, r1, r2
 8009246:	e7f0      	b.n	800922a <_vfiprintf_r+0x1da>
 8009248:	ab03      	add	r3, sp, #12
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	462a      	mov	r2, r5
 800924e:	4630      	mov	r0, r6
 8009250:	4b16      	ldr	r3, [pc, #88]	; (80092ac <_vfiprintf_r+0x25c>)
 8009252:	a904      	add	r1, sp, #16
 8009254:	f7fd fdd6 	bl	8006e04 <_printf_float>
 8009258:	4607      	mov	r7, r0
 800925a:	1c78      	adds	r0, r7, #1
 800925c:	d1d6      	bne.n	800920c <_vfiprintf_r+0x1bc>
 800925e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009260:	07d9      	lsls	r1, r3, #31
 8009262:	d405      	bmi.n	8009270 <_vfiprintf_r+0x220>
 8009264:	89ab      	ldrh	r3, [r5, #12]
 8009266:	059a      	lsls	r2, r3, #22
 8009268:	d402      	bmi.n	8009270 <_vfiprintf_r+0x220>
 800926a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800926c:	f000 faab 	bl	80097c6 <__retarget_lock_release_recursive>
 8009270:	89ab      	ldrh	r3, [r5, #12]
 8009272:	065b      	lsls	r3, r3, #25
 8009274:	f53f af12 	bmi.w	800909c <_vfiprintf_r+0x4c>
 8009278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800927a:	e711      	b.n	80090a0 <_vfiprintf_r+0x50>
 800927c:	ab03      	add	r3, sp, #12
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	462a      	mov	r2, r5
 8009282:	4630      	mov	r0, r6
 8009284:	4b09      	ldr	r3, [pc, #36]	; (80092ac <_vfiprintf_r+0x25c>)
 8009286:	a904      	add	r1, sp, #16
 8009288:	f7fe f858 	bl	800733c <_printf_i>
 800928c:	e7e4      	b.n	8009258 <_vfiprintf_r+0x208>
 800928e:	bf00      	nop
 8009290:	0800a544 	.word	0x0800a544
 8009294:	0800a564 	.word	0x0800a564
 8009298:	0800a524 	.word	0x0800a524
 800929c:	0800a3cc 	.word	0x0800a3cc
 80092a0:	0800a3d2 	.word	0x0800a3d2
 80092a4:	0800a3d6 	.word	0x0800a3d6
 80092a8:	08006e05 	.word	0x08006e05
 80092ac:	0800902d 	.word	0x0800902d

080092b0 <__swbuf_r>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	460e      	mov	r6, r1
 80092b4:	4614      	mov	r4, r2
 80092b6:	4605      	mov	r5, r0
 80092b8:	b118      	cbz	r0, 80092c2 <__swbuf_r+0x12>
 80092ba:	6983      	ldr	r3, [r0, #24]
 80092bc:	b90b      	cbnz	r3, 80092c2 <__swbuf_r+0x12>
 80092be:	f000 f9e3 	bl	8009688 <__sinit>
 80092c2:	4b21      	ldr	r3, [pc, #132]	; (8009348 <__swbuf_r+0x98>)
 80092c4:	429c      	cmp	r4, r3
 80092c6:	d12b      	bne.n	8009320 <__swbuf_r+0x70>
 80092c8:	686c      	ldr	r4, [r5, #4]
 80092ca:	69a3      	ldr	r3, [r4, #24]
 80092cc:	60a3      	str	r3, [r4, #8]
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	071a      	lsls	r2, r3, #28
 80092d2:	d52f      	bpl.n	8009334 <__swbuf_r+0x84>
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	b36b      	cbz	r3, 8009334 <__swbuf_r+0x84>
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	6820      	ldr	r0, [r4, #0]
 80092dc:	b2f6      	uxtb	r6, r6
 80092de:	1ac0      	subs	r0, r0, r3
 80092e0:	6963      	ldr	r3, [r4, #20]
 80092e2:	4637      	mov	r7, r6
 80092e4:	4283      	cmp	r3, r0
 80092e6:	dc04      	bgt.n	80092f2 <__swbuf_r+0x42>
 80092e8:	4621      	mov	r1, r4
 80092ea:	4628      	mov	r0, r5
 80092ec:	f000 f938 	bl	8009560 <_fflush_r>
 80092f0:	bb30      	cbnz	r0, 8009340 <__swbuf_r+0x90>
 80092f2:	68a3      	ldr	r3, [r4, #8]
 80092f4:	3001      	adds	r0, #1
 80092f6:	3b01      	subs	r3, #1
 80092f8:	60a3      	str	r3, [r4, #8]
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	1c5a      	adds	r2, r3, #1
 80092fe:	6022      	str	r2, [r4, #0]
 8009300:	701e      	strb	r6, [r3, #0]
 8009302:	6963      	ldr	r3, [r4, #20]
 8009304:	4283      	cmp	r3, r0
 8009306:	d004      	beq.n	8009312 <__swbuf_r+0x62>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	07db      	lsls	r3, r3, #31
 800930c:	d506      	bpl.n	800931c <__swbuf_r+0x6c>
 800930e:	2e0a      	cmp	r6, #10
 8009310:	d104      	bne.n	800931c <__swbuf_r+0x6c>
 8009312:	4621      	mov	r1, r4
 8009314:	4628      	mov	r0, r5
 8009316:	f000 f923 	bl	8009560 <_fflush_r>
 800931a:	b988      	cbnz	r0, 8009340 <__swbuf_r+0x90>
 800931c:	4638      	mov	r0, r7
 800931e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009320:	4b0a      	ldr	r3, [pc, #40]	; (800934c <__swbuf_r+0x9c>)
 8009322:	429c      	cmp	r4, r3
 8009324:	d101      	bne.n	800932a <__swbuf_r+0x7a>
 8009326:	68ac      	ldr	r4, [r5, #8]
 8009328:	e7cf      	b.n	80092ca <__swbuf_r+0x1a>
 800932a:	4b09      	ldr	r3, [pc, #36]	; (8009350 <__swbuf_r+0xa0>)
 800932c:	429c      	cmp	r4, r3
 800932e:	bf08      	it	eq
 8009330:	68ec      	ldreq	r4, [r5, #12]
 8009332:	e7ca      	b.n	80092ca <__swbuf_r+0x1a>
 8009334:	4621      	mov	r1, r4
 8009336:	4628      	mov	r0, r5
 8009338:	f000 f81a 	bl	8009370 <__swsetup_r>
 800933c:	2800      	cmp	r0, #0
 800933e:	d0cb      	beq.n	80092d8 <__swbuf_r+0x28>
 8009340:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009344:	e7ea      	b.n	800931c <__swbuf_r+0x6c>
 8009346:	bf00      	nop
 8009348:	0800a544 	.word	0x0800a544
 800934c:	0800a564 	.word	0x0800a564
 8009350:	0800a524 	.word	0x0800a524

08009354 <__ascii_wctomb>:
 8009354:	4603      	mov	r3, r0
 8009356:	4608      	mov	r0, r1
 8009358:	b141      	cbz	r1, 800936c <__ascii_wctomb+0x18>
 800935a:	2aff      	cmp	r2, #255	; 0xff
 800935c:	d904      	bls.n	8009368 <__ascii_wctomb+0x14>
 800935e:	228a      	movs	r2, #138	; 0x8a
 8009360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	4770      	bx	lr
 8009368:	2001      	movs	r0, #1
 800936a:	700a      	strb	r2, [r1, #0]
 800936c:	4770      	bx	lr
	...

08009370 <__swsetup_r>:
 8009370:	4b32      	ldr	r3, [pc, #200]	; (800943c <__swsetup_r+0xcc>)
 8009372:	b570      	push	{r4, r5, r6, lr}
 8009374:	681d      	ldr	r5, [r3, #0]
 8009376:	4606      	mov	r6, r0
 8009378:	460c      	mov	r4, r1
 800937a:	b125      	cbz	r5, 8009386 <__swsetup_r+0x16>
 800937c:	69ab      	ldr	r3, [r5, #24]
 800937e:	b913      	cbnz	r3, 8009386 <__swsetup_r+0x16>
 8009380:	4628      	mov	r0, r5
 8009382:	f000 f981 	bl	8009688 <__sinit>
 8009386:	4b2e      	ldr	r3, [pc, #184]	; (8009440 <__swsetup_r+0xd0>)
 8009388:	429c      	cmp	r4, r3
 800938a:	d10f      	bne.n	80093ac <__swsetup_r+0x3c>
 800938c:	686c      	ldr	r4, [r5, #4]
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009394:	0719      	lsls	r1, r3, #28
 8009396:	d42c      	bmi.n	80093f2 <__swsetup_r+0x82>
 8009398:	06dd      	lsls	r5, r3, #27
 800939a:	d411      	bmi.n	80093c0 <__swsetup_r+0x50>
 800939c:	2309      	movs	r3, #9
 800939e:	6033      	str	r3, [r6, #0]
 80093a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	e03e      	b.n	800942a <__swsetup_r+0xba>
 80093ac:	4b25      	ldr	r3, [pc, #148]	; (8009444 <__swsetup_r+0xd4>)
 80093ae:	429c      	cmp	r4, r3
 80093b0:	d101      	bne.n	80093b6 <__swsetup_r+0x46>
 80093b2:	68ac      	ldr	r4, [r5, #8]
 80093b4:	e7eb      	b.n	800938e <__swsetup_r+0x1e>
 80093b6:	4b24      	ldr	r3, [pc, #144]	; (8009448 <__swsetup_r+0xd8>)
 80093b8:	429c      	cmp	r4, r3
 80093ba:	bf08      	it	eq
 80093bc:	68ec      	ldreq	r4, [r5, #12]
 80093be:	e7e6      	b.n	800938e <__swsetup_r+0x1e>
 80093c0:	0758      	lsls	r0, r3, #29
 80093c2:	d512      	bpl.n	80093ea <__swsetup_r+0x7a>
 80093c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093c6:	b141      	cbz	r1, 80093da <__swsetup_r+0x6a>
 80093c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093cc:	4299      	cmp	r1, r3
 80093ce:	d002      	beq.n	80093d6 <__swsetup_r+0x66>
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7ff fb37 	bl	8008a44 <_free_r>
 80093d6:	2300      	movs	r3, #0
 80093d8:	6363      	str	r3, [r4, #52]	; 0x34
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	2300      	movs	r3, #0
 80093e4:	6063      	str	r3, [r4, #4]
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	f043 0308 	orr.w	r3, r3, #8
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	6923      	ldr	r3, [r4, #16]
 80093f4:	b94b      	cbnz	r3, 800940a <__swsetup_r+0x9a>
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009400:	d003      	beq.n	800940a <__swsetup_r+0x9a>
 8009402:	4621      	mov	r1, r4
 8009404:	4630      	mov	r0, r6
 8009406:	f000 fa05 	bl	8009814 <__smakebuf_r>
 800940a:	89a0      	ldrh	r0, [r4, #12]
 800940c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009410:	f010 0301 	ands.w	r3, r0, #1
 8009414:	d00a      	beq.n	800942c <__swsetup_r+0xbc>
 8009416:	2300      	movs	r3, #0
 8009418:	60a3      	str	r3, [r4, #8]
 800941a:	6963      	ldr	r3, [r4, #20]
 800941c:	425b      	negs	r3, r3
 800941e:	61a3      	str	r3, [r4, #24]
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	b943      	cbnz	r3, 8009436 <__swsetup_r+0xc6>
 8009424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009428:	d1ba      	bne.n	80093a0 <__swsetup_r+0x30>
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	0781      	lsls	r1, r0, #30
 800942e:	bf58      	it	pl
 8009430:	6963      	ldrpl	r3, [r4, #20]
 8009432:	60a3      	str	r3, [r4, #8]
 8009434:	e7f4      	b.n	8009420 <__swsetup_r+0xb0>
 8009436:	2000      	movs	r0, #0
 8009438:	e7f7      	b.n	800942a <__swsetup_r+0xba>
 800943a:	bf00      	nop
 800943c:	20000010 	.word	0x20000010
 8009440:	0800a544 	.word	0x0800a544
 8009444:	0800a564 	.word	0x0800a564
 8009448:	0800a524 	.word	0x0800a524

0800944c <abort>:
 800944c:	2006      	movs	r0, #6
 800944e:	b508      	push	{r3, lr}
 8009450:	f000 fa50 	bl	80098f4 <raise>
 8009454:	2001      	movs	r0, #1
 8009456:	f7f9 fb5e 	bl	8002b16 <_exit>
	...

0800945c <__sflush_r>:
 800945c:	898a      	ldrh	r2, [r1, #12]
 800945e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009460:	4605      	mov	r5, r0
 8009462:	0710      	lsls	r0, r2, #28
 8009464:	460c      	mov	r4, r1
 8009466:	d457      	bmi.n	8009518 <__sflush_r+0xbc>
 8009468:	684b      	ldr	r3, [r1, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	dc04      	bgt.n	8009478 <__sflush_r+0x1c>
 800946e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009470:	2b00      	cmp	r3, #0
 8009472:	dc01      	bgt.n	8009478 <__sflush_r+0x1c>
 8009474:	2000      	movs	r0, #0
 8009476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800947a:	2e00      	cmp	r6, #0
 800947c:	d0fa      	beq.n	8009474 <__sflush_r+0x18>
 800947e:	2300      	movs	r3, #0
 8009480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009484:	682f      	ldr	r7, [r5, #0]
 8009486:	602b      	str	r3, [r5, #0]
 8009488:	d032      	beq.n	80094f0 <__sflush_r+0x94>
 800948a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	075a      	lsls	r2, r3, #29
 8009490:	d505      	bpl.n	800949e <__sflush_r+0x42>
 8009492:	6863      	ldr	r3, [r4, #4]
 8009494:	1ac0      	subs	r0, r0, r3
 8009496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009498:	b10b      	cbz	r3, 800949e <__sflush_r+0x42>
 800949a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800949c:	1ac0      	subs	r0, r0, r3
 800949e:	2300      	movs	r3, #0
 80094a0:	4602      	mov	r2, r0
 80094a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094a4:	4628      	mov	r0, r5
 80094a6:	6a21      	ldr	r1, [r4, #32]
 80094a8:	47b0      	blx	r6
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	d106      	bne.n	80094be <__sflush_r+0x62>
 80094b0:	6829      	ldr	r1, [r5, #0]
 80094b2:	291d      	cmp	r1, #29
 80094b4:	d82c      	bhi.n	8009510 <__sflush_r+0xb4>
 80094b6:	4a29      	ldr	r2, [pc, #164]	; (800955c <__sflush_r+0x100>)
 80094b8:	40ca      	lsrs	r2, r1
 80094ba:	07d6      	lsls	r6, r2, #31
 80094bc:	d528      	bpl.n	8009510 <__sflush_r+0xb4>
 80094be:	2200      	movs	r2, #0
 80094c0:	6062      	str	r2, [r4, #4]
 80094c2:	6922      	ldr	r2, [r4, #16]
 80094c4:	04d9      	lsls	r1, r3, #19
 80094c6:	6022      	str	r2, [r4, #0]
 80094c8:	d504      	bpl.n	80094d4 <__sflush_r+0x78>
 80094ca:	1c42      	adds	r2, r0, #1
 80094cc:	d101      	bne.n	80094d2 <__sflush_r+0x76>
 80094ce:	682b      	ldr	r3, [r5, #0]
 80094d0:	b903      	cbnz	r3, 80094d4 <__sflush_r+0x78>
 80094d2:	6560      	str	r0, [r4, #84]	; 0x54
 80094d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094d6:	602f      	str	r7, [r5, #0]
 80094d8:	2900      	cmp	r1, #0
 80094da:	d0cb      	beq.n	8009474 <__sflush_r+0x18>
 80094dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094e0:	4299      	cmp	r1, r3
 80094e2:	d002      	beq.n	80094ea <__sflush_r+0x8e>
 80094e4:	4628      	mov	r0, r5
 80094e6:	f7ff faad 	bl	8008a44 <_free_r>
 80094ea:	2000      	movs	r0, #0
 80094ec:	6360      	str	r0, [r4, #52]	; 0x34
 80094ee:	e7c2      	b.n	8009476 <__sflush_r+0x1a>
 80094f0:	6a21      	ldr	r1, [r4, #32]
 80094f2:	2301      	movs	r3, #1
 80094f4:	4628      	mov	r0, r5
 80094f6:	47b0      	blx	r6
 80094f8:	1c41      	adds	r1, r0, #1
 80094fa:	d1c7      	bne.n	800948c <__sflush_r+0x30>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0c4      	beq.n	800948c <__sflush_r+0x30>
 8009502:	2b1d      	cmp	r3, #29
 8009504:	d001      	beq.n	800950a <__sflush_r+0xae>
 8009506:	2b16      	cmp	r3, #22
 8009508:	d101      	bne.n	800950e <__sflush_r+0xb2>
 800950a:	602f      	str	r7, [r5, #0]
 800950c:	e7b2      	b.n	8009474 <__sflush_r+0x18>
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	e7ae      	b.n	8009476 <__sflush_r+0x1a>
 8009518:	690f      	ldr	r7, [r1, #16]
 800951a:	2f00      	cmp	r7, #0
 800951c:	d0aa      	beq.n	8009474 <__sflush_r+0x18>
 800951e:	0793      	lsls	r3, r2, #30
 8009520:	bf18      	it	ne
 8009522:	2300      	movne	r3, #0
 8009524:	680e      	ldr	r6, [r1, #0]
 8009526:	bf08      	it	eq
 8009528:	694b      	ldreq	r3, [r1, #20]
 800952a:	1bf6      	subs	r6, r6, r7
 800952c:	600f      	str	r7, [r1, #0]
 800952e:	608b      	str	r3, [r1, #8]
 8009530:	2e00      	cmp	r6, #0
 8009532:	dd9f      	ble.n	8009474 <__sflush_r+0x18>
 8009534:	4633      	mov	r3, r6
 8009536:	463a      	mov	r2, r7
 8009538:	4628      	mov	r0, r5
 800953a:	6a21      	ldr	r1, [r4, #32]
 800953c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009540:	47e0      	blx	ip
 8009542:	2800      	cmp	r0, #0
 8009544:	dc06      	bgt.n	8009554 <__sflush_r+0xf8>
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800954c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009550:	81a3      	strh	r3, [r4, #12]
 8009552:	e790      	b.n	8009476 <__sflush_r+0x1a>
 8009554:	4407      	add	r7, r0
 8009556:	1a36      	subs	r6, r6, r0
 8009558:	e7ea      	b.n	8009530 <__sflush_r+0xd4>
 800955a:	bf00      	nop
 800955c:	20400001 	.word	0x20400001

08009560 <_fflush_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	690b      	ldr	r3, [r1, #16]
 8009564:	4605      	mov	r5, r0
 8009566:	460c      	mov	r4, r1
 8009568:	b913      	cbnz	r3, 8009570 <_fflush_r+0x10>
 800956a:	2500      	movs	r5, #0
 800956c:	4628      	mov	r0, r5
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	b118      	cbz	r0, 800957a <_fflush_r+0x1a>
 8009572:	6983      	ldr	r3, [r0, #24]
 8009574:	b90b      	cbnz	r3, 800957a <_fflush_r+0x1a>
 8009576:	f000 f887 	bl	8009688 <__sinit>
 800957a:	4b14      	ldr	r3, [pc, #80]	; (80095cc <_fflush_r+0x6c>)
 800957c:	429c      	cmp	r4, r3
 800957e:	d11b      	bne.n	80095b8 <_fflush_r+0x58>
 8009580:	686c      	ldr	r4, [r5, #4]
 8009582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0ef      	beq.n	800956a <_fflush_r+0xa>
 800958a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800958c:	07d0      	lsls	r0, r2, #31
 800958e:	d404      	bmi.n	800959a <_fflush_r+0x3a>
 8009590:	0599      	lsls	r1, r3, #22
 8009592:	d402      	bmi.n	800959a <_fflush_r+0x3a>
 8009594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009596:	f000 f915 	bl	80097c4 <__retarget_lock_acquire_recursive>
 800959a:	4628      	mov	r0, r5
 800959c:	4621      	mov	r1, r4
 800959e:	f7ff ff5d 	bl	800945c <__sflush_r>
 80095a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095a4:	4605      	mov	r5, r0
 80095a6:	07da      	lsls	r2, r3, #31
 80095a8:	d4e0      	bmi.n	800956c <_fflush_r+0xc>
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	059b      	lsls	r3, r3, #22
 80095ae:	d4dd      	bmi.n	800956c <_fflush_r+0xc>
 80095b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b2:	f000 f908 	bl	80097c6 <__retarget_lock_release_recursive>
 80095b6:	e7d9      	b.n	800956c <_fflush_r+0xc>
 80095b8:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <_fflush_r+0x70>)
 80095ba:	429c      	cmp	r4, r3
 80095bc:	d101      	bne.n	80095c2 <_fflush_r+0x62>
 80095be:	68ac      	ldr	r4, [r5, #8]
 80095c0:	e7df      	b.n	8009582 <_fflush_r+0x22>
 80095c2:	4b04      	ldr	r3, [pc, #16]	; (80095d4 <_fflush_r+0x74>)
 80095c4:	429c      	cmp	r4, r3
 80095c6:	bf08      	it	eq
 80095c8:	68ec      	ldreq	r4, [r5, #12]
 80095ca:	e7da      	b.n	8009582 <_fflush_r+0x22>
 80095cc:	0800a544 	.word	0x0800a544
 80095d0:	0800a564 	.word	0x0800a564
 80095d4:	0800a524 	.word	0x0800a524

080095d8 <std>:
 80095d8:	2300      	movs	r3, #0
 80095da:	b510      	push	{r4, lr}
 80095dc:	4604      	mov	r4, r0
 80095de:	e9c0 3300 	strd	r3, r3, [r0]
 80095e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095e6:	6083      	str	r3, [r0, #8]
 80095e8:	8181      	strh	r1, [r0, #12]
 80095ea:	6643      	str	r3, [r0, #100]	; 0x64
 80095ec:	81c2      	strh	r2, [r0, #14]
 80095ee:	6183      	str	r3, [r0, #24]
 80095f0:	4619      	mov	r1, r3
 80095f2:	2208      	movs	r2, #8
 80095f4:	305c      	adds	r0, #92	; 0x5c
 80095f6:	f7fd fb5f 	bl	8006cb8 <memset>
 80095fa:	4b05      	ldr	r3, [pc, #20]	; (8009610 <std+0x38>)
 80095fc:	6224      	str	r4, [r4, #32]
 80095fe:	6263      	str	r3, [r4, #36]	; 0x24
 8009600:	4b04      	ldr	r3, [pc, #16]	; (8009614 <std+0x3c>)
 8009602:	62a3      	str	r3, [r4, #40]	; 0x28
 8009604:	4b04      	ldr	r3, [pc, #16]	; (8009618 <std+0x40>)
 8009606:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <std+0x44>)
 800960a:	6323      	str	r3, [r4, #48]	; 0x30
 800960c:	bd10      	pop	{r4, pc}
 800960e:	bf00      	nop
 8009610:	0800992d 	.word	0x0800992d
 8009614:	0800994f 	.word	0x0800994f
 8009618:	08009987 	.word	0x08009987
 800961c:	080099ab 	.word	0x080099ab

08009620 <_cleanup_r>:
 8009620:	4901      	ldr	r1, [pc, #4]	; (8009628 <_cleanup_r+0x8>)
 8009622:	f000 b8af 	b.w	8009784 <_fwalk_reent>
 8009626:	bf00      	nop
 8009628:	08009561 	.word	0x08009561

0800962c <__sfmoreglue>:
 800962c:	2268      	movs	r2, #104	; 0x68
 800962e:	b570      	push	{r4, r5, r6, lr}
 8009630:	1e4d      	subs	r5, r1, #1
 8009632:	4355      	muls	r5, r2
 8009634:	460e      	mov	r6, r1
 8009636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800963a:	f7ff fa6b 	bl	8008b14 <_malloc_r>
 800963e:	4604      	mov	r4, r0
 8009640:	b140      	cbz	r0, 8009654 <__sfmoreglue+0x28>
 8009642:	2100      	movs	r1, #0
 8009644:	e9c0 1600 	strd	r1, r6, [r0]
 8009648:	300c      	adds	r0, #12
 800964a:	60a0      	str	r0, [r4, #8]
 800964c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009650:	f7fd fb32 	bl	8006cb8 <memset>
 8009654:	4620      	mov	r0, r4
 8009656:	bd70      	pop	{r4, r5, r6, pc}

08009658 <__sfp_lock_acquire>:
 8009658:	4801      	ldr	r0, [pc, #4]	; (8009660 <__sfp_lock_acquire+0x8>)
 800965a:	f000 b8b3 	b.w	80097c4 <__retarget_lock_acquire_recursive>
 800965e:	bf00      	nop
 8009660:	200003c5 	.word	0x200003c5

08009664 <__sfp_lock_release>:
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <__sfp_lock_release+0x8>)
 8009666:	f000 b8ae 	b.w	80097c6 <__retarget_lock_release_recursive>
 800966a:	bf00      	nop
 800966c:	200003c5 	.word	0x200003c5

08009670 <__sinit_lock_acquire>:
 8009670:	4801      	ldr	r0, [pc, #4]	; (8009678 <__sinit_lock_acquire+0x8>)
 8009672:	f000 b8a7 	b.w	80097c4 <__retarget_lock_acquire_recursive>
 8009676:	bf00      	nop
 8009678:	200003c6 	.word	0x200003c6

0800967c <__sinit_lock_release>:
 800967c:	4801      	ldr	r0, [pc, #4]	; (8009684 <__sinit_lock_release+0x8>)
 800967e:	f000 b8a2 	b.w	80097c6 <__retarget_lock_release_recursive>
 8009682:	bf00      	nop
 8009684:	200003c6 	.word	0x200003c6

08009688 <__sinit>:
 8009688:	b510      	push	{r4, lr}
 800968a:	4604      	mov	r4, r0
 800968c:	f7ff fff0 	bl	8009670 <__sinit_lock_acquire>
 8009690:	69a3      	ldr	r3, [r4, #24]
 8009692:	b11b      	cbz	r3, 800969c <__sinit+0x14>
 8009694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009698:	f7ff bff0 	b.w	800967c <__sinit_lock_release>
 800969c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096a0:	6523      	str	r3, [r4, #80]	; 0x50
 80096a2:	4b13      	ldr	r3, [pc, #76]	; (80096f0 <__sinit+0x68>)
 80096a4:	4a13      	ldr	r2, [pc, #76]	; (80096f4 <__sinit+0x6c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80096aa:	42a3      	cmp	r3, r4
 80096ac:	bf08      	it	eq
 80096ae:	2301      	moveq	r3, #1
 80096b0:	4620      	mov	r0, r4
 80096b2:	bf08      	it	eq
 80096b4:	61a3      	streq	r3, [r4, #24]
 80096b6:	f000 f81f 	bl	80096f8 <__sfp>
 80096ba:	6060      	str	r0, [r4, #4]
 80096bc:	4620      	mov	r0, r4
 80096be:	f000 f81b 	bl	80096f8 <__sfp>
 80096c2:	60a0      	str	r0, [r4, #8]
 80096c4:	4620      	mov	r0, r4
 80096c6:	f000 f817 	bl	80096f8 <__sfp>
 80096ca:	2200      	movs	r2, #0
 80096cc:	2104      	movs	r1, #4
 80096ce:	60e0      	str	r0, [r4, #12]
 80096d0:	6860      	ldr	r0, [r4, #4]
 80096d2:	f7ff ff81 	bl	80095d8 <std>
 80096d6:	2201      	movs	r2, #1
 80096d8:	2109      	movs	r1, #9
 80096da:	68a0      	ldr	r0, [r4, #8]
 80096dc:	f7ff ff7c 	bl	80095d8 <std>
 80096e0:	2202      	movs	r2, #2
 80096e2:	2112      	movs	r1, #18
 80096e4:	68e0      	ldr	r0, [r4, #12]
 80096e6:	f7ff ff77 	bl	80095d8 <std>
 80096ea:	2301      	movs	r3, #1
 80096ec:	61a3      	str	r3, [r4, #24]
 80096ee:	e7d1      	b.n	8009694 <__sinit+0xc>
 80096f0:	0800a1a8 	.word	0x0800a1a8
 80096f4:	08009621 	.word	0x08009621

080096f8 <__sfp>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	4607      	mov	r7, r0
 80096fc:	f7ff ffac 	bl	8009658 <__sfp_lock_acquire>
 8009700:	4b1e      	ldr	r3, [pc, #120]	; (800977c <__sfp+0x84>)
 8009702:	681e      	ldr	r6, [r3, #0]
 8009704:	69b3      	ldr	r3, [r6, #24]
 8009706:	b913      	cbnz	r3, 800970e <__sfp+0x16>
 8009708:	4630      	mov	r0, r6
 800970a:	f7ff ffbd 	bl	8009688 <__sinit>
 800970e:	3648      	adds	r6, #72	; 0x48
 8009710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009714:	3b01      	subs	r3, #1
 8009716:	d503      	bpl.n	8009720 <__sfp+0x28>
 8009718:	6833      	ldr	r3, [r6, #0]
 800971a:	b30b      	cbz	r3, 8009760 <__sfp+0x68>
 800971c:	6836      	ldr	r6, [r6, #0]
 800971e:	e7f7      	b.n	8009710 <__sfp+0x18>
 8009720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009724:	b9d5      	cbnz	r5, 800975c <__sfp+0x64>
 8009726:	4b16      	ldr	r3, [pc, #88]	; (8009780 <__sfp+0x88>)
 8009728:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800972c:	60e3      	str	r3, [r4, #12]
 800972e:	6665      	str	r5, [r4, #100]	; 0x64
 8009730:	f000 f847 	bl	80097c2 <__retarget_lock_init_recursive>
 8009734:	f7ff ff96 	bl	8009664 <__sfp_lock_release>
 8009738:	2208      	movs	r2, #8
 800973a:	4629      	mov	r1, r5
 800973c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009744:	6025      	str	r5, [r4, #0]
 8009746:	61a5      	str	r5, [r4, #24]
 8009748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800974c:	f7fd fab4 	bl	8006cb8 <memset>
 8009750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009758:	4620      	mov	r0, r4
 800975a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975c:	3468      	adds	r4, #104	; 0x68
 800975e:	e7d9      	b.n	8009714 <__sfp+0x1c>
 8009760:	2104      	movs	r1, #4
 8009762:	4638      	mov	r0, r7
 8009764:	f7ff ff62 	bl	800962c <__sfmoreglue>
 8009768:	4604      	mov	r4, r0
 800976a:	6030      	str	r0, [r6, #0]
 800976c:	2800      	cmp	r0, #0
 800976e:	d1d5      	bne.n	800971c <__sfp+0x24>
 8009770:	f7ff ff78 	bl	8009664 <__sfp_lock_release>
 8009774:	230c      	movs	r3, #12
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	e7ee      	b.n	8009758 <__sfp+0x60>
 800977a:	bf00      	nop
 800977c:	0800a1a8 	.word	0x0800a1a8
 8009780:	ffff0001 	.word	0xffff0001

08009784 <_fwalk_reent>:
 8009784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009788:	4606      	mov	r6, r0
 800978a:	4688      	mov	r8, r1
 800978c:	2700      	movs	r7, #0
 800978e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009796:	f1b9 0901 	subs.w	r9, r9, #1
 800979a:	d505      	bpl.n	80097a8 <_fwalk_reent+0x24>
 800979c:	6824      	ldr	r4, [r4, #0]
 800979e:	2c00      	cmp	r4, #0
 80097a0:	d1f7      	bne.n	8009792 <_fwalk_reent+0xe>
 80097a2:	4638      	mov	r0, r7
 80097a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a8:	89ab      	ldrh	r3, [r5, #12]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d907      	bls.n	80097be <_fwalk_reent+0x3a>
 80097ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097b2:	3301      	adds	r3, #1
 80097b4:	d003      	beq.n	80097be <_fwalk_reent+0x3a>
 80097b6:	4629      	mov	r1, r5
 80097b8:	4630      	mov	r0, r6
 80097ba:	47c0      	blx	r8
 80097bc:	4307      	orrs	r7, r0
 80097be:	3568      	adds	r5, #104	; 0x68
 80097c0:	e7e9      	b.n	8009796 <_fwalk_reent+0x12>

080097c2 <__retarget_lock_init_recursive>:
 80097c2:	4770      	bx	lr

080097c4 <__retarget_lock_acquire_recursive>:
 80097c4:	4770      	bx	lr

080097c6 <__retarget_lock_release_recursive>:
 80097c6:	4770      	bx	lr

080097c8 <__swhatbuf_r>:
 80097c8:	b570      	push	{r4, r5, r6, lr}
 80097ca:	460e      	mov	r6, r1
 80097cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d0:	4614      	mov	r4, r2
 80097d2:	2900      	cmp	r1, #0
 80097d4:	461d      	mov	r5, r3
 80097d6:	b096      	sub	sp, #88	; 0x58
 80097d8:	da08      	bge.n	80097ec <__swhatbuf_r+0x24>
 80097da:	2200      	movs	r2, #0
 80097dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	061a      	lsls	r2, r3, #24
 80097e4:	d410      	bmi.n	8009808 <__swhatbuf_r+0x40>
 80097e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ea:	e00e      	b.n	800980a <__swhatbuf_r+0x42>
 80097ec:	466a      	mov	r2, sp
 80097ee:	f000 f903 	bl	80099f8 <_fstat_r>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	dbf1      	blt.n	80097da <__swhatbuf_r+0x12>
 80097f6:	9a01      	ldr	r2, [sp, #4]
 80097f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009800:	425a      	negs	r2, r3
 8009802:	415a      	adcs	r2, r3
 8009804:	602a      	str	r2, [r5, #0]
 8009806:	e7ee      	b.n	80097e6 <__swhatbuf_r+0x1e>
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	2000      	movs	r0, #0
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	b016      	add	sp, #88	; 0x58
 8009810:	bd70      	pop	{r4, r5, r6, pc}
	...

08009814 <__smakebuf_r>:
 8009814:	898b      	ldrh	r3, [r1, #12]
 8009816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009818:	079d      	lsls	r5, r3, #30
 800981a:	4606      	mov	r6, r0
 800981c:	460c      	mov	r4, r1
 800981e:	d507      	bpl.n	8009830 <__smakebuf_r+0x1c>
 8009820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	6123      	str	r3, [r4, #16]
 8009828:	2301      	movs	r3, #1
 800982a:	6163      	str	r3, [r4, #20]
 800982c:	b002      	add	sp, #8
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	466a      	mov	r2, sp
 8009832:	ab01      	add	r3, sp, #4
 8009834:	f7ff ffc8 	bl	80097c8 <__swhatbuf_r>
 8009838:	9900      	ldr	r1, [sp, #0]
 800983a:	4605      	mov	r5, r0
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff f969 	bl	8008b14 <_malloc_r>
 8009842:	b948      	cbnz	r0, 8009858 <__smakebuf_r+0x44>
 8009844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009848:	059a      	lsls	r2, r3, #22
 800984a:	d4ef      	bmi.n	800982c <__smakebuf_r+0x18>
 800984c:	f023 0303 	bic.w	r3, r3, #3
 8009850:	f043 0302 	orr.w	r3, r3, #2
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	e7e3      	b.n	8009820 <__smakebuf_r+0xc>
 8009858:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <__smakebuf_r+0x7c>)
 800985a:	62b3      	str	r3, [r6, #40]	; 0x28
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	6020      	str	r0, [r4, #0]
 8009860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	9b00      	ldr	r3, [sp, #0]
 8009868:	6120      	str	r0, [r4, #16]
 800986a:	6163      	str	r3, [r4, #20]
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	b15b      	cbz	r3, 8009888 <__smakebuf_r+0x74>
 8009870:	4630      	mov	r0, r6
 8009872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009876:	f000 f8d1 	bl	8009a1c <_isatty_r>
 800987a:	b128      	cbz	r0, 8009888 <__smakebuf_r+0x74>
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	f023 0303 	bic.w	r3, r3, #3
 8009882:	f043 0301 	orr.w	r3, r3, #1
 8009886:	81a3      	strh	r3, [r4, #12]
 8009888:	89a0      	ldrh	r0, [r4, #12]
 800988a:	4305      	orrs	r5, r0
 800988c:	81a5      	strh	r5, [r4, #12]
 800988e:	e7cd      	b.n	800982c <__smakebuf_r+0x18>
 8009890:	08009621 	.word	0x08009621

08009894 <_malloc_usable_size_r>:
 8009894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009898:	1f18      	subs	r0, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	bfbc      	itt	lt
 800989e:	580b      	ldrlt	r3, [r1, r0]
 80098a0:	18c0      	addlt	r0, r0, r3
 80098a2:	4770      	bx	lr

080098a4 <_raise_r>:
 80098a4:	291f      	cmp	r1, #31
 80098a6:	b538      	push	{r3, r4, r5, lr}
 80098a8:	4604      	mov	r4, r0
 80098aa:	460d      	mov	r5, r1
 80098ac:	d904      	bls.n	80098b8 <_raise_r+0x14>
 80098ae:	2316      	movs	r3, #22
 80098b0:	6003      	str	r3, [r0, #0]
 80098b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098ba:	b112      	cbz	r2, 80098c2 <_raise_r+0x1e>
 80098bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098c0:	b94b      	cbnz	r3, 80098d6 <_raise_r+0x32>
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 f830 	bl	8009928 <_getpid_r>
 80098c8:	462a      	mov	r2, r5
 80098ca:	4601      	mov	r1, r0
 80098cc:	4620      	mov	r0, r4
 80098ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098d2:	f000 b817 	b.w	8009904 <_kill_r>
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d00a      	beq.n	80098f0 <_raise_r+0x4c>
 80098da:	1c59      	adds	r1, r3, #1
 80098dc:	d103      	bne.n	80098e6 <_raise_r+0x42>
 80098de:	2316      	movs	r3, #22
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	2001      	movs	r0, #1
 80098e4:	e7e7      	b.n	80098b6 <_raise_r+0x12>
 80098e6:	2400      	movs	r4, #0
 80098e8:	4628      	mov	r0, r5
 80098ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098ee:	4798      	blx	r3
 80098f0:	2000      	movs	r0, #0
 80098f2:	e7e0      	b.n	80098b6 <_raise_r+0x12>

080098f4 <raise>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <raise+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f7ff bfd3 	b.w	80098a4 <_raise_r>
 80098fe:	bf00      	nop
 8009900:	20000010 	.word	0x20000010

08009904 <_kill_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	2300      	movs	r3, #0
 8009908:	4d06      	ldr	r5, [pc, #24]	; (8009924 <_kill_r+0x20>)
 800990a:	4604      	mov	r4, r0
 800990c:	4608      	mov	r0, r1
 800990e:	4611      	mov	r1, r2
 8009910:	602b      	str	r3, [r5, #0]
 8009912:	f7f9 f8f0 	bl	8002af6 <_kill>
 8009916:	1c43      	adds	r3, r0, #1
 8009918:	d102      	bne.n	8009920 <_kill_r+0x1c>
 800991a:	682b      	ldr	r3, [r5, #0]
 800991c:	b103      	cbz	r3, 8009920 <_kill_r+0x1c>
 800991e:	6023      	str	r3, [r4, #0]
 8009920:	bd38      	pop	{r3, r4, r5, pc}
 8009922:	bf00      	nop
 8009924:	200003c0 	.word	0x200003c0

08009928 <_getpid_r>:
 8009928:	f7f9 b8de 	b.w	8002ae8 <_getpid>

0800992c <__sread>:
 800992c:	b510      	push	{r4, lr}
 800992e:	460c      	mov	r4, r1
 8009930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009934:	f000 f894 	bl	8009a60 <_read_r>
 8009938:	2800      	cmp	r0, #0
 800993a:	bfab      	itete	ge
 800993c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800993e:	89a3      	ldrhlt	r3, [r4, #12]
 8009940:	181b      	addge	r3, r3, r0
 8009942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009946:	bfac      	ite	ge
 8009948:	6563      	strge	r3, [r4, #84]	; 0x54
 800994a:	81a3      	strhlt	r3, [r4, #12]
 800994c:	bd10      	pop	{r4, pc}

0800994e <__swrite>:
 800994e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009952:	461f      	mov	r7, r3
 8009954:	898b      	ldrh	r3, [r1, #12]
 8009956:	4605      	mov	r5, r0
 8009958:	05db      	lsls	r3, r3, #23
 800995a:	460c      	mov	r4, r1
 800995c:	4616      	mov	r6, r2
 800995e:	d505      	bpl.n	800996c <__swrite+0x1e>
 8009960:	2302      	movs	r3, #2
 8009962:	2200      	movs	r2, #0
 8009964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009968:	f000 f868 	bl	8009a3c <_lseek_r>
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	4632      	mov	r2, r6
 8009970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	4628      	mov	r0, r5
 8009978:	463b      	mov	r3, r7
 800997a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800997e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009982:	f000 b817 	b.w	80099b4 <_write_r>

08009986 <__sseek>:
 8009986:	b510      	push	{r4, lr}
 8009988:	460c      	mov	r4, r1
 800998a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800998e:	f000 f855 	bl	8009a3c <_lseek_r>
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	bf15      	itete	ne
 8009998:	6560      	strne	r0, [r4, #84]	; 0x54
 800999a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800999e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099a2:	81a3      	strheq	r3, [r4, #12]
 80099a4:	bf18      	it	ne
 80099a6:	81a3      	strhne	r3, [r4, #12]
 80099a8:	bd10      	pop	{r4, pc}

080099aa <__sclose>:
 80099aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ae:	f000 b813 	b.w	80099d8 <_close_r>
	...

080099b4 <_write_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4604      	mov	r4, r0
 80099b8:	4608      	mov	r0, r1
 80099ba:	4611      	mov	r1, r2
 80099bc:	2200      	movs	r2, #0
 80099be:	4d05      	ldr	r5, [pc, #20]	; (80099d4 <_write_r+0x20>)
 80099c0:	602a      	str	r2, [r5, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f7f9 f8ce 	bl	8002b64 <_write>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_write_r+0x1e>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_write_r+0x1e>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	200003c0 	.word	0x200003c0

080099d8 <_close_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	2300      	movs	r3, #0
 80099dc:	4d05      	ldr	r5, [pc, #20]	; (80099f4 <_close_r+0x1c>)
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	602b      	str	r3, [r5, #0]
 80099e4:	f7f9 f8da 	bl	8002b9c <_close>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_close_r+0x1a>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_close_r+0x1a>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	200003c0 	.word	0x200003c0

080099f8 <_fstat_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	2300      	movs	r3, #0
 80099fc:	4d06      	ldr	r5, [pc, #24]	; (8009a18 <_fstat_r+0x20>)
 80099fe:	4604      	mov	r4, r0
 8009a00:	4608      	mov	r0, r1
 8009a02:	4611      	mov	r1, r2
 8009a04:	602b      	str	r3, [r5, #0]
 8009a06:	f7f9 f8d4 	bl	8002bb2 <_fstat>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	d102      	bne.n	8009a14 <_fstat_r+0x1c>
 8009a0e:	682b      	ldr	r3, [r5, #0]
 8009a10:	b103      	cbz	r3, 8009a14 <_fstat_r+0x1c>
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	bd38      	pop	{r3, r4, r5, pc}
 8009a16:	bf00      	nop
 8009a18:	200003c0 	.word	0x200003c0

08009a1c <_isatty_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	2300      	movs	r3, #0
 8009a20:	4d05      	ldr	r5, [pc, #20]	; (8009a38 <_isatty_r+0x1c>)
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	602b      	str	r3, [r5, #0]
 8009a28:	f7f9 f8d2 	bl	8002bd0 <_isatty>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_isatty_r+0x1a>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_isatty_r+0x1a>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	200003c0 	.word	0x200003c0

08009a3c <_lseek_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	4611      	mov	r1, r2
 8009a44:	2200      	movs	r2, #0
 8009a46:	4d05      	ldr	r5, [pc, #20]	; (8009a5c <_lseek_r+0x20>)
 8009a48:	602a      	str	r2, [r5, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f7f9 f8ca 	bl	8002be4 <_lseek>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_lseek_r+0x1e>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_lseek_r+0x1e>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	200003c0 	.word	0x200003c0

08009a60 <_read_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4604      	mov	r4, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	4611      	mov	r1, r2
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4d05      	ldr	r5, [pc, #20]	; (8009a80 <_read_r+0x20>)
 8009a6c:	602a      	str	r2, [r5, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f7f9 f85b 	bl	8002b2a <_read>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d102      	bne.n	8009a7e <_read_r+0x1e>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	b103      	cbz	r3, 8009a7e <_read_r+0x1e>
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	200003c0 	.word	0x200003c0

08009a84 <_init>:
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a86:	bf00      	nop
 8009a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8a:	bc08      	pop	{r3}
 8009a8c:	469e      	mov	lr, r3
 8009a8e:	4770      	bx	lr

08009a90 <_fini>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr
